
#Область ПрограммныйИнтерфейс

#Область Задачи

Функция   УстановитьСтатусЗадачиБэклог(Задача, ПериодЗаписи = Неопределено) Экспорт
	
	// Параметры операции
	
	Если ПериодЗаписи = Неопределено Тогда
		
		ПериодЗаписи = ТекущаяДата();	
		
	КонецЕсли;
	
	РезультатОперации = Новый Структура("Успешно, ТекстОшибки", Истина, "");
	
	// Изменение статуса
	
	Попытка
	
		НачатьТранзакцию();
		
		Блокировка              = Новый БлокировкаДанных;
		ЭлементБлокировки       = Блокировка.Добавить("РегистрСведений.СтатусыЗадач");
		ЭлементБлокировки.УстановитьЗначение("Задача", Задача); 
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		СтатусыЗадачВнестиЗапись(Задача, Перечисления.СтатусыЗадачЗначения.Бэклог, ПериодЗаписи);
	
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		РезультатОперации.Успешно     = Ложь;
		РезультатОперации.ТекстОшибки = ОписаниеОшибки();
		
		ОтменитьТранзакцию();
	
	КонецПопытки;
	
	Возврат РезультатОперации;
		
КонецФункции

Функция   ДобавитьЗадачуВВизитИзБэклога(Визит, Задача, ПериодЗаписи = Неопределено, БрендНаРазвитие = Неопределено) Экспорт
	
	// Параметры операции
	
	Если ПериодЗаписи = Неопределено Тогда
		
		ПериодЗаписи = ТекущаяДата();	
		
	КонецЕсли;
	
	Если БрендНаРазвитие = Неопределено Тогда
	
		БрендНаРазвитие = Справочники.Бренды.ПустаяСсылка();	
	
	КонецЕсли;
	
	РезультатОперации = Новый Структура("Успешно, ТекстОшибки", Истина, "");
	
	// Изменение статуса
	
	Попытка
	
		НачатьТранзакцию();
		
		// Блокировки
		
		БлокировкаСтатусыЗадач  = Новый БлокировкаДанных;
		ЭлементБлокировки       = БлокировкаСтатусыЗадач.Добавить("РегистрСведений.СтатусыЗадач");
		ЭлементБлокировки.УстановитьЗначение("Задача", Задача); 
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаСтатусыЗадач.Заблокировать();
		
		БлокировкаЗадачиВизита  = Новый БлокировкаДанных;
		ЭлементБлокировки       = БлокировкаЗадачиВизита.Добавить("Документ.Визит");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Визит); 
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаЗадачиВизита.Заблокировать();
		
		// Проверка блокировки задачи
		
		РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, "ВидЗадачи, ТочкаДоставки, Бренд, МаркетинговаяГруппа");  		
		Аналитика       = Справочники.Задачи.ПустаяСсылка();
		
		Если РеквизитыЗадачи.ВидЗадачи = Перечисления.ВидыЗадач.НаПродажу ИЛИ РеквизитыЗадачи.ВидЗадачи = Перечисления.ВидыЗадач.ПрочиеЗадачи Тогда
			
			Аналитика = Задача;
			
		ИначеЕсли РеквизитыЗадачи.ВидЗадачи = Перечисления.ВидыЗадач.НаРазвитие ИЛИ РеквизитыЗадачи.ВидЗадачи = Перечисления.ВидыЗадач.НаПадениеМаркетинговаяГруппа Тогда
			
			Аналитика = РеквизитыЗадачи.МаркетинговаяГруппа;	
			
		ИначеЕсли РеквизитыЗадачи.ВидЗадачи = Перечисления.ВидыЗадач.НаПадениеБренд Тогда	
			
			Аналитика = РеквизитыЗадачи.Бренд;
			
		КонецЕсли;

		Запрос       = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаблокированныеЗадачи.ТочкаДоставки КАК ТочкаДоставки,
		|	ЗаблокированныеЗадачи.ВидЗадачи КАК ВидЗадачи,
		|	ЗаблокированныеЗадачи.Аналитика КАК Аналитика
		|ИЗ
		|	РегистрСведений.ЗаблокированныеЗадачи КАК ЗаблокированныеЗадачи
		|ГДЕ
		|	ЗаблокированныеЗадачи.ТочкаДоставки = &ТочкаДоставки
		|	И ЗаблокированныеЗадачи.ВидЗадачи = &ВидЗадачи
		|	И ЗаблокированныеЗадачи.Аналитика = &Аналитика";
		
		Запрос.УстановитьПараметр("Аналитика"    , Аналитика);
		Запрос.УстановитьПараметр("ВидЗадачи"    , РеквизитыЗадачи.ВидЗадачи);
		Запрос.УстановитьПараметр("ТочкаДоставки", РеквизитыЗадачи.ТочкаДоставки);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
		
			ВызватьИсключение "Задача заблокирована";	
		
		КонецЕсли;	
		
		// Проверка текущего статуса
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатусыЗадачСрезПоследних.Статус КАК Статус,
		|	СтатусыЗадачСрезПоследних.Визит КАК Визит
		|ИЗ
		|	РегистрСведений.СтатусыЗадач.СрезПоследних(, Задача = &Задача) КАК СтатусыЗадачСрезПоследних";
		
		Запрос.УстановитьПараметр("Задача", Задача);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Если ЗначениеЗаполнено(Выборка.Статус) И Выборка.Статус <> Перечисления.СтатусыЗадачЗначения.Бэклог Тогда
				
				ВызватьИсключение "Задача не найдена в бэклоге";
				
			КонецЕсли;	
		
		КонецЕсли;
		
		ДатаВизита      = Визит.Дата;
		РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, "ДатаНачала, ДатаОкончания");
		
		Если РеквизитыЗадачи.ДатаНачала > ДатаВизита ИЛИ (ЗначениеЗаполнено(РеквизитыЗадачи.ДатаОкончания) И РеквизитыЗадачи.ДатаОкончания < ДатаВизита) Тогда
		
			ВызватьИсключение "Период задачи не подходит к визиту";	
		
		КонецЕсли;
		
		// Изменение данных

		СтатусыЗадачВнестиЗапись(Задача, Перечисления.СтатусыЗадачЗначения.Назначена, ПериодЗаписи, Визит);
		ЗадачиВизитаИзменитьЗапись(Визит, Задача, Перечисления.СтатусыЗадачЗначения.Назначена, , БрендНаРазвитие);
			
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		РезультатОперации.Успешно     = Ложь;
		РезультатОперации.ТекстОшибки = ОписаниеОшибки();
		
		ОтменитьТранзакцию();
	
	КонецПопытки;
	
	Возврат РезультатОперации;
		
КонецФункции

Функция   ПеренестиЗадачуИзВизитаВБэклог(Визит, Задача, ПериодЗаписи = Неопределено, ДополнительныеСвойства = Неопределено) Экспорт
	
	// Параметры операции
	
	Если ПериодЗаписи = Неопределено Тогда
		
		ПериодЗаписи = ТекущаяДата();	
		
	КонецЕсли;
	
	РезультатОперации = Новый Структура("Успешно, ТекстОшибки", Истина, "");
	
	// Изменение статуса
	
	Попытка
	
		НачатьТранзакцию();
		
		// Блокировки
		
		БлокировкаСтатусыЗадач  = Новый БлокировкаДанных;
		ЭлементБлокировки       = БлокировкаСтатусыЗадач.Добавить("РегистрСведений.СтатусыЗадач");
		ЭлементБлокировки.УстановитьЗначение("Задача", Задача); 
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаСтатусыЗадач.Заблокировать();
		
		БлокировкаЗадачиВизита  = Новый БлокировкаДанных;
		ЭлементБлокировки       = БлокировкаЗадачиВизита.Добавить("Документ.Визит");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Визит); 
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаЗадачиВизита.Заблокировать();
		
		// Проверка текущего статуса
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатусыЗадачСрезПоследних.Статус КАК Статус,
		|	СтатусыЗадачСрезПоследних.Визит КАК Визит
		|ИЗ
		|	РегистрСведений.СтатусыЗадач.СрезПоследних(, Задача = &Задача) КАК СтатусыЗадачСрезПоследних
		|ГДЕ
		|	СтатусыЗадачСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Назначена)
		|	И СтатусыЗадачСрезПоследних.Визит = &Визит";
		
		Запрос.УстановитьПараметр("Визит" , Визит);
		Запрос.УстановитьПараметр("Задача", Задача);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 0 Тогда
		
			ВызватьИсключение "Задача не определена для текущего визита";	
		
		КонецЕсли;
		
		// Изменение данных

		СтатусыЗадачВнестиЗапись(Задача, Перечисления.СтатусыЗадачЗначения.Бэклог, ПериодЗаписи);
		ЗадачиВизитаИзменитьЗапись(Визит, Задача, , , , Истина, ДополнительныеСвойства); 		
	
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		РезультатОперации.Успешно     = Ложь;
		РезультатОперации.ТекстОшибки = ОписаниеОшибки();
		
		ОтменитьТранзакцию();
	
	КонецПопытки;
	
	Возврат РезультатОперации;
		
КонецФункции

Функция   УстановитьСтатусЗадачиВВизите(Визит, Задача, Статус, ПериодЗаписи = Неопределено, Комментарий = "", Бренд = Неопределено, СрокКИЗ = 5, ПланПродажКИЗ = 0, НеРегистрировать = Ложь, ЗакрытаРегламентом = Ложь) Экспорт
	
	// Параметры операции
	
	Если ПериодЗаписи = Неопределено Тогда
		
		ПериодЗаписи = ТекущаяДата();	
		
	КонецЕсли;
	
	Если Бренд = Неопределено Тогда
	
		Бренд = Справочники.Бренды.ПустаяСсылка();	
	
	КонецЕсли;
	
	РезультатОперации = Новый Структура("Успешно, ТекстОшибки", Истина, "");
	
	ОтказРосскоПартнерОнбординг = Ложь;
	
	Если Статус = Перечисления.СтатусыЗадачЗначения.Отказ Тогда
	
		Статус 				        = Перечисления.СтатусыЗадачЗначения.НеВыполнена;
		ОтказРосскоПартнерОнбординг = Истина;
			
	КонецЕсли;
	// Изменение статуса
	
	Попытка
	
		НачатьТранзакцию();
		
		// Блокировки
		
		БлокировкаСтатусыЗадач  = Новый БлокировкаДанных;
		ЭлементБлокировки       = БлокировкаСтатусыЗадач.Добавить("РегистрСведений.СтатусыЗадач");
		ЭлементБлокировки.УстановитьЗначение("Задача", Задача); 
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаСтатусыЗадач.Заблокировать();
		
		БлокировкаЗадачиВизита  = Новый БлокировкаДанных;
		ЭлементБлокировки       = БлокировкаЗадачиВизита.Добавить("Документ.Визит");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Визит); 
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаЗадачиВизита.Заблокировать();
		
		// Проверка статуса
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатусыЗадачСрезПоследних.Статус КАК Статус,
		|	СтатусыЗадачСрезПоследних.Визит КАК Визит
		|ИЗ
		|	РегистрСведений.СтатусыЗадач.СрезПоследних(, Задача = &Задача) КАК СтатусыЗадачСрезПоследних
		|ГДЕ
		|	СтатусыЗадачСрезПоследних.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Назначена), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Контроль))
		|	И СтатусыЗадачСрезПоследних.Визит = &Визит
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СтатусыЗадачСрезПоследних.Статус,
		|	СтатусыЗадачСрезПоследних.Визит
		|ИЗ
		|	РегистрСведений.СтатусыЗадач.СрезПоследних(&Период, Задача = &Задача) КАК СтатусыЗадачСрезПоследних
		|ГДЕ
		|	СтатусыЗадачСрезПоследних.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Назначена), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Контроль))
		|	И СтатусыЗадачСрезПоследних.Визит = &Визит";
		
		Запрос.УстановитьПараметр("Визит" , Визит);
		Запрос.УстановитьПараметр("Задача", Задача);
		Запрос.УстановитьПараметр("Период", ПериодЗаписи);

		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() <> 2 Тогда
		
			ВызватьИсключение "Задача не определена для текущего визита";	
		
		Иначе
			
			Выборка.Следующий();
			
			СтатусЗадачи = Выборка.Статус;
		
		КонецЕсли;
		
		// Изменение данных
		
		РеквизитыЗадачи      = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, "ВидЗадачи, ДатаНачала, ДатаОкончания, ТочкаДоставки");
		
		ДопСвойства = Новый Структура;
		
		Если НеРегистрировать Тогда
			ДопСвойства.Вставить("НеРегистрировать", Истина);
		КонецЕсли;
		
		Если ЗакрытаРегламентом Тогда
		
			ДопСвойства.Вставить("ЗакрытаРегламентом", Истина);
		
		КонецЕсли;
	
		ЗадачиВизитаИзменитьЗапись(Визит, Задача, Статус, Комментарий, Бренд, , ДопСвойства);
		
		СтатусыЗадачЗначение = Статус;
		ЭтоЗадачаКИЗ         = РеквизитыЗадачи.ВидЗадачи = Перечисления.ВидыЗадач.НаПродажу ИЛИ РеквизитыЗадачи.ВидЗадачи = Перечисления.ВидыЗадач.НаРазвитие 
								ИЛИ РеквизитыЗадачи.ВидЗадачи = Перечисления.ВидыЗадач.НаПадениеБренд ИЛИ РеквизитыЗадачи.ВидЗадачи = Перечисления.ВидыЗадач.НаПадениеМаркетинговаяГруппа;
		
		Если Статус = Перечисления.СтатусыЗадачЗначения.Контроль Тогда
			
			Если ЭтоЗадачаКИЗ Тогда
					
				// Параметры КИЗ
				
				СтатусыЗадачЗначение = Перечисления.СтатусыЗадачЗначения.Контроль;
				ДатаНачалаКИЗ        = Дата(1, 1, 1);
				ДатаОкончанияКИЗ     = Дата(1, 1, 1);
				ДефицитНачало        = 0;
				ПериодЗаписиКИЗ      = Визит.Дата;	
				
				Если РеквизитыЗадачи.ВидЗадачи = Перечисления.ВидыЗадач.НаПродажу Тогда  				
					
					ДатаНачалаКИЗ    = ПериодЗаписиКИЗ;
					ДатаОкончанияКИЗ = ПериодЗаписиКИЗ + 60 * 60 * 24 * СрокКИЗ;
					ПланПродажКИЗ    = ПолучитьПланПродажКИЗ(Задача);
					
				Иначе     				
					
					ДатаНачалаКИЗ    = ПериодЗаписиКИЗ;
					ДатаОкончанияКИЗ = ПериодЗаписиКИЗ + 60 * 60 * 24 * СрокКИЗ;
					ДефицитНачало    = ПолучитьТекущийДефицит(Задача); 
					
					Если ПланПродажКИЗ = 0 Тогда
					
						ПланПродажКИЗ = ПолучитьПланПродажКИЗ(Задача);	
					
					КонецЕсли;
					
				КонецЕсли;
				
				// Запись КИЗ
				
				РезультатКИЗ = СоздатьИзменитьЗаписьКИЗ(Задача, Визит, Новый Структура("ДатаНачала, ДатаОкончания, Бренд, ДефицитНачало, СуммаПродажПлан, Статус", ДатаНачалаКИЗ, ДатаОкончанияКИЗ, Бренд, ДефицитНачало, ПланПродажКИЗ, СтатусыЗадачЗначение));			
				
				Если НЕ РезультатКИЗ.Успешно Тогда
				
					ВызватьИсключение РезультатКИЗ.ТекстОшибки;	
				
				КонецЕсли;
				
			Иначе
				
				ВызватьИсключение "Некорректный тип задачи";	
				
			КонецЕсли;
			
		ИначеЕсли Статус = Перечисления.СтатусыЗадачЗначения.НеВыполнена Тогда 
			 			
			//Проверка на контроль для задач КИЗ.	
			Если ЭтоЗадачаКИЗ И СтатусЗадачи = Перечисления.СтатусыЗадачЗначения.Контроль Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	КонтрольИсполненияЗадач.ДатаОкончания КАК ДатаОкончания
				|ИЗ
				|	РегистрСведений.КонтрольИсполненияЗадач КАК КонтрольИсполненияЗадач
				|ГДЕ
				|	КонтрольИсполненияЗадач.Задача = &Задача
				|	И КонтрольИсполненияЗадач.Визит = &Визит";
				
				Запрос.УстановитьПараметр("Задача", Задача);
				Запрос.УстановитьПараметр("Визит", Визит);
				
				Результат = Запрос.Выполнить();
				
				Если НЕ Результат.Пустой() Тогда
					
					Выборка = Результат.Выбрать();
					Выборка.Следующий();
					
					Если Выборка.ДатаОкончания > ПериодЗаписи Тогда
						ВызватьИсключение "Задача в статусе Контроль. Дата смены статуса меньше даты окончания контроля исполнения задачи.";
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			РезультатИзменениеЗадачи = ИзменитьЗадачу(Задача, Новый Структура("КоличествоПопыток", Задача.КоличествоПопыток + 1));
			
			Если РезультатИзменениеЗадачи.Успешно = Ложь Тогда
				
				ВызватьИсключение РезультатИзменениеЗадачи.ТекстОшибки;	
				
			КонецЕсли;
			
			Если ОтказРосскоПартнерОнбординг Тогда
				
				РезультатОтказРосскоПартнерОнбординг = УстановитьОтказРосскоПартнерОнбординг(РеквизитыЗадачи.ТочкаДоставки);
				
				Если РезультатОтказРосскоПартнерОнбординг.Успешно = Ложь Тогда
				
					ВызватьИсключение РезультатОтказРосскоПартнерОнбординг.ТекстОшибки;
						
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли Статус = Перечисления.СтатусыЗадачЗначения.Выполнена Тогда
			
			РезультатИзменениеЗадачи = ИзменитьЗадачу(Задача, Новый Структура("КоличествоПопыток", Задача.КоличествоПопыток + 1));
			
			Если РезультатИзменениеЗадачи.Успешно = Ложь Тогда
				
				ВызватьИсключение РезультатИзменениеЗадачи.ТекстОшибки;	
				
			КонецЕсли;
			
			РезультатПроверитьЗафиксироватьЗадачуРосскоПартнерOnboarding = ПроверитьЗафиксироватьЗадачуРосскоПартнерOnboarding(Задача);
			
			Если РезультатПроверитьЗафиксироватьЗадачуРосскоПартнерOnboarding.Успешно = Ложь Тогда
			
				ВызватьИсключение РезультатПроверитьЗафиксироватьЗадачуРосскоПартнерOnboarding.ТекстОшибки;	
			
			КонецЕсли;
			
		Иначе
			
			ВызватьИсключение "Неизвестный статус";
			
		КонецЕсли;
		
		СтатусыЗадачВнестиЗапись(Задача, СтатусыЗадачЗначение, ПериодЗаписи, Визит);
	
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		РезультатОперации.Успешно     = Ложь;
		РезультатОперации.ТекстОшибки = ОписаниеОшибки();
		
		ОтменитьТранзакцию();
	
	КонецПопытки;
	
	Возврат РезультатОперации;
		
КонецФункции

Функция   НайтиСоздатьЗадачуПоАналитике(ТочкаДоставки, ВидЗадачи, Аналитика) Экспорт

	Если ВидЗадачи = Перечисления.ВидыЗадач.ПрочиеЗадачи ИЛИ ВидЗадачи = Перечисления.ВидыЗадач.НаПродажу Тогда
	
		Возврат Новый Структура("Успешно, ТекстОшибки, Задача", Ложь, "", Справочники.Задачи.ПустаяСсылка())
			
	КонецЕсли;

	Запрос       = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Задачи.Ссылка
		|ИЗ
		|	Справочник.Задачи КАК Задачи
		|ГДЕ
		|	Задачи.ТочкаДоставки = &ТочкаДоставки
		|	И Задачи.ЗадачаЗакрыта = ЛОЖЬ
		|	И Задачи.ПометкаУдаления = ЛОЖЬ
		|	И Задачи.ВидЗадачи = &ВидЗадачи
		|	И ВЫБОР
		|		КОГДА &ВидЗадачи = ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаРазвитие)
		|			ТОГДА Задачи.МаркетинговаяГруппа = &Аналитика
		|		КОГДА &ВидЗадачи = ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаПадениеБренд)
		|			ТОГДА Задачи.Бренд = &Аналитика
		|		КОГДА &ВидЗадачи = ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаПадениеМаркетинговаяГруппа)
		|			ТОГДА Задачи.МаркетинговаяГруппа = &Аналитика
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ";
	
	Запрос.УстановитьПараметр("Аналитика"    , Аналитика);
	Запрос.УстановитьПараметр("ВидЗадачи"    , ВидЗадачи);
	Запрос.УстановитьПараметр("ТочкаДоставки", ТочкаДоставки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		Возврат Новый Структура("Успешно, ТекстОшибки, Задача", Истина, "", Выборка.Ссылка);
			
	Иначе
		
		СтруктураЗадача = Новый Структура("ТочкаДоставки, Клиент, ВидЗадачи", ТочкаДоставки, ТочкаДоставки.Владелец, ВидЗадачи);
		
		Если ВидЗадачи = Перечисления.ВидыЗадач.НаРазвитие Тогда
		
			СтруктураЗадача.Вставить("МаркетинговаяГруппа", Аналитика);	
			
		ИначеЕсли ВидЗадачи = Перечисления.ВидыЗадач.НаПадениеМаркетинговаяГруппа Тогда
		
			СтруктураЗадача.Вставить("МаркетинговаяГруппа", Аналитика);	
			
		ИначеЕсли ВидЗадачи = Перечисления.ВидыЗадач.НаПадениеБренд Тогда
		
			СтруктураЗадача.Вставить("Бренд", Аналитика);	
			
		КонецЕсли;
		
		СтруктураЗадача.Вставить("СуммаПродажПлан", ПолучитьТекущийДефицит(СтруктураЗадача) * -1);
		
		Возврат СоздатьЗадачу(СтруктураЗадача);
		
	КонецЕсли;
	
КонецФункции

Функция   СоздатьЗадачу(ДанныеЗадачи, Визит = Неопределено) Экспорт

	Если ДанныеЗадачи.Свойство("БрендНаРазвитие") Тогда
	
		БрендНаРазвитие = ДанныеЗадачи.БрендНаРазвитие;	
	
	Иначе
	
		БрендНаРазвитие = Справочники.Бренды.ПустаяСсылка();
	
	КонецЕсли;
	
	РезультатОперации = Новый Структура("Успешно, ТекстОшибки, Задача", Истина, "", Справочники.Задачи.ПустаяСсылка());
	
	Попытка
		
		НачатьТранзакцию();
		
		НоваяЗадача = Справочники.Задачи.СоздатьЭлемент();
		НоваяЗадача.УстановитьНовыйКод();
		
		ЗаполнитьЗначенияСвойств(НоваяЗадача, ДанныеЗадачи);
		
		НоваяЗадача.ДополнительныеСвойства.Вставить("ИзменениеЗадачи", Истина);
		НоваяЗадача.Записать();
		
		Если Визит <> Неопределено И ЗначениеЗаполнено(Визит) Тогда 			
			
			Результат = ДобавитьЗадачуВВизитИзБэклога(Визит, НоваяЗадача.Ссылка, , БрендНаРазвитие);
			
			Если НЕ Результат.Успешно Тогда
				
				ВызватьИсключение Результат.ТекстОшибки;	
				
			КонецЕсли; 			
			
		Иначе
			
			Результат = УстановитьСтатусЗадачиБэклог(НоваяЗадача.Ссылка);
			
			Если НЕ Результат.Успешно Тогда
				
				ВызватьИсключение Результат.ТекстОшибки;	
				
			КонецЕсли;		
			
		КонецЕсли;
		
		РезультатОперации.Задача = НоваяЗадача.Ссылка;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		РезультатОперации.Успешно     = Ложь;
		РезультатОперации.ТекстОшибки = ОписаниеОшибки();
		
		ОтменитьТранзакцию();

	КонецПопытки;
	
	Возврат РезультатОперации;

КонецФункции // ()

Функция   ИзменитьЗадачу(Задача, ДанныеЗадачи) Экспорт
	
	РезультатОперации = Новый Структура("Успешно, ТекстОшибки", Истина, "");
	
	Попытка
		
		НачатьТранзакцию();
		
		БлокировкаПараметрыВизита  = Новый БлокировкаДанных;
		ЭлементБлокировки          = БлокировкаПараметрыВизита.Добавить("Справочник.Задачи");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Задача); 
		ЭлементБлокировки.Режим    = РежимБлокировкиДанных.Исключительный;
		БлокировкаПараметрыВизита.Заблокировать(); 
		
		ЗадачаОбъект = Задача.ПолучитьОбъект();
		
		Если ЗадачаОбъект = Неопределено Тогда
		
			ВызватьИсключение "Задача не определена";	
		
		КонецЕсли;
		
		Если ДанныеЗадачи.Свойство("ИзменитьТолькоВСтатусеБэклог") И ДанныеЗадачи.ИзменитьТолькоВСтатусеБэклог = Истина Тогда
						
			Запрос       = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СтатусыЗадачСрезПоследних.Статус КАК Статус
			|ИЗ
			|	РегистрСведений.СтатусыЗадач.СрезПоследних(, Задача = &Задача) КАК СтатусыЗадачСрезПоследних";
			
			Запрос.УстановитьПараметр("Задача", Задача);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				
				Если Выборка.Статус <> Перечисления.СтатусыЗадачЗначения.Бэклог Тогда
				
					ВызватьИсключение "Задача не в бэклоге";					
				
				КонецЕсли;
			
			Иначе
				
				ВызватьИсключение "Статус не определен";
			
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеЗадачи.Свойство("НеПроверятьДубли") И ДанныеЗадачи.НеПроверятьДубли = Истина Тогда
			
			ЗадачаОбъект.ДополнительныеСвойства.Вставить("НеПроверятьДубли", Истина);  	
						
		КонецЕсли;      
				
		ЗаполнитьЗначенияСвойств(ЗадачаОбъект, ДанныеЗадачи);
		
		ЗадачаОбъект.ДополнительныеСвойства.Вставить("ИзменениеЗадачи", Истина);
		ЗадачаОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		
		РезультатОперации.Успешно     = Ложь;
		РезультатОперации.ТекстОшибки = ОписаниеОшибки();
	
	КонецПопытки;
	
	Возврат РезультатОперации;

КонецФункции // ()

Функция   СоздатьИзменитьЗаписьКИЗ(Задача, Визит, ЗначенияРесурсов) Экспорт
	
	РезультатОперации = Новый Структура("Успешно, ТекстОшибки", Истина, "");
	
	Попытка
		
		НачатьТранзакцию();
		
		НаборЗаписей = РегистрыСведений.КонтрольИсполненияЗадач.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Задача.Установить(Задача);
		НаборЗаписей.Отбор.Визит.Установить(Визит); 		
		
		НаборЗаписей.Прочитать();		
		
		Если НаборЗаписей.Количество() <> 0 Тогда
			
			Запись = НаборЗаписей[0];
			
		Иначе
			
			Запись 		  = НаборЗаписей.Добавить();
			Запись.Задача = Задача;
			Запись.Визит  = Визит; 			
			
		КонецЕсли;  
		
		Если ЗначенияРесурсов.Свойство("Статус") И ЗначенияРесурсов.Статус <> Запись.Статус
			И (ЗначенияРесурсов.Статус = Перечисления.СтатусыЗадачЗначения.Выполнена ИЛИ ЗначенияРесурсов.Статус = Перечисления.СтатусыЗадачЗначения.НеВыполнена) Тогда
		
			Запрос		 = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВизитЗадачи.Комментарий КАК Комментарий,
			|	ВизитЗадачи.Бренд КАК Бренд
			|ИЗ
			|	Документ.Визит.Задачи КАК ВизитЗадачи
			|ГДЕ
			|	ВизитЗадачи.Ссылка = &Визит
			|	И ВизитЗадачи.Задача = &Задача";
			
			Запрос.УстановитьПараметр("Визит" , Визит);
			Запрос.УстановитьПараметр("Задача", Задача);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			
			РезультатИзменениеСтатусаВВизите = УстановитьСтатусЗадачиВВизите(Визит, Задача, ЗначенияРесурсов.Статус, , Выборка.Комментарий, Выборка.Бренд);  	
			
			Если НЕ РезультатИзменениеСтатусаВВизите.Успешно Тогда
				
				ВызватьИсключение РезультатИзменениеСтатусаВВизите.ТекстОшибки;	
										
			КонецЕсли;
                       	
		КонецЕсли;      
				
		ЗаполнитьЗначенияСвойств(Запись, ЗначенияРесурсов);
		
		НаборЗаписей.ДополнительныеСвойства.Вставить("ЗаписьРазрешена", Истина);
		
		НаборЗаписей.Записать(); 		
				
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		РезультатОперации.Успешно     = Ложь;
		РезультатОперации.ТекстОшибки = ОписаниеОшибки();

	КонецПопытки; 
	
	Возврат РезультатОперации;
	
КонецФункции // () 

Функция   ПолучитьТаблицуОстатковПоМаркетинговойГруппе(Клиент, МаркетинговаяГруппа) Экспорт
	
	Филиал = Клиент.Филиал;	
	
	Запрос       = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиПоФилиалам.Бренд КАК Бренд,
		|	ОстаткиПоФилиалам.КоличествоОстаток КАК КоличествоОстаток
		|ИЗ
		|	РегистрСведений.ОстаткиПоФилиалам КАК ОстаткиПоФилиалам
		|ГДЕ
		|	ОстаткиПоФилиалам.Филиал = &Филиал
		|	И ОстаткиПоФилиалам.МаркетинговаяГруппа = &МаркетинговаяГруппа
		|	И ОстаткиПоФилиалам.Бренд.Используется
		|	И ОстаткиПоФилиалам.Бренд.ПриоритетБренда > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОстаткиПоФилиалам.Бренд.Наименование";
	
	Запрос.УстановитьПараметр("МаркетинговаяГруппа", МаркетинговаяГруппа);
	Запрос.УстановитьПараметр("Филиал"             , Филиал);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // () 

Функция   ИзменитьЗаписьЗаблокированныеЗадачи(ТочкаДоставки, ВидЗадачи, Аналитика, Удалить = Ложь) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно"    , Ложь);
	Результат.Вставить("ТекстОшибки", "");
	
	Попытка
		
		ТекЗадача = Справочники.Задачи.ПустаяСсылка();
		
		Если ВидЗадачи = Перечисления.ВидыЗадач.НаПродажу ИЛИ ВидЗадачи = Перечисления.ВидыЗадач.ПрочиеЗадачи Тогда
			
			ТекЗадача = Аналитика;	
			
			Если ТекЗадача.ЗадачаЗакрыта Тогда
			
				ВызватьИсключение "Задача в архиве";	
			
			КонецЕсли;
		
		ИначеЕсли ВидЗадачи = Перечисления.ВидыЗадач.НаРазвитие ИЛИ ВидЗадачи = Перечисления.ВидыЗадач.НаПадениеМаркетинговаяГруппа Тогда
			
			Запрос       = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Задачи.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Задачи КАК Задачи
			|ГДЕ
			|	Задачи.ТочкаДоставки = &ТочкаДоставки
			|	И Задачи.ВидЗадачи = &ВидЗадачи
			|	И Задачи.ПометкаУдаления = ЛОЖЬ
			|	И Задачи.МаркетинговаяГруппа = &МаркетинговаяГруппа
			|	И Задачи.ЗадачаЗакрыта = ЛОЖЬ";
			
			Запрос.УстановитьПараметр("ВидЗадачи"          , ВидЗадачи);
			Запрос.УстановитьПараметр("МаркетинговаяГруппа", Аналитика);
			Запрос.УстановитьПараметр("ТочкаДоставки"      , ТочкаДоставки);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
			
				ТекЗадача = Выборка.Ссылка;	
			
			КонецЕсли;	
			
		ИначеЕсли ВидЗадачи = Перечисления.ВидыЗадач.НаПадениеБренд Тогда	
			
			Запрос       = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Задачи.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Задачи КАК Задачи
			|ГДЕ
			|	Задачи.ТочкаДоставки = &ТочкаДоставки
			|	И Задачи.ВидЗадачи = &ВидЗадачи
			|	И Задачи.ПометкаУдаления = ЛОЖЬ
			|	И Задачи.Бренд = &Бренд
			|	И Задачи.ЗадачаЗакрыта = ЛОЖЬ";
			
			Запрос.УстановитьПараметр("ВидЗадачи"    , ВидЗадачи);
			Запрос.УстановитьПараметр("Бренд"        , Аналитика);
			Запрос.УстановитьПараметр("ТочкаДоставки", ТочкаДоставки);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
			
				ТекЗадача = Выборка.Ссылка;	
			
			КонецЕсли;	
			
		КонецЕсли;
	
		Если ЗначениеЗаполнено(ТекЗадача) Тогда
					
			Запрос       = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СтатусыЗадачСрезПоследних.Статус КАК Статус
			|ИЗ
			|	РегистрСведений.СтатусыЗадач.СрезПоследних(, Задача = &Задача) КАК СтатусыЗадачСрезПоследних
			|ГДЕ
			|	СтатусыЗадачСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Бэклог)";
			
			Запрос.УстановитьПараметр("Задача", ТекЗадача);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если НЕ Выборка.Следующий() Тогда
			
				ВызватьИсключение "Задача не в бэклоге";
			
			КонецЕсли;
						
		КонецЕсли;   	
		
	Исключение
		Результат.ТекстОшибки = ОписаниеОшибки();
		Возврат Результат;
	КонецПопытки;
		
	Попытка
		
		НачатьТранзакцию();
			
		Набор = РегистрыСведений.ЗаблокированныеЗадачи.СоздатьНаборЗаписей();
		Набор.Отбор.ТочкаДоставки.Установить(ТочкаДоставки);
		Набор.Отбор.ВидЗадачи.Установить(ВидЗадачи);
		Набор.Отбор.Аналитика.Установить(Аналитика);
		
		Набор.ДополнительныеСвойства.Вставить("ЗаписьРазрешена", Истина);
		
		Если Удалить = Ложь Тогда
			
			Запись               = Набор.Добавить();
			Запись.ТочкаДоставки = ТочкаДоставки;
			Запись.ВидЗадачи     = ВидЗадачи;
			Запись.Аналитика     = Аналитика;
			
		КонецЕсли;	
		
		Набор.Записать();
		
		РезультатРасчета = УправлениеПродажамиСервер.ДополнительныйРасчетАналитикиПараметровПоТочке(ТочкаДоставки);
		
		Если НЕ РезультатРасчета.Успешно Тогда
			
			ОтменитьТранзакцию();
		
			Результат.ТекстОшибки = РезультатРасчета.ТекстОшибки;
			Возврат Результат;
			
		КонецЕсли;
						
		ЗафиксироватьТранзакцию();
		
		Результат.Успешно = Истина;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Результат.ТекстОшибки = ОписаниеОшибки();
		
	КонецПопытки;

	Возврат Результат;

КонецФункции // ()

Функция   ДобавитьЗадачуВНовыйВизит(ДатаВизита, ТочкаДоставки, МенеджерКлиента, Задача) Экспорт

	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("Успешно"    , Ложь); 
	РезультатОперации.Вставить("ТекстОшибки", "Ошибка изменения задачи"); 
	
	Попытка
		
		НачатьТранзакцию();
		
		НовыйВизит = УправлениеПродажамиСервер.СоздатьВизит(ДатаВизита, ТочкаДоставки, МенеджерКлиента, Истина);
		
		Если ЗначениеЗаполнено(НовыйВизит.Ссылка) Тогда
			
			НоваяЗадача = УправлениеПродажамиСервер.ДобавитьЗадачуВВизитИзБэклога(НовыйВизит.Ссылка, Задача);
			
			Если НоваяЗадача.Успешно Тогда
			
				РезультатОперации.Успешно = Истина;		
			
			Иначе
			
				РезультатОперации.ТекстОшибки = НоваяЗадача.ТекстОшибки;
			
			КонецЕсли;
		
		Иначе
			
			ВызватьИсключение НовыйВизит.ТекстОшибки;
		
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		РезультатОперации.ТекстОшибки = ОписаниеОшибки();
		
	КонецПопытки;
	
	Возврат РезультатОперации;
	
КонецФункции // ()

Функция   ДобавитьЗадачуВАрхив(Задача) Экспорт

	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("Успешно"    , Ложь); 
	РезультатОперации.Вставить("ТекстОшибки", "Ошибка изменения задачи"); 
	
	Попытка
		
		НачатьТранзакцию();
		
		Запрос       = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатусыЗадачСрезПоследних.Статус КАК Статус,
		|	СтатусыЗадачСрезПоследних.Визит КАК Визит
		|ИЗ
		|	РегистрСведений.СтатусыЗадач.СрезПоследних(, Задача = &Задача) КАК СтатусыЗадачСрезПоследних
		|ГДЕ
		|	СтатусыЗадачСрезПоследних.Статус В (ЗНАЧЕНИЕ(Перечисление.статусыЗадачЗначения.Назначена), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Бэклог))";
		
		Запрос.УстановитьПараметр("Задача", Задача);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
		
			Если Выборка.Статус = Перечисления.СтатусыЗадачЗначения.Назначена Тогда
			
				РезультатПеренос = ПеренестиЗадачуИзВизитаВБэклог(Выборка.Визит, Задача);	
				
				Если НЕ РезультатПеренос.Успешно Тогда
				
					ВызватьИсключение РезультатПеренос.ТекстОшибки;	
				
				КонецЕсли;
				
			КонецЕсли;
		
		Иначе
		
			ВызватьИсключение "Запрещено изменять задачу в текущем статусе";	
		
		КонецЕсли;
		
		ДанныеЗадачи = Новый Структура;
		ДанныеЗадачи.Вставить("ЗадачаЗакрыта", Истина);
		ДанныеЗадачи.Вставить("ИзменитьТолькоВСтатусеБэклог", Истина); 
		
		РезультатЗадачаЗакрыта = УправлениеПродажамиСервер.ИзменитьЗадачу(Задача, ДанныеЗадачи);
		
		Если РезультатЗадачаЗакрыта.Успешно Тогда
			
			РезультатОперации.Успешно = Истина;	
			
		Иначе
			
			ВызватьИсключение РезультатЗадачаЗакрыта.ТекстОшибки;
			
		КонецЕсли; 			
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		РезультатОперации.ТекстОшибки = ОписаниеОшибки();
		
	КонецПопытки;
	
	Возврат РезультатОперации;
	
КонецФункции // ()

Функция   ИзменитьКомментарийВЗадаче(Визит, Задача, Комментарий) Экспорт
	
	Результат = Новый Структура("Успех, ОписаниеОшибки", Ложь, "");
	
	Попытка
	
		ВизитОбъект = Визит.ПолучитьОбъект();
		
		ВизитОбъект.ДополнительныеСвойства.Вставить("ЗаписьРазрешена", Истина);
		
		ТЧЗадачи = ВизитОбъект.Задачи;
		
		ИзменяемаяСтрока = ТЧЗадачи.Найти(Задача, "Задача");
		
		Если НЕ ИзменяемаяСтрока = Неопределено Тогда
			Если НЕ ИзменяемаяСтрока.Статус = Перечисления.СтатусыЗадачЗначения.Назначена Тогда
				
				ИзменяемаяСтрока.Комментарий = Комментарий;
				
				ВизитОбъект.Записать();
				
				Результат.Успех = Истина;
				
			Иначе
				Результат.ОписаниеОшибки = "Запрещено изменять ответ в статусе ""Назначена""";
			КонецЕсли;
		Иначе
			Результат.ОписаниеОшибки = "Изменяемая строка не найдена";
		КонецЕсли;
		
	Исключение
		
		Результат.ОписаниеОшибки = ОписаниеОшибки();
		
	КонецПопытки;
	
	Возврат Результат;
		
КонецФункции

#КонецОбласти

#Область Визит

Функция   ПолучитьТаблицыЗадачПоВизиту(Визит, АктуальныйВизит = Истина) Экспорт

	ВизитРеквизиты     = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Визит, "ТочкаДоставки, Дата");
	
	СтруктураРезультат = Новый Структура;
	
	ТаблицаЗадач	   = ПолучитьТаблицуЗадачи(ВизитРеквизиты.ТочкаДоставки, ВизитРеквизиты.Дата);
	ЗадачиВизита       = ПолучитьЗадачиВизита(Визит);              	
	ЗадачиВизита.Колонки.Удалить("Порядок");
	
	тзЗадачиИсключить  = ЗадачиВизита.Скопировать(, "Задача"); // Исключить из бэклога задачи визита (в визите на текущий день задача может быть не выполнена и отправлена назад в бэклог)
	
	СтруктураРезультат.Вставить("ЗадачиВизита" , ЗадачиВизита);
	СтруктураРезультат.Вставить("ДанныеПоТочке", ПолучитьДанныеПоТочке(ВизитРеквизиты.Дата, ВизитРеквизиты.ТочкаДоставки));
	
	Если АктуальныйВизит Тогда 		
		
		СтруктураРезультат.Вставить("ПрочиеЗадачи"                , ПолучитьОперативныйБэклогЗадачФактическиеДанные(ТаблицаЗадач, тзЗадачиИсключить));
		СтруктураРезультат.Вставить("НаПадениеБренд"              , ПолучитьОперативныйБэклогЗадачДинамическиеДанныеНаПадениеБренд(ВизитРеквизиты.ТочкаДоставки, ТаблицаЗадач, тзЗадачиИсключить)); 
		СтруктураРезультат.Вставить("НаПадениеМаркетинговаяГруппа", ПолучитьОперативныйБэклогЗадачДинамическиеДанныеНаПадениеМаркетинговаяГруппа(ВизитРеквизиты.ТочкаДоставки, ТаблицаЗадач, тзЗадачиИсключить));
		СтруктураРезультат.Вставить("НаРазвитие"                  , ПолучитьОперативныйБэклогЗадачДинамическиеДанныеНаРазвитие(ВизитРеквизиты.ТочкаДоставки, ТаблицаЗадач, тзЗадачиИсключить));
			
	КонецЕсли;

	Возврат СтруктураРезультат;
	
КонецФункции // ()   

Функция   ПолучитьДанныеПоТочке(ВизитДата, ВизитТочкаДоставки)

	ТекГрейд                   = 1;
	ТекПродажаНаПост           = 0;
	ТекКоличествоТоварныхГрупп = 0;
	ТекИндексМасла 			   = 0;

	ТочкаДоставкиРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВизитТочкаДоставки, "КаналСбыта, КоличествоПостов, КомментарийНаРазвитие");
	
	КоличествоПостов       = ТочкаДоставкиРеквизиты.КоличествоПостов;
	
	Если КоличествоПостов = 0 Тогда
		
		КаналыСбытаКодыСТО = УправлениеПродажамиСерверПовтИсп.ПолучитьЗначениеНастройкиИнформационнойБазы("КаналыСбытаКодыСТО");
		МассивКодыСТО      = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КаналыСбытаКодыСТО, ";");   	
  		
		Запрос       = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КаналыСбыта.Ссылка КАК КаналСбыта
			|ПОМЕСТИТЬ втКаналыСбытаГруппыСТО
			|ИЗ
			|	Справочник.КаналыСбыта КАК КаналыСбыта
			|ГДЕ
			|	КаналыСбыта.Код В (&КаналыСбытаКодыСТО)
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КаналыСбыта.Ссылка КАК КаналСбыта,
			|	ВЫБОР
			|		КОГДА КаналыСбыта.Ссылка В ИЕРАРХИИ
			|			(ВЫБРАТЬ
			|				втКаналыСбытаГруппыСТО.КаналСбыта
			|			ИЗ
			|				втКаналыСбытаГруппыСТО)
			|			ТОГДА 2
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК КоличествоПостовПоУмолчанию
			|ИЗ
			|	Справочник.КаналыСбыта КАК КаналыСбыта
			|ГДЕ
			|	КаналыСбыта.ЭтоГруппа = ЛОЖЬ
			|	И КаналыСбыта.ПометкаУдаления = ЛОЖЬ";	
			
		Запрос.УстановитьПараметр("КаналыСбытаКодыСТО", МассивКодыСТО);	
		
		ПостыПоУмолчанию = Запрос.Выполнить().Выгрузить();
		
		СтрокаКаналСбыта = ПостыПоУмолчанию.Найти(ТочкаДоставкиРеквизиты.КаналСбыта, "КаналСбыта");
		
		Если СтрокаКаналСбыта = Неопределено Тогда
			
			КоличествоПостов = 1;
			
		Иначе
			
			КоличествоПостов = СтрокаКаналСбыта.КоличествоПостовПоУмолчанию;
			
		КонецЕсли;
		
	КонецЕсли;	
		
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МакроПланПараметрыРасчета.ЗначениеПоказателя,
		|	МакроПланПараметрыРасчета.ВыручкаНаПост,
		|	МакроПланПараметрыРасчета.КоличествоТоварныхГрупп
		|ИЗ
		|	РегистрСведений.МакроПланПараметрыРасчета КАК МакроПланПараметрыРасчета
		|ГДЕ
		|	МакроПланПараметрыРасчета.Показатель = &Показатель";
	
	Запрос.УстановитьПараметр("Показатель", Перечисления.ВидыПоказателей.Грейд);
	
	МакроПланПараметры = Запрос.Выполнить().Выгрузить();
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат.Колонки.Добавить("Грейд"                      , Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(1, 0)));
	ТаблицаРезультат.Колонки.Добавить("ВыручкаНаПост"              , Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	ТаблицаРезультат.Колонки.Добавить("ВыручкаНаПостПлан"          , Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	ТаблицаРезультат.Колонки.Добавить("КоличествоТоварныхГрупп"    , Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	ТаблицаРезультат.Колонки.Добавить("КоличествоТоварныхГруппПлан", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	ТаблицаРезультат.Колонки.Добавить("ИндексМасла"                , Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(1, 0)));
	ТаблицаРезультат.Колонки.Добавить("КоличествоПостов"           , Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5, 0)));
	ТаблицаРезультат.Колонки.Добавить("КомментарийНаРазвитие"      , Новый ОписаниеТипов("Строка", , , Новый КвалификаторыСтроки(500)));
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ВложенныйЗапрос.ОбъемПродажНаОдинПост) КАК ОбъемПродажНаОдинПост,
		|	МАКСИМУМ(ВложенныйЗапрос.Грейд) КАК Грейд,
		|	МАКСИМУМ(ВложенныйЗапрос.ПродажиКоличествоМаркетинговыхГрупп) КАК ПродажиКоличествоМаркетинговыхГрупп,
		|	МАКСИМУМ(ВложенныйЗапрос.ИндексМасла) КАК ИндексМасла
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПоказателиТочекДоставки.Показатель КАК ОбъемПродажНаОдинПост,
		|		0 КАК Грейд,
		|		0 КАК ПродажиКоличествоМаркетинговыхГрупп,
		|		0 КАК ИндексМасла
		|	ИЗ
		|		РегистрСведений.ПоказателиТочекДоставки КАК ПоказателиТочекДоставки
		|	ГДЕ
		|		ПоказателиТочекДоставки.Период = &Период
		|		И ПоказателиТочекДоставки.ТочкаДоставки = &ТочкаДоставки
		|		И ПоказателиТочекДоставки.ВидПоказателя = ЗНАЧЕНИЕ(Перечисление.ВидыПоказателей.ОбъемПродажНаОдинПост)
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		0,
		|		0,
		|		ПоказателиТочекДоставки.Показатель,
		|		0
		|	ИЗ
		|		РегистрСведений.ПоказателиТочекДоставки КАК ПоказателиТочекДоставки
		|	ГДЕ
		|		ПоказателиТочекДоставки.Период = &Период
		|		И ПоказателиТочекДоставки.ТочкаДоставки = &ТочкаДоставки
		|		И ПоказателиТочекДоставки.ВидПоказателя = ЗНАЧЕНИЕ(Перечисление.ВидыПоказателей.ПродажиКоличествоМаркетинговыхГрупп)
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		0,
		|		ПоказателиТочекДоставки.Показатель,
		|		0,
		|		0
		|	ИЗ
		|		РегистрСведений.ПоказателиТочекДоставки КАК ПоказателиТочекДоставки
		|	ГДЕ
		|		ПоказателиТочекДоставки.Период = &Период
		|		И ПоказателиТочекДоставки.ТочкаДоставки = &ТочкаДоставки
		|		И ПоказателиТочекДоставки.ВидПоказателя = ЗНАЧЕНИЕ(Перечисление.ВидыПоказателей.Грейд)
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		0,
		|		0,
		|		0,
		|		ПоказателиТочекДоставки.Показатель
		|	ИЗ
		|		РегистрСведений.ПоказателиТочекДоставки КАК ПоказателиТочекДоставки
		|	ГДЕ
		|		ПоказателиТочекДоставки.Период = &Период
		|		И ПоказателиТочекДоставки.ТочкаДоставки = &ТочкаДоставки
		|		И ПоказателиТочекДоставки.ВидПоказателя = ЗНАЧЕНИЕ(Перечисление.ВидыПоказателей.ИндексМасленщика)) КАК
		|		ВложенныйЗапрос";
	
	Запрос.УстановитьПараметр("Период"       , НачалоМесяца(ВизитДата));
	Запрос.УстановитьПараметр("ТочкаДоставки", ВизитТочкаДоставки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если ЗначениеЗаполнено(Выборка.Грейд) Тогда
	
			ТекГрейд                   = Выборка.Грейд;	
			ТекПродажаНаПост           = Выборка.ОбъемПродажНаОдинПост;
			ТекКоличествоТоварныхГрупп = Выборка.ПродажиКоличествоМаркетинговыхГрупп;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ИндексМасла) Тогда
			
			ТекИндексМасла = Выборка.ИндексМасла;
			
		КонецЕсли;
		
	КонецЕсли;      	
	
	нСтр                         = ТаблицаРезультат.Добавить();
	нСтр.Грейд                   = ТекГрейд;
	нСтр.ВыручкаНаПост           = ТекПродажаНаПост;
	нСтр.КоличествоТоварныхГрупп = ТекКоличествоТоварныхГрупп;
	нСтр.ИндексМасла 		     = ТекИндексМасла;
	нСтр.КоличествоПостов		 = КоличествоПостов;
	нСтр.КомментарийНаРазвитие	 = ТочкаДоставкиРеквизиты.КомментарийНаРазвитие;
	
	СтрокаПараметры = МакроПланПараметры.Найти(ТекГрейд + 1, "ЗначениеПоказателя");
	
	Если СтрокаПараметры = Неопределено Тогда
		
		СтрокаПараметры = МакроПланПараметры.Найти(ТекГрейд, "ЗначениеПоказателя");	
		
		Если СтрокаПараметры = Неопределено Тогда
		
			СтрокаПараметры = Новый Структура("ВыручкаНаПост, КоличествоТоварныхГрупп", 0, 0);
			
		КонецЕсли;
		
	КонецЕсли;
	
	нСтр.ВыручкаНаПостПлан           = СтрокаПараметры.ВыручкаНаПост;
	нСтр.КоличествоТоварныхГруппПлан = СтрокаПараметры.КоличествоТоварныхГрупп; 	
		
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция   РассчитатьДополнительныеПараметрыВизита(ТаблицаВизиты) Экспорт

	Запрос       = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаВизиты.Визит КАК Визит
		|ПОМЕСТИТЬ втВизиты
		|ИЗ
		|	&ТаблицаВизиты КАК ТаблицаВизиты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втВизиты.Визит КАК Визит,
		|	втВизиты.Визит.КоличествоЗадачНаРазвитие КАК КоличествоЗадачНаРазвитие,
		|	втВизиты.Визит.КоличествоЗадачНаПадение КАК КоличествоЗадачНаПадение,
		|	втВизиты.Визит.КоличествоЗадач КАК КоличествоЗадач,
		|	ЕСТЬNULL(АналитикаТочекДоставки.КоличествоЗадачНаРазвитиеБэклог, 0) КАК КоличествоЗадачНаРазвитиеБэклог,
		|	ЕСТЬNULL(АналитикаТочекДоставки.КоличествоЗадачНаПадениеБэклог, 0) КАК КоличествоЗадачНаПадениеБэклог,
		|	втВизиты.Визит.Статус КАК ТекущееЗначениеСтатус,
		|	втВизиты.Визит.ДокументЗаполнен КАК ТекущееЗначениеДокументЗаполнен,
		|	втВизиты.Визит.ОписаниеФормаВизита КАК ТекущееЗначениеОписаниеФормаВизита,
		|	втВизиты.Визит.ОписаниеФормаПланировщик КАК ТекущееЗначениеОписаниеФормаПланировщик,
		|	втВизиты.Визит.Внеплановый КАК Внеплановый
		|ИЗ
		|	втВизиты КАК втВизиты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаТочекДоставки КАК АналитикаТочекДоставки
		|		ПО втВизиты.Визит.ТочкаДоставки = АналитикаТочекДоставки.ТочкаДоставки";
	
	Запрос.УстановитьПараметр("ТаблицаВизиты", ТаблицаВизиты);
	
	Успешно     = Истина;
	ТекстОшибки = "";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаИзменения = Новый ТаблицаЗначений;
	ТаблицаИзменения.Колонки.Добавить("Визит"                   , Новый ОписаниеТипов("ДокументСсылка.Визит")); 
	ТаблицаИзменения.Колонки.Добавить("Статус"                  , Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыВизитов"));
	ТаблицаИзменения.Колонки.Добавить("ДокументЗаполнен"        , Новый ОписаниеТипов("Булево"));
	ТаблицаИзменения.Колонки.Добавить("ОписаниеФормаВизита"     , Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(150)));
	ТаблицаИзменения.Колонки.Добавить("ОписаниеФормаПланировщик", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(150)));
	
	Пока Выборка.Следующий() Цикл
		
		ТекущаяХарактеристика = ПолучитьХарактеристикуЗадачВизита(Выборка.КоличествоЗадачНаРазвитие, Выборка.КоличествоЗадачНаПадение, Выборка.КоличествоЗадач, Выборка.КоличествоЗадачНаРазвитиеБэклог, Выборка.КоличествоЗадачНаПадениеБэклог, Выборка.Внеплановый); 
		
		Если Выборка.ТекущееЗначениеДокументЗаполнен <> ТекущаяХарактеристика.ДокументЗаполнен 
			ИЛИ Выборка.ТекущееЗначениеОписаниеФормаВизита <> ТекущаяХарактеристика.ОписаниеФормаВизита 
				ИЛИ Выборка.ТекущееЗначениеОписаниеФормаПланировщик <> ТекущаяХарактеристика.ОписаниеФормаПланировщик Тогда
						
			РезультатОперации = ИзменитьВизит(Выборка.Визит, 
				Новый Структура("Статус, ДокументЗаполнен, ОписаниеФормаВизита, ОписаниеФормаПланировщик", 
					Перечисления.СтатусыВизитов.Подготовка, ТекущаяХарактеристика.ДокументЗаполнен, ТекущаяХарактеристика.ОписаниеФормаВизита, ТекущаяХарактеристика.ОписаниеФормаПланировщик));
					
					
			Если НЕ РезультатОперации.Успешно Тогда
			
				Успешно     = Ложь;
				ТекстОшибки = ТекстОшибки + " " + РезультатОперации.ТекстОшибки;
			
			КонецЕсли;	
			
		КонецЕсли;  
		
	КонецЦикла; 

	Возврат Новый Структура("Успешно, ТекстОшибки", Успешно, ТекстОшибки);

КонецФункции // ()

Функция   СоздатьВизит(ДатаВизита, ТочкаДоставки, Менеджер, Внеплановый = Ложь, ВнеплановыйМобильноеПриложение = Ложь, МасляныйПроект = Ложь) Экспорт

	РезультатОперации = Новый Структура("Успешно, ТекстОшибки, Ссылка", Истина, "", Документы.Визит.ПустаяСсылка());
	
	Попытка
		
		НовыйВизит                                = Документы.Визит.СоздатьДокумент();
		НовыйВизит.Дата 		 				  = ДатаВизита;
		НовыйВизит.ТочкаДоставки 				  = ТочкаДоставки;
		НовыйВизит.Клиент 						  = ТочкаДоставки.Владелец;
		НовыйВизит.Менеджер  					  = Менеджер;
		НовыйВизит.Внеплановый  				  = Внеплановый;
		НовыйВизит.ВнеплановыйМобильноеПриложение = ВнеплановыйМобильноеПриложение;
		НовыйВизит.МасляныйПроект				  = МасляныйПроект;
		
		НовыйВизит.ДополнительныеСвойства.Вставить("ЗаписьРазрешена", Истина);
		
		НовыйВизит.Записать();
		
		РезультатОперации.Ссылка = НовыйВизит.Ссылка;
		
	Исключение
		
		РезультатОперации.Успешно     = Ложь;
		РезультатОперации.ТекстОшибки = ОписаниеОшибки();
		
	КонецПопытки;
	
	Возврат РезультатОперации;

КонецФункции // ()

Функция   ИзменитьВизит(Визит, ДанныеВизита) Экспорт

	РезультатОперации = Новый Структура("Успешно, ТекстОшибки", Истина, "");
	
	Попытка
	
		НачатьТранзакцию();
		
		БлокировкаПараметрыВизита  = Новый БлокировкаДанных;
		ЭлементБлокировки          = БлокировкаПараметрыВизита.Добавить("Документ.Визит");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Визит); 
		ЭлементБлокировки.Режим    = РежимБлокировкиДанных.Исключительный;
		БлокировкаПараметрыВизита.Заблокировать(); 
		
		ДокОбъект        = Визит.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ДокОбъект, ДанныеВизита);
		
		ДокОбъект.ДополнительныеСвойства.Вставить("ЗаписьРазрешена", Истина);

		ДокОбъект.Записать();	
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		РезультатОперации.Успешно     = Ложь;
		РезультатОперации.ТекстОшибки = ОписаниеОшибки();

		ОтменитьТранзакцию();

	КонецПопытки;
	
	Возврат РезультатОперации;

КонецФункции // ()

Процедура ЗадачиВизитаИзменитьЗапись(Визит, Задача, Статус = Неопределено, Комментарий = "", Бренд = Неопределено, Удалить = Ложь, ДополнительныеСвойства = Неопределено) 
	
	Если Статус = Неопределено Тогда
	
		Статус = Перечисления.СтатусыЗадачЗначения.ПустаяСсылка();	
	
	КонецЕсли;
	
	Если Бренд = Неопределено Тогда
	
		Бренд = Справочники.Бренды.ПустаяСсылка();	
	
	КонецЕсли;
	
	ЗакрытаРегламентом = Ложь;
	
	Если ДополнительныеСвойства <> Неопределено Тогда
		
		Если ДополнительныеСвойства.Свойство("ЗакрытаРегламентом") Тогда
			
			ЗакрытаРегламентом = Истина;
			
		КонецЕсли;
		
	КонецЕсли;

	ДокументОбъект = Визит.ПолучитьОбъект();
	ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаписьРазрешена", Истина);
	
	СтрокаЗадача   = ДокументОбъект.Задачи.Найти(Задача, "Задача");
	
	Если СтрокаЗадача = Неопределено И Удалить Тогда
	
		ВызватьИсключение "Задача не найдена в визите";	
	
	КонецЕсли;
	
	Если Удалить Тогда
		
		ДокументОбъект.Задачи.Удалить(СтрокаЗадача);
		
	Иначе	
		
		Если СтрокаЗадача = Неопределено Тогда
			
			Если Статус = Перечисления.СтатусыЗадачЗначения.Назначена Тогда
				
				СтрокаЗадача        = ДокументОбъект.Задачи.Добавить();
				СтрокаЗадача.Задача = Задача;
				
			Иначе
				
				ВызватьИсключение "Задачи нет в визите";
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаЗадача.Статус             = Статус;
		СтрокаЗадача.Бренд              = Бренд;
		СтрокаЗадача.Комментарий        = Комментарий;
	    СтрокаЗадача.ЗакрытаРегламентом = ЗакрытаРегламентом;

	КонецЕсли;
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаписьРазрешена", Истина);
	
	Если ДополнительныеСвойства <> Неопределено Тогда
		Если ДополнительныеСвойства.Свойство("НеРегистрировать") Тогда
			ДокументОбъект.ДополнительныеСвойства.Вставить("НеРегистрировать", Истина);
		КонецЕсли;
	КонецЕсли;
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);	
	
КонецПроцедуры // ()

Функция   ПолучитьХарактеристикуЗадачВизита(КоличествоЗадачНаРазвитие, КоличествоЗадачНаПадение, КоличествоЗадач, КоличествоЗадачНаРазвитиеБэклог, КоличествоЗадачНаПадениеБэклог, Внеплановый = Ложь) Экспорт 
	
	Если Внеплановый Тогда
		
		ОписаниеФормаВизита      = "Внеплановый: нужно выбрать хотя бы одну задачу";
		ОписаниеФормаПланировщик = "Внеплановый" + Символы.ПС + СтрШаблон("Задачи: %1", КоличествоЗадач); 
		
		Если КоличествоЗадач > 0 Тогда
			ДокументЗаполнен = Истина;	
		Иначе	
			ДокументЗаполнен = Ложь;
		КонецЕсли	
		
	Иначе	
		// Параметры расчета
		
		НормаЗадачНаПадение  = УправлениеПродажамиСерверПовтИсп.ПолучитьЗначениеНастройкиИнформационнойБазы("НормаЗадачНаПадение");
		НормаЗадачНаРазвитие = УправлениеПродажамиСерверПовтИсп.ПолучитьЗначениеНастройкиИнформационнойБазы("НормаЗадачНаРазвитие");
		НормаЗадач           = УправлениеПродажамиСерверПовтИсп.ПолучитьЗначениеНастройкиИнформационнойБазы("НормаЗадач");
		
		ДокументЗаполнен                   = Истина;
		ПроверкаПоЗадачамНаРазвитиеПадение = Ложь;
		
		// На падение
		
		НаПадениеВизит       = "";
		НаПадениеПланировщик = "";
		
		Если НормаЗадачНаПадение > 0 И КоличествоЗадачНаПадение + КоличествоЗадачНаПадениеБэклог >= НормаЗадачНаПадение Тогда
			
			ПроверкаПоЗадачамНаРазвитиеПадение = Истина;
			
			Если КоличествоЗадачНаПадение < НормаЗадачНаПадение Тогда
				
				ДокументЗаполнен     = Ложь;
				
				НаПадениеВизит       = "  Не выбрана задача: На падение";
				НаПадениеПланировщик = СтрШаблон("На падение: %1", КоличествоЗадачНаПадение - НормаЗадачНаПадение);
				
			Иначе	
				
				НаПадениеПланировщик = СтрШаблон("На падение: %1", КоличествоЗадачНаПадение);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// На развитие
		
		НаРазвитиеВизит       = "";
		НаРазвитиеПланировщик = "";
		
		Если НормаЗадачНаРазвитие > 0 И КоличествоЗадачНаРазвитие + КоличествоЗадачНаРазвитиеБэклог >= НормаЗадачНаРазвитие Тогда
			
			ПроверкаПоЗадачамНаРазвитиеПадение = Истина;
			
			Если КоличествоЗадачНаРазвитие < НормаЗадачНаРазвитие Тогда
				
				ДокументЗаполнен     = Ложь;
				
				НаРазвитиеВизит       = "  Не выбрана задача: На развитие";
				НаРазвитиеПланировщик = СтрШаблон("На развитие: %1", КоличествоЗадачНаРазвитие - НормаЗадачНаРазвитие);
				
			Иначе	
				
				НаРазвитиеПланировщик = СтрШаблон("На развитие: %1", КоличествоЗадачНаРазвитие);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Прочие задачи
		
		ПрочиеЗадачиВизит       = "";
		ПрочиеЗадачиПланировщик = "";
		
		Если НЕ ПроверкаПоЗадачамНаРазвитиеПадение Тогда
			
			ВсегоЗадачУчтено = КоличествоЗадач + ?(НормаЗадачНаРазвитие = 0, КоличествоЗадачНаРазвитие, 0) + ?(НормаЗадачНаПадение = 0, КоличествоЗадачНаПадение, 0);
			
			Если ВсегоЗадачУчтено < НормаЗадач Тогда
				
				ДокументЗаполнен        = Ложь;
				
				ПрочиеЗадачиВизит		= "  Не выбрана задача";
				ПрочиеЗадачиПланировщик = СтрШаблон("Задачи: %1", ВсегоЗадачУчтено - НормаЗадач);
				
			Иначе
				
				ПрочиеЗадачиПланировщик = СтрШаблон("Задачи: %1", ВсегоЗадачУчтено);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Описания
		
		ОписаниеФормаВизита      = "";
		ОписаниеФормаПланировщик = "";
		
		Если ПроверкаПоЗадачамНаРазвитиеПадение Тогда
			
			ОписаниеФормаВизита      = СтрШаблон("%1%2%3", НаРазвитиеВизит, ?(НЕ ПустаяСтрока(НаРазвитиеВизит) И НЕ ПустаяСтрока(НаПадениеВизит), Символы.ПС, ""), НаПадениеВизит);
			ОписаниеФормаПланировщик = СтрШаблон("%1%2%3", НаРазвитиеПланировщик, ?(НЕ ПустаяСтрока(НаРазвитиеПланировщик) И НЕ ПустаяСтрока(НаПадениеПланировщик), Символы.ПС, ""), НаПадениеПланировщик);
			
		Иначе
			
			ОписаниеФормаВизита      = ПрочиеЗадачиВизит;
			ОписаниеФормаПланировщик = ПрочиеЗадачиПланировщик; 
			
		КонецЕсли;
		
	КонецЕсли;
	// Результат 	
	
	СтруктураХарактеристика = Новый Структура;
	СтруктураХарактеристика.Вставить("ДокументЗаполнен"        , ДокументЗаполнен);
	СтруктураХарактеристика.Вставить("ОписаниеФормаВизита"     , ОписаниеФормаВизита);
	СтруктураХарактеристика.Вставить("ОписаниеФормаПланировщик", ОписаниеФормаПланировщик);
	
	Возврат СтруктураХарактеристика;
	
КонецФункции // ()

Функция   ПеренестиВизитНаДату(ВизитСсылка, НоваяДата) Экспорт
	
	РезультатОперации = Новый Структура("Успешно, ТекстОшибки", Истина, "");
	
	ПереносВизитаМаксДней = УправлениеПродажамиСерверПовтИсп.ПолучитьЗначениеНастройкиИнформационнойБазы("ПереносВизитаМаксДней");
	
	Если НЕ ЗначениеЗаполнено(ПереносВизитаМаксДней) Тогда
		ПереносВизитаМаксДней = 14;		
	КонецЕсли;	
	
	БазаТестирование = УправлениеПродажамиСерверПовтИсп.ПолучитьЗначениеНастройкиИнформационнойБазы("Тестирование");
	
	Если БазаТестирование Тогда
		ПереносВизитаМаксДней = 4000;
	КонецЕсли;
	
	Если НоваяДата < НачалоДня(ТекущаяДата()) ИЛИ НоваяДата > НачалоДня(ТекущаяДата()) + ПереносВизитаМаксДней*24*3600  Тогда	
		
		РезультатОперации.Успешно     = Ложь;
		РезультатОперации.ТекстОшибки = "Запрещено переносить на указанную дату!";		
		Возврат РезультатОперации;
		
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВизитЗадачи.Задача КАК Задача,
	               |	ВизитЗадачи.Статус КАК Статус
	               |ИЗ
	               |	Документ.Визит.Задачи КАК ВизитЗадачи
	               |ГДЕ
	               |	ВизитЗадачи.Ссылка = &ВизитСсылка
	               |	И ВизитЗадачи.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Назначена)";
	
	Запрос.УстановитьПараметр("ВизитСсылка", ВизитСсылка);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		РезультатОперации.Успешно     = Ложь;
		РезультатОперации.ТекстОшибки = "В Визите есть задачи не в статусе Назначена!";		
		Возврат РезультатОперации;
		
	КонецЕсли;	
	
	ДанныеВизита = Новый Структура;
	
	ДанныеВизита.Вставить("Дата", НоваяДата);
	ДанныеВизита.Вставить("Статус", Перечисления.СтатусыВизитов.Подготовка);	
	
	РезультатОперации = ИзменитьВизит(ВизитСсылка, ДанныеВизита);	
	
	Возврат РезультатОперации;
	
КонецФункции

Функция	  УдалитьВизит(ВизитСсылка) Экспорт
	
	РезультатОперации = Новый Структура("Успешно, ТекстОшибки, ЕстьЗадачи", Истина, "", Ложь);
	
	Если НЕ ВизитСсылка.Задачи.Количество() = 0 Тогда
		
		РезультатОперации.Успешно     = Ложь;
		РезультатОперации.ТекстОшибки = "В Визите есть назначенные задачи!";
		РезультатОперации.ЕстьЗадачи = Истина;
				
		Возврат РезультатОперации;
		
	КонецЕсли;	
	
	ДанныеВизита = Новый Структура;
	
	ДанныеВизита.Вставить("ПометкаУдаления", Истина);	
	
	РезультатОперации = ИзменитьВизит(ВизитСсылка, ДанныеВизита);
	
	Возврат РезультатОперации;
	
КонецФункции

Функция УдалитьВизитыПриСменеМенеджера(КлиентСсылка) Экспорт
	
	РезультатОперации = Новый Структура("Успешно, ТекстОшибки", Истина, "");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Визит.Ссылка
	|ИЗ
	|	Документ.Визит КАК Визит
	|ГДЕ
	|	НЕ Визит.ПометкаУдаления
	|	И Визит.Клиент = &Клиент";
	
	Запрос.УстановитьПараметр("Клиент", КлиентСсылка); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		РезультатУдаления = УдалитьВизит(Выборка.Ссылка);
		
		Если НЕ РезультатУдаления.Успешно И НЕ РезультатУдаления.ЕстьЗадачи Тогда
			
			РезультатОперации.Успешно = Ложь;
			РезультатОперации.ТекстОшибки = "Не удалось удалить визит " + Строка(Выборка.Ссылка) + "." + РезультатУдаления.ТекстОшибки;
			
			Возврат РезультатОперации;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатОперации;
	
КонецФункции

Функция   СнятьПометкуУдаленияВизит(ВизитСсылка) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Успешно"    , Ложь);
	Результат.Вставить("ТекстОшибки", "");
	
	Если ТипЗнч(ВизитСсылка) <> Тип("ДокументСсылка.Визит") Тогда
		
		Результат.ТекстОшибки = "Неизвестный параметр";
		
		Возврат Результат;
		
	ИначеЕсли ВизитСсылка.ПометкаУдаления = Ложь Тогда
			
		Результат.ТекстОшибки = "Документ не помечен на удаление";
		
		Возврат Результат;	
		
	ИначеЕсли ВизитСсылка.Задачи.Количество() <> 0 Тогда
			
		Результат.ТекстОшибки = "В документе определены задачи";
		
		Возврат Результат;		
			
	КонецЕсли;
	
	ДанныеВизита = Новый Структура;
	
	ДанныеВизита.Вставить("ПометкаУдаления", Ложь);	
	
	Результат = ИзменитьВизит(ВизитСсылка, ДанныеВизита);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ТочкиДоставки

Функция   РассчитатьАналитикуТочекДоставки(ТаблицаТочкиДоставки) Экспорт
	
	Запрос		 = Новый Запрос;
	Запрос.Текст =  
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТочкиДоставки.ТочкаДоставки КАК ТочкаДоставки,
		|	ТочкиДоставки.КлиентНаименование КАК КлиентНаименование
		|ПОМЕСТИТЬ втТочкиДоставки
		|ИЗ
		|	&ТаблицаТочкиДоставки КАК ТочкиДоставки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТочкиДоставки.ТочкаДоставки КАК ТочкаДоставки,
		|	Задачи.Ссылка КАК Задача,
		|	Задачи.ВидЗадачи КАК ВидЗадачи,
		|	Задачи.МаркетинговаяГруппа КАК МаркетинговаяГруппа,
		|	Задачи.Бренд КАК Бренд,
		|	ЕСТЬNULL(СтатусыЗадачСрезПоследних.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Бэклог)) КАК Статус
		|ПОМЕСТИТЬ втТекущиеЗадачи
		|ИЗ
		|	втТочкиДоставки КАК втТочкиДоставки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Задачи КАК Задачи
		|		ПО втТочкиДоставки.ТочкаДоставки = Задачи.ТочкаДоставки
		|			И (Задачи.ЗадачаЗакрыта = ЛОЖЬ)
		|			И (Задачи.ПометкаУдаления = ЛОЖЬ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗадач.СрезПоследних КАК СтатусыЗадачСрезПоследних
		|		ПО (Задачи.Ссылка = СтатусыЗадачСрезПоследних.Задача)
		|ГДЕ
		|	Задачи.ВидЗадачи В (ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаПадениеБренд), ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаПадениеМаркетинговаяГруппа), ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаРазвитие))
		|
		|СГРУППИРОВАТЬ ПО
		|	втТочкиДоставки.ТочкаДоставки,
		|	Задачи.Ссылка,
		|	Задачи.ВидЗадачи,
		|	Задачи.МаркетинговаяГруппа,
		|	Задачи.Бренд,
		|	ЕСТЬNULL(СтатусыЗадачСрезПоследних.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Бэклог))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТочкиДоставки.ТочкаДоставки КАК ТочкаДоставки,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаРазвитие) КАК ВидЗадачи,
		|	ДефицитПотенциала.МаркетинговаяГруппа КАК МаркетинговаяГруппа
		|ПОМЕСТИТЬ втОлапНаРазвитие
		|ИЗ
		|	втТочкиДоставки КАК втТочкиДоставки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДефицитПотенциала КАК ДефицитПотенциала
		|		ПО втТочкиДоставки.ТочкаДоставки = ДефицитПотенциала.ТочкаДоставки
		|			И (ДефицитПотенциала.Дефицит < 0)
		|
		|СГРУППИРОВАТЬ ПО
		|	втТочкиДоставки.ТочкаДоставки,
		|	ДефицитПотенциала.МаркетинговаяГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТочкиДоставки.ТочкаДоставки КАК ТочкаДоставки,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаПадениеМаркетинговаяГруппа) КАК ВидЗадачи,
		|	ИсторическийДефицитМаркетинговыеГруппы.МаркетинговаяГруппа КАК МаркетинговаяГруппа
		|ПОМЕСТИТЬ втОлапНаПадениеМаркетинговаяГруппа
		|ИЗ
		|	втТочкиДоставки КАК втТочкиДоставки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторическийДефицитМаркетинговыеГруппы КАК ИсторическийДефицитМаркетинговыеГруппы
		|		ПО втТочкиДоставки.ТочкаДоставки = ИсторическийДефицитМаркетинговыеГруппы.ТочкаДоставки
		|			И (ИсторическийДефицитМаркетинговыеГруппы.Дефицит < 0)
		|
		|СГРУППИРОВАТЬ ПО
		|	втТочкиДоставки.ТочкаДоставки,
		|	ИсторическийДефицитМаркетинговыеГруппы.МаркетинговаяГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТочкиДоставки.ТочкаДоставки КАК ТочкаДоставки,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаПадениеБренд) КАК ВидЗадачи,
		|	ИсторическийДефицитБренды.Бренд КАК Бренд
		|ПОМЕСТИТЬ втОлапНаПадениеБренд
		|ИЗ
		|	втТочкиДоставки КАК втТочкиДоставки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторическийДефицитБренды КАК ИсторическийДефицитБренды
		|		ПО втТочкиДоставки.ТочкаДоставки = ИсторическийДефицитБренды.ТочкаДоставки
		|			И (ИсторическийДефицитБренды.Дефицит < 0)
		|
		|СГРУППИРОВАТЬ ПО
		|	втТочкиДоставки.ТочкаДоставки,
		|	ИсторическийДефицитБренды.Бренд
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.ТочкаДоставки КАК ТочкаДоставки,
		|	СУММА(ВложенныйЗапрос.КоличествоЗадачНаРазвитиеБэклог) КАК КоличествоЗадачНаРазвитиеБэклог,
		|	СУММА(ВложенныйЗапрос.КоличествоЗадачНаПадениеБэклог) КАК КоличествоЗадачНаПадениеБэклог
		|ПОМЕСТИТЬ втКоличествоЗадачБэклог
		|ИЗ
		|	(ВЫБРАТЬ
		|		втОлапНаРазвитие.ТочкаДоставки КАК ТочкаДоставки,
		|		1 КАК КоличествоЗадачНаРазвитиеБэклог,
		|		0 КАК КоличествоЗадачНаПадениеБэклог
		|	ИЗ
		|		втОлапНаРазвитие КАК втОлапНаРазвитие
		|			ЛЕВОЕ СОЕДИНЕНИЕ втТекущиеЗадачи КАК втТекущиеЗадачи
		|			ПО втОлапНаРазвитие.ТочкаДоставки = втТекущиеЗадачи.ТочкаДоставки
		|				И втОлапНаРазвитие.МаркетинговаяГруппа = втТекущиеЗадачи.МаркетинговаяГруппа
		|				И (втТекущиеЗадачи.ВидЗадачи = ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаРазвитие))
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаблокированныеЗадачи КАК ЗаблокированныеЗадачи
		|			ПО втОлапНаРазвитие.ТочкаДоставки = ЗаблокированныеЗадачи.ТочкаДоставки
		|				И втОлапНаРазвитие.ВидЗадачи = ЗаблокированныеЗадачи.ВидЗадачи
		|				И втОлапНаРазвитие.МаркетинговаяГруппа = ЗаблокированныеЗадачи.Аналитика
		|	ГДЕ
		|		ЕСТЬNULL(втТекущиеЗадачи.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Бэклог)) = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Бэклог)
		|		И ЗаблокированныеЗадачи.ТочкаДоставки ЕСТЬ NULL
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		втОлапНаПадениеМаркетинговаяГруппа.ТочкаДоставки,
		|		0,
		|		1
		|	ИЗ
		|		втОлапНаПадениеМаркетинговаяГруппа КАК втОлапНаПадениеМаркетинговаяГруппа
		|			ЛЕВОЕ СОЕДИНЕНИЕ втТекущиеЗадачи КАК втТекущиеЗадачи
		|			ПО втОлапНаПадениеМаркетинговаяГруппа.ТочкаДоставки = втТекущиеЗадачи.ТочкаДоставки
		|				И втОлапНаПадениеМаркетинговаяГруппа.МаркетинговаяГруппа = втТекущиеЗадачи.МаркетинговаяГруппа
		|				И (втТекущиеЗадачи.ВидЗадачи = ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаПадениеМаркетинговаяГруппа))
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаблокированныеЗадачи КАК ЗаблокированныеЗадачи
		|			ПО втОлапНаПадениеМаркетинговаяГруппа.ТочкаДоставки = ЗаблокированныеЗадачи.ТочкаДоставки
		|				И втОлапНаПадениеМаркетинговаяГруппа.ВидЗадачи = ЗаблокированныеЗадачи.ВидЗадачи
		|				И втОлапНаПадениеМаркетинговаяГруппа.МаркетинговаяГруппа = ЗаблокированныеЗадачи.Аналитика
		|	ГДЕ
		|		ЕСТЬNULL(втТекущиеЗадачи.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Бэклог)) = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Бэклог)
		|		И ЗаблокированныеЗадачи.ТочкаДоставки ЕСТЬ NULL
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		втОлапНаПадениеБренд.ТочкаДоставки,
		|		0,
		|		1
		|	ИЗ
		|		втОлапНаПадениеБренд КАК втОлапНаПадениеБренд
		|			ЛЕВОЕ СОЕДИНЕНИЕ втТекущиеЗадачи КАК втТекущиеЗадачи
		|			ПО втОлапНаПадениеБренд.ТочкаДоставки = втТекущиеЗадачи.ТочкаДоставки
		|				И втОлапНаПадениеБренд.Бренд = втТекущиеЗадачи.Бренд
		|				И (втТекущиеЗадачи.ВидЗадачи = ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаПадениеБренд))
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаблокированныеЗадачи КАК ЗаблокированныеЗадачи
		|			ПО втОлапНаПадениеБренд.ТочкаДоставки = ЗаблокированныеЗадачи.ТочкаДоставки
		|				И втОлапНаПадениеБренд.ВидЗадачи = ЗаблокированныеЗадачи.ВидЗадачи
		|				И втОлапНаПадениеБренд.Бренд = ЗаблокированныеЗадачи.Аналитика
		|	ГДЕ
		|		ЕСТЬNULL(втТекущиеЗадачи.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Бэклог)) = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Бэклог)
		|		И ЗаблокированныеЗадачи.ТочкаДоставки ЕСТЬ NULL) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ТочкаДоставки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТочкиДоставки.ТочкаДоставки КАК ТочкаДоставки,
		|	ЕСТЬNULL(втТочкиДоставки.КлиентНаименование, """") КАК КлиентНаименование,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(втКоличествоЗадачБэклог.КоличествоЗадачНаРазвитиеБэклог, 0) > &НормаЗадачНаРазвитие
		|			ТОГДА &НормаЗадачНаРазвитие
		|		ИНАЧЕ ЕСТЬNULL(втКоличествоЗадачБэклог.КоличествоЗадачНаРазвитиеБэклог, 0)
		|	КОНЕЦ КАК КоличествоЗадачНаРазвитиеБэклог,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(втКоличествоЗадачБэклог.КоличествоЗадачНаПадениеБэклог, 0) > &НормаЗадачНаПадение
		|			ТОГДА &НормаЗадачНаПадение
		|		ИНАЧЕ ЕСТЬNULL(втКоличествоЗадачБэклог.КоличествоЗадачНаПадениеБэклог, 0)
		|	КОНЕЦ КАК КоличествоЗадачНаПадениеБэклог,
		|	ЕСТЬNULL(АналитикаТочекДоставки.КоличествоЗадачНаРазвитиеБэклог, 0) КАК АналитикаКоличествоЗадачНаРазвитиеБэклог,
		|	ЕСТЬNULL(АналитикаТочекДоставки.КоличествоЗадачНаПадениеБэклог, 0) КАК АналитикаКоличествоЗадачНаПадениеБэклог
		|ПОМЕСТИТЬ вт_НормаЗадачНаВизит
		|ИЗ
		|	втТочкиДоставки КАК втТочкиДоставки
		|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличествоЗадачБэклог КАК втКоличествоЗадачБэклог
		|		ПО втТочкиДоставки.ТочкаДоставки = втКоличествоЗадачБэклог.ТочкаДоставки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаТочекДоставки КАК АналитикаТочекДоставки
		|		ПО втТочкиДоставки.ТочкаДоставки = АналитикаТочекДоставки.ТочкаДоставки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_НормаЗадачНаВизит.ТочкаДоставки КАК ТочкаДоставки,
		|	ВЫБОР
		|		КОГДА вт_НормаЗадачНаВизит.КлиентНаименование = ""ПК""
		|			ТОГДА 0
		|		ИНАЧЕ вт_НормаЗадачНаВизит.КоличествоЗадачНаРазвитиеБэклог
		|	КОНЕЦ КАК КоличествоЗадачНаРазвитиеБэклог,
		|	ВЫБОР
		|		КОГДА вт_НормаЗадачНаВизит.КлиентНаименование = ""ПК""
		|			ТОГДА 0
		|		ИНАЧЕ вт_НормаЗадачНаВизит.КоличествоЗадачНаПадениеБэклог
		|	КОНЕЦ КАК КоличествоЗадачНаПадениеБэклог,
		|	ВЫБОР
		|			КОГДА вт_НормаЗадачНаВизит.КлиентНаименование = ""ПК""
		|				ТОГДА 0
		|			ИНАЧЕ вт_НормаЗадачНаВизит.КоличествоЗадачНаРазвитиеБэклог
		|		КОНЕЦ <> вт_НормаЗадачНаВизит.АналитикаКоличествоЗадачНаРазвитиеБэклог
		|		ИЛИ ВЫБОР
		|			КОГДА вт_НормаЗадачНаВизит.КлиентНаименование = ""ПК""
		|				ТОГДА 0
		|			ИНАЧЕ вт_НормаЗадачНаВизит.КоличествоЗадачНаПадениеБэклог
		|		КОНЕЦ <> вт_НормаЗадачНаВизит.АналитикаКоличествоЗадачНаПадениеБэклог КАК ДанныеИзменены
		|ИЗ
		|	вт_НормаЗадачНаВизит КАК вт_НормаЗадачНаВизит";
	
	Запрос.УстановитьПараметр("ТаблицаТочкиДоставки", ТаблицаТочкиДоставки);
	Запрос.УстановитьПараметр("НормаЗадачНаПадение" , УправлениеПродажамиСерверПовтИсп.ПолучитьЗначениеНастройкиИнформационнойБазы("НормаЗадачНаПадение"));
	Запрос.УстановитьПараметр("НормаЗадачНаРазвитие", УправлениеПродажамиСерверПовтИсп.ПолучитьЗначениеНастройкиИнформационнойБазы("НормаЗадачНаРазвитие"));

	ТекстОшибки = "";
	Успешно     = Истина;
	
	Результат   = Запрос.Выполнить().Выгрузить();
	
	ТаблицаИтог = Новый ТаблицаЗначений;
	ТаблицаИтог.Колонки.Добавить("ТочкаДоставки"                  , Новый ОписаниеТипов("СправочникСсылка.ТочкиДоставки"));
	ТаблицаИтог.Колонки.Добавить("КоличествоЗадачНаРазвитиеБэклог", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(10, 0)));
	ТаблицаИтог.Колонки.Добавить("КоличествоЗадачНаПадениеБэклог" , Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(10, 0)));
	
	Если Результат.Количество() <> 0 Тогда
			
		Попытка
			
			НачатьТранзакцию();
			
			Блокировка                       = Новый БлокировкаДанных;
			ЭлементБлокировки                = Блокировка.Добавить("РегистрСведений.АналитикаТочекДоставки");
			
			ЭлементБлокировки.Режим          = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = Результат;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТочкаДоставки", "ТочкаДоставки");
			Блокировка.Заблокировать();
			
			Для каждого ТекущаяЗапись Из Результат Цикл
					
				нСтр = ТаблицаИтог.Добавить();
				ЗаполнитьЗначенияСвойств(нСтр, ТекущаяЗапись);

				Если ТекущаяЗапись.ДанныеИзменены Тогда
					
					ИзменитьЗаписьАналитикаТочекДоставки(ТекущаяЗапись.ТочкаДоставки, Новый Структура("КоличествоЗадачНаРазвитиеБэклог, КоличествоЗадачНаПадениеБэклог", ТекущаяЗапись.КоличествоЗадачНаРазвитиеБэклог, ТекущаяЗапись.КоличествоЗадачНаПадениеБэклог));	
										
				КонецЕсли;				
						
			КонецЦикла;		
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			Успешно     = Ложь;
			ТекстОшибки = ОписаниеОшибки();
			
			ОтменитьТранзакцию();
			
		КонецПопытки;  
		
	КонецЕсли;
	
	Возврат Новый Структура("Успешно, ТекстОшибки, ТаблицаИтог", Успешно, ТекстОшибки, ТаблицаИтог);
	
КонецФункции // ()

Функция   ИзменитьОчередьФормированияВизитов(ТочкаДоставки, ПериодНачало, ПериодКонец, Идентификатор = Неопределено, КлючПотока = "", Удалить = Ложь) Экспорт

	Результат = Новый Структура("Успешно, ТекстОшибки", Истина, "");
	
	Попытка
		
		ТекИдентификатор = ?(Идентификатор = Неопределено, Строка(Новый УникальныйИдентификатор), Идентификатор);
		
		Набор = РегистрыСведений.ОчередьФормированияВизитов.СоздатьНаборЗаписей();
		Набор.Отбор.ТочкаДоставки.Установить(ТочкаДоставки);
		Набор.Отбор.ПериодНачало.Установить(ПериодНачало);
		Набор.Отбор.ПериодКонец.Установить(ПериодКонец);
		Набор.Отбор.Идентификатор.Установить(ТекИдентификатор);
		
		Если НЕ Удалить Тогда
			
			Запись 				 = Набор.Добавить();
			Запись.ТочкаДоставки = ТочкаДоставки;
			Запись.ПериодНачало  = ПериодНачало;
			Запись.ПериодКонец   = ПериодКонец; 
			Запись.Идентификатор = ТекИдентификатор;
			Запись.КлючПотока    = КлючПотока;
			
		КонецЕсли;
		
		Набор.Записать();   
				 		
	Исключение
		
		Результат.ТекстОшибки = ОписаниеОшибки();
		Результат.Успешно     = Ложь;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции // ()

#КонецОбласти

#Область Прочее

Функция   ПроверитьЗафиксироватьЗадачуРосскоПартнерOnboarding(Задача)

	Результат = Новый Структура("Успешно, ТекстОшибки", Истина, "");
	
	Попытка
		
		РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, "ТочкаДоставки, Аналитика");
		Аналитика 		= РеквизитыЗадачи.Аналитика;
		СтрокаАналитика = XMLСтрока(Аналитика);
		
		Если ЗначениеЗаполнено(Аналитика) И СтрНайти(СтрокаАналитика, "РосскоПартнер") <> 0 Тогда
			
			ТекРесурс = СтрЗаменить(СтрокаАналитика, "РосскоПартнер", "Выполнено");
			
			МенеджерЗаписи 			     = РегистрыСведений.РосскоПартнерОнбординг.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ТочкаДоставки = РеквизитыЗадачи.ТочкаДоставки;
			МенеджерЗаписи.Прочитать();
			
			Если МенеджерЗаписи.Выбран() И НЕ МенеджерЗаписи[ТекРесурс] Тогда
				
				МенеджерЗаписи[ТекРесурс] = Истина;
				МенеджерЗаписи.Записать();
				
			КонецЕсли;
			
		КонецЕсли;	
		
	Исключение
		
		Результат.Успешно     = Ложь;
		Результат.ТекстОшибки = ОписаниеОшибки();
		
	КонецПопытки;   	
	
	Возврат Результат;

КонецФункции // ()

Функция   УстановитьОтказРосскоПартнерОнбординг(ТочкаДоставки)
	
	Результат = Новый Структура("Успешно, ТекстОшибки", Истина, "");
	
	Попытка
	
		МенеджерЗаписи 			     = РегистрыСведений.РосскоПартнерОнбординг.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТочкаДоставки = ТочкаДоставки;
		МенеджерЗаписи.Прочитать();
			
			Если МенеджерЗаписи.Выбран() Тогда
				
				Если ЗначениеЗаполнено(МенеджерЗаписи.ТекущийСтатус) Тогда
				
					ВызватьИсключение "Статус РосскоПартнерОнбординг уже установлен";
					
				КонецЕсли;
				
				МенеджерЗаписи.ТекущийСтатус = Перечисления.РосскоПартнерОнбордингСтатусы.Отключен;				
				МенеджерЗаписи.Записать();
				
			Иначе
					
				ВызватьИсключение "Запись РосскоПартнерОнбординг не найдена";	
				
			КонецЕсли;	
		
	Исключение
		
		Результат.Успешно     = Ложь;
		Результат.ТекстОшибки = ОписаниеОшибки();
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗафиксироватьДатуСистемногоСобытия(ВидСобытия) Экспорт
	
	ДатыСистемныхСобытийМенеджерЗаписи = РегистрыСведений.ДатыСистемныхСобытий.СоздатьМенеджерЗаписи();
	ДатыСистемныхСобытийМенеджерЗаписи.Прочитать();
	
	Если ВидСобытия = "ПродажиПоДням" Тогда
		ДатыСистемныхСобытийМенеджерЗаписи.ДатаЗагрузкиПродажиПоДням = ТекущаяДата();
	ИначеЕсли ВидСобытия = "ПродажиПоДнямОбщие" Тогда
		ДатыСистемныхСобытийМенеджерЗаписи.ДатаЗагрузкиПродажиПоДнямОбщие = ТекущаяДата();	
	ИначеЕсли ВидСобытия = "ДатаФормированиеОчередиВизитов" Тогда
		ДатыСистемныхСобытийМенеджерЗаписи.ДатаФормированиеОчередиВизитов = ТекущаяДата();	
	ИначеЕсли ВидСобытия = "ПродажиПоМесяцам" Тогда
		ДатыСистемныхСобытийМенеджерЗаписи.ДатаЗагрузкиПродажиПоМесяцам = ТекущаяДата();
	ИначеЕсли ВидСобытия = "ДефицитПотенциала" Тогда
		ДатыСистемныхСобытийМенеджерЗаписи.ДатаЗагрузкиДефицитПотенциала = ТекущаяДата();
	ИначеЕсли ВидСобытия = "ИсторическийДефицитМаркетинговыеГруппы" Тогда
		ДатыСистемныхСобытийМенеджерЗаписи.ДатаЗагрузкиИсторическийДефицитМаркетинговыеГруппы = ТекущаяДата();
	ИначеЕсли ВидСобытия = "ИсторическийДефицитБренды" Тогда
		ДатыСистемныхСобытийМенеджерЗаписи.ДатаЗагрузкиИсторическийДефицитБренды = ТекущаяДата();
	ИначеЕсли ВидСобытия = "КонтрольИсполненияЗадач" Тогда
		ДатыСистемныхСобытийМенеджерЗаписи.ДатаКИЗ = ТекущаяДата();
	ИначеЕсли ВидСобытия = "ДатаРасчетАналитикиПараметров" Тогда
		ДатыСистемныхСобытийМенеджерЗаписи.ДатаРасчетАналитикиПараметров = ТекущаяДата();	
	ИначеЕсли ВидСобытия = "ДатаЗакрытиеЗадачНаРазвитие" Тогда
		ДатыСистемныхСобытийМенеджерЗаписи.ДатаЗакрытиеЗадачНаРазвитие = ТекущаяДата();	
	ИначеЕсли ВидСобытия = "ДатаЗакрытиеЗадачНаПадениеБренд" Тогда
		ДатыСистемныхСобытийМенеджерЗаписи.ДатаЗакрытиеЗадачНаПадениеБренд = ТекущаяДата();	
	ИначеЕсли ВидСобытия = "ДатаЗакрытиеЗадачНаПадениеМаркетинговаяГруппа" Тогда
		ДатыСистемныхСобытийМенеджерЗаписи.ДатаЗакрытиеЗадачНаПадениеМаркетинговаяГруппа = ТекущаяДата();
	ИначеЕсли ВидСобытия = "ДатаЗакрытиеЗадачНаПродажу" Тогда
		ДатыСистемныхСобытийМенеджерЗаписи.ДатаЗакрытиеЗадачНаПродажу = ТекущаяДата();
	ИначеЕсли ВидСобытия = "ДатаЗакрытиеЗадачПрочие" Тогда
		ДатыСистемныхСобытийМенеджерЗаписи.ДатаЗакрытиеЗадачПрочие = ТекущаяДата();	
	ИначеЕсли ВидСобытия = "ДатаЗагрузкиОстаткиПоФилиалам" Тогда
		ДатыСистемныхСобытийМенеджерЗаписи.ДатаЗагрузкиОстаткиПоФилиалам = ТекущаяДата();	
	ИначеЕсли ВидСобытия = "ДатаПродажиКИЗ" Тогда
		ДатыСистемныхСобытийМенеджерЗаписи.ДатаПродажиКИЗ = ТекущаяДата();
	ИначеЕсли ВидСобытия = "ДатаВыгрузкиВизитов" Тогда
		ДатыСистемныхСобытийМенеджерЗаписи.ДатаВыгрузкиВизитов = ТекущаяДата();	
	ИначеЕсли ВидСобытия = "ДатаРасчетГрейды" Тогда
		ДатыСистемныхСобытийМенеджерЗаписи.ДатаРасчетГрейды = ТекущаяДата();
	ИначеЕсли ВидСобытия = "ОбъемПродажМасла" Тогда
		ДатыСистемныхСобытийМенеджерЗаписи.ДатаЗагрузкиОбъемПродажМасла = ТекущаяДата();
	ИначеЕсли ВидСобытия = "ДатаРасчетИндексМасленщика" Тогда
		ДатыСистемныхСобытийМенеджерЗаписи.ДатаРасчетИндексМасленщика = ТекущаяДата();	
	ИначеЕсли ВидСобытия = "ДатаФормированиеВизитов" Тогда
		ДатыСистемныхСобытийМенеджерЗаписи.ДатаФормированиеВизитов = ТекущаяДата();
	ИначеЕсли ВидСобытия = "ДатаСозданиеЗадачРосскоПартнерОнбординг" Тогда
		ДатыСистемныхСобытийМенеджерЗаписи.ДатаСозданиеЗадачРосскоПартнерОнбординг = ТекущаяДата(); 	
	ИначеЕсли ВидСобытия = "ДатаСменаМенеджераВСуществующихВизитах" Тогда
		ДатыСистемныхСобытийМенеджерЗаписи.ДатаСменаМенеджераВСуществующихВизитах = ТекущаяДата(); 	
	ИначеЕсли ВидСобытия = "ДатаФормированиеЗадачНаЗаполнениеИнформации" Тогда
		ДатыСистемныхСобытийМенеджерЗаписи.ДатаФормированиеЗадачНаЗаполнениеИнформации = ТекущаяДата();	
    ИначеЕсли ВидСобытия = "ДатаАвтоматическоеНазначениеЗадач" Тогда
		ДатыСистемныхСобытийМенеджерЗаписи.ДатаАвтоматическоеНазначениеЗадач = ТекущаяДата();	
	ИначеЕсли ВидСобытия = "ДатаРасчетСкоринга" Тогда
		ДатыСистемныхСобытийМенеджерЗаписи.ДатаРасчетСкоринга = ТекущаяДата();	
    КонецЕсли;	
	
	Попытка
		ДатыСистемныхСобытийМенеджерЗаписи.Записать();	
	Исключение	
		ЗаписьЖурналаРегистрации("Ошибка записи даты загрузки", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
	КонецПопытки;	
	
КонецПроцедуры	

Функция   ПолучитьДатуСистемногоСобытия(НазваниеДатыСобытия) Экспорт	
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДатыСистемныхСобытий."+НазваниеДатыСобытия+" КАК ДатаСобытия
	|ИЗ
	|	РегистрСведений.ДатыСистемныхСобытий КАК ДатыСистемныхСобытий";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.ДатаСобытия; 	
	Иначе
		Возврат Дата(1,1,1);
	КонецЕсли;	
	
КонецФункции	

Функция   ПолучитьПланПродажКИЗ(Задача) Экспорт
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, "ВидЗадачи, СуммаПродажПлан, ТочкаДоставки, МаркетинговаяГруппа, Бренд");
	
	Если РеквизитыЗадачи.ВидЗадачи = Перечисления.ВидыЗадач.НаПродажу Тогда
		
		Возврат РеквизитыЗадачи.СуммаПродажПлан;	
		
	ИначеЕсли РеквизитыЗадачи.ВидЗадачи = Перечисления.ВидыЗадач.НаРазвитие Тогда 
		 		
		Если РеквизитыЗадачи.СуммаПродажПлан > 0 Тогда
			Возврат РеквизитыЗадачи.СуммаПродажПлан;
		КонецЕсли;
			
		Запрос		 = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДефицитПотенциала.Дефицит КАК Значение
		|ИЗ
		|	РегистрСведений.ДефицитПотенциала КАК ДефицитПотенциала
		|ГДЕ
		|	ДефицитПотенциала.ТочкаДоставки = &ТочкаДоставки
		|	И ДефицитПотенциала.МаркетинговаяГруппа = &МаркетинговаяГруппа";
		
		Запрос.УстановитьПараметр("МаркетинговаяГруппа", РеквизитыЗадачи.МаркетинговаяГруппа);
		Запрос.УстановитьПараметр("ТочкаДоставки"      , РеквизитыЗадачи.ТочкаДоставки);
		
		
	ИначеЕсли РеквизитыЗадачи.ВидЗадачи = Перечисления.ВидыЗадач.НаПадениеМаркетинговаяГруппа Тогда  
				
		Если РеквизитыЗадачи.СуммаПродажПлан > 0 Тогда
			Возврат РеквизитыЗадачи.СуммаПродажПлан;
		КонецЕсли;
			
		Запрос		 = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсторическийДефицитМаркетинговыеГруппы.Дефицит КАК Значение
		|ИЗ
		|	РегистрСведений.ИсторическийДефицитМаркетинговыеГруппы КАК ИсторическийДефицитМаркетинговыеГруппы
		|ГДЕ
		|	ИсторическийДефицитМаркетинговыеГруппы.ТочкаДоставки = &ТочкаДоставки
		|	И ИсторическийДефицитМаркетинговыеГруппы.МаркетинговаяГруппа = &МаркетинговаяГруппа";
		
		Запрос.УстановитьПараметр("МаркетинговаяГруппа", РеквизитыЗадачи.МаркетинговаяГруппа);
		Запрос.УстановитьПараметр("ТочкаДоставки"      , РеквизитыЗадачи.ТочкаДоставки);  
		
	ИначеЕсли РеквизитыЗадачи.ВидЗадачи = Перечисления.ВидыЗадач.НаПадениеБренд Тогда  
				
		Если РеквизитыЗадачи.СуммаПродажПлан > 0 Тогда
			Возврат РеквизитыЗадачи.СуммаПродажПлан;
		КонецЕсли;
			
		Запрос		 = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсторическийДефицитБренды.Дефицит КАК Значение
		|ИЗ
		|	РегистрСведений.ИсторическийДефицитБренды КАК ИсторическийДефицитБренды
		|ГДЕ
		|	ИсторическийДефицитБренды.ТочкаДоставки = &ТочкаДоставки
		|	И ИсторическийДефицитБренды.Бренд = &Бренд";
		
		Запрос.УстановитьПараметр("Бренд"        , РеквизитыЗадачи.Бренд);
		Запрос.УстановитьПараметр("ТочкаДоставки", РеквизитыЗадачи.ТочкаДоставки); 	
		
	Иначе
		
		Возврат 0;	
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
	
		Возврат Выборка.Значение * -1;
		
	Иначе
		
		Возврат 0;
	
	КонецЕсли;
	
КонецФункции // ()     

Функция   ПолучитьЭлементДебиторскаяЗадолженность(Клиент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
		
	Запрос 		 = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДебиторскаяЗадолженность.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДебиторскаяЗадолженность КАК ДебиторскаяЗадолженность
	|ГДЕ
	|	ДебиторскаяЗадолженность.Владелец = &Клиент
	|	И ДебиторскаяЗадолженность.ПометкаУдаления = ЛОЖЬ"; 	
	
	Запрос.УстановитьПараметр("Клиент", Клиент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() Тогда
	
		Возврат Выборка.Ссылка;	
	
	Иначе
		
		Возврат Справочники.ДебиторскаяЗадолженность.ПустаяСсылка();
	
	КонецЕсли;
	
КонецФункции // ()

Функция   ПолучитьПартнераПоГУИД(ГУИД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлиентыСписокКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Клиенты.СписокКонтрагентов КАК КлиентыСписокКонтрагентов
	|ГДЕ
	|	КлиентыСписокКонтрагентов.ГУИД = &ГУИД";   	
	
	Запрос.УстановитьПараметр("ГУИД", ГУИД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Ссылка;	
		
	Иначе
		
		Возврат Справочники.Клиенты.ПустаяСсылка();
		
	КонецЕсли;   	
	
КонецФункции // ()

#КонецОбласти

#Область РаботаСКартой

Функция   ПолучитьТекстТрекинг() Экспорт

	Макет = ПолучитьОбщийМакет("МакетЯндекс");	
	Возврат Макет.ПолучитьТекст();	

КонецФункции // ()

Функция   ПолучитьМаршрутВJson(МенеджерТТ, ТекущийДень, ТолькоСогласованные, ВыводитьОтветы, ВыводитьЛинии, ЦентрШирота, ЦентрДолгота) Экспорт
	
	// Результат функции
	
	МассивОписанияТочек = Новый Массив;
	
	// Параметры
		
	СреднееШирота      = 0;
	СреднееДолгота     = 0;
	ВсегоТочек         = 0; 
	
	ИдентификаторТочки = 0;
	
	// Запрос по точкам доставки
	
	Запрос       = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Визит.Ссылка КАК Визит,
		|	Визит.ТочкаДоставки КАК ТочкаДоставки,
		|	Визит.Статус КАК Статус
		|ПОМЕСТИТЬ втВизитыТочки
		|ИЗ
		|	Документ.Визит КАК Визит
		|ГДЕ
		|	Визит.Дата = &Дата
		|	И Визит.Менеджер = &Менеджер
		|	И Визит.ПометкаУдаления = ЛОЖЬ
		|	И ВЫБОР
		|			КОГДА &ТолькоСогласованные
		|				ТОГДА Визит.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВизитов.Согласован)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втВизитыТочки.Визит КАК Визит,
		|	втВизитыТочки.ТочкаДоставки КАК ТочкаДоставки,
		|	втВизитыТочки.Статус КАК Статус,
		|	ВизитЗадачи.Задача КАК Задача,
		|	ВизитЗадачи.Статус КАК ЗадачаСтатус,
		|	ВизитЗадачи.Комментарий КАК ЗадачаКомментарий
		|ПОМЕСТИТЬ втЗадачиВизита
		|ИЗ
		|	втВизитыТочки КАК втВизитыТочки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Визит.Задачи КАК ВизитЗадачи
		|		ПО втВизитыТочки.Визит = ВизитЗадачи.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЗадачиВизита.Визит КАК Визит,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втЗадачиВизита.Задача) КАК КоличествоЗадач
		|ПОМЕСТИТЬ втКоличествоЗадач
		|ИЗ
		|	втЗадачиВизита КАК втЗадачиВизита
		|
		|СГРУППИРОВАТЬ ПО
		|	втЗадачиВизита.Визит
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЛогГеолокации.Период КАК Период,
		|	втВизитыТочки.Визит КАК Визит,
		|	втВизитыТочки.Статус КАК Статус,
		|	ЛогГеолокации.Задача КАК Задача,
		|	ЛогГеолокации.Долгота КАК ЗадачаДолгота,
		|	ЛогГеолокации.Широта КАК ЗадачаШирота,
		|	ЛогГеолокации.ВертикальнаяТочность КАК ЗадачаВертикальнаяТочность,
		|	ЛогГеолокации.ГоризонтальнаяТочность КАК ЗадачаГоризонтальнаяТочность,
		|	втВизитыТочки.ТочкаДоставки КАК ТочкаДоставки
		|ПОМЕСТИТЬ втЛогГеолокации
		|ИЗ
		|	втВизитыТочки КАК втВизитыТочки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЛогГеолокации КАК ЛогГеолокации
		|		ПО (ЛогГеолокации.Пользователь = &Менеджер)
		|			И втВизитыТочки.Визит = ЛогГеолокации.Визит
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втВизитыТочки.Визит КАК Визит,
		|	втВизитыТочки.Статус КАК Статус,
		|	втВизитыТочки.ТочкаДоставки КАК ТочкаДоставки,
		|	втВизитыТочки.ТочкаДоставки.Код КАК ТочкаДоставкиКод,
		|	втВизитыТочки.ТочкаДоставки.Наименование КАК ТочкаДоставкиНаименование,
		|	втВизитыТочки.ТочкаДоставки.Долгота КАК ТочкаДоставкиДолгота,
		|	втВизитыТочки.ТочкаДоставки.Широта КАК ТочкаДоставкиШирота,
		|	ЕСТЬNULL(втКоличествоЗадач.КоличествоЗадач, 0) КАК КоличествоЗадач
		|ИЗ
		|	втВизитыТочки КАК втВизитыТочки
		|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличествоЗадач КАК втКоличествоЗадач
		|		ПО втВизитыТочки.Визит = втКоличествоЗадач.Визит
		|ГДЕ
		|	втВизитыТочки.ТочкаДоставки.Долгота <> 0
		|	И втВизитыТочки.ТочкаДоставки.Широта <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЛогГеолокации.Визит КАК Визит,
		|	втЛогГеолокации.ТочкаДоставки КАК ТочкаДоставки,
		|	втЛогГеолокации.ТочкаДоставки.Код КАК ТочкаДоставкиКод,
		|	втЛогГеолокации.ТочкаДоставки.Наименование КАК ТочкаДоставкиНаименование,
		|	втЛогГеолокации.Период КАК Период,
		|	втЛогГеолокации.Статус КАК Статус,
		|	втЛогГеолокации.Задача КАК Задача,
		|	втЛогГеолокации.ЗадачаДолгота КАК ЗадачаДолгота,
		|	втЛогГеолокации.ЗадачаШирота КАК ЗадачаШирота,
		|	втЛогГеолокации.ЗадачаВертикальнаяТочность КАК ЗадачаВертикальнаяТочность,
		|	втЛогГеолокации.ЗадачаГоризонтальнаяТочность КАК ЗадачаГоризонтальнаяТочность,
		|	втЛогГеолокации.Задача.ВидЗадачи КАК ЗадачаВидЗадачи,
		|	втЛогГеолокации.Задача.Наименование КАК ЗадачаНаименование,
		|	втЛогГеолокации.Задача.Описание КАК ЗадачаОписание,
		|	втЛогГеолокации.Задача.МаркетинговаяГруппа КАК ЗадачаМаркетинговаяГруппа,
		|	втЛогГеолокации.Задача.Бренд КАК ЗадачаБренд,
		|	ЕСТЬNULL(ВизитЗадачи.ЗадачаСтатус, ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.ПустаяСсылка)) КАК ЗадачаСтатус,
		|	ЕСТЬNULL(ВизитЗадачи.ЗадачаКомментарий, """") КАК ЗадачаКомментарий
		|ИЗ
		|	втЛогГеолокации КАК втЛогГеолокации
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЗадачиВизита КАК ВизитЗадачи
		|		ПО втЛогГеолокации.Визит = ВизитЗадачи.Визит
		|			И втЛогГеолокации.Задача = ВизитЗадачи.Задача
		|ГДЕ
		|	втЛогГеолокации.ЗадачаДолгота <> 0
		|	И втЛогГеолокации.ЗадачаШирота <> 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЛогГеолокации.Визит КАК Визит,
		|	МИНИМУМ(втЛогГеолокации.Период) КАК Период
		|ИЗ
		|	втЛогГеолокации КАК втЛогГеолокации
		|
		|СГРУППИРОВАТЬ ПО
		|	втЛогГеолокации.Визит
		|
		|УПОРЯДОЧИТЬ ПО
		|	МИНИМУМ(втЛогГеолокации.Период)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЛогГеолокации.ЗадачаДолгота КАК ЗадачаДолгота,
		|	втЛогГеолокации.ЗадачаШирота КАК ЗадачаШирота
		|ИЗ
		|	втЛогГеолокации КАК втЛогГеолокации
		|ГДЕ
		|	втЛогГеолокации.ЗадачаДолгота <> 0
		|	И втЛогГеолокации.ЗадачаШирота <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	втЛогГеолокации.ЗадачаДолгота,
		|	втЛогГеолокации.ЗадачаШирота";
	
	Запрос.УстановитьПараметр("Дата"               , ТекущийДень);
	Запрос.УстановитьПараметр("Менеджер"           , МенеджерТТ);
	Запрос.УстановитьПараметр("ТолькоСогласованные", ТолькоСогласованные);


	РезультатЗапроса            = Запрос.ВыполнитьПакет();
	КоличествоТаблиц            = РезультатЗапроса.Количество();
	
	ТаблицаТочкиДоставки        = РезультатЗапроса[КоличествоТаблиц - 4].Выгрузить();
	ТаблицаТочкиДоставки.Колонки.Добавить("Цвет", Новый ОписаниеТипов("Строка"));
	
	ТаблицаЛогГеолокации        = РезультатЗапроса[КоличествоТаблиц - 3].Выгрузить();
	ТаблицаЛогГеолокации.Индексы.Добавить("Визит");
	ТаблицаЛогГеолокации.Индексы.Добавить("ЗадачаДолгота");
	ТаблицаЛогГеолокации.Индексы.Добавить("ЗадачаШирота");
	
	ТаблицаКоординатыГеолокации = РезультатЗапроса[КоличествоТаблиц - 1].Выгрузить();
	ТаблицаКоординатыГеолокации.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Число"));
	ТаблицаКоординатыГеолокации.Колонки.Добавить("Кластер"      , Новый ОписаниеТипов("Число"));
		
	ПорядокОбходаТочек          = РезультатЗапроса[КоличествоТаблиц - 2].Выгрузить();
	ПорядокОбходаТочек.Колонки.Добавить("Номер", Новый ОписаниеТипов("Число"));
	
	ИтНомер = 1;
	
	Для каждого СтрокаПорядокОбхода Из ПорядокОбходаТочек Цикл
	
		СтрокаПорядокОбхода.Номер = ИтНомер;
		
		ИтНомер = ИтНомер + 1;
	
	КонецЦикла;
	
	Если ТаблицаТочкиДоставки.Количество() = 0 И ТаблицаКоординатыГеолокации.Количество() = 0 Тогда
	
		Возврат "";
	
	КонецЕсли;    	
	
	// Цвета точек
	
	МассивЦветовТочек = Новый Массив;
	МассивЦветовТочек.Добавить("blue");
	МассивЦветовТочек.Добавить("darkOrange");
	МассивЦветовТочек.Добавить("pink");
	МассивЦветовТочек.Добавить("gray");
	МассивЦветовТочек.Добавить("brown");
	МассивЦветовТочек.Добавить("violet");
	МассивЦветовТочек.Добавить("black");
	МассивЦветовТочек.Добавить("yellow");
	МассивЦветовТочек.Добавить("darkGreen");
	МассивЦветовТочек.Добавить("olive");
	
	МассивЦветовТочекHEX = Новый Массив;
	МассивЦветовТочекHEX.Добавить("#0000ff");
	МассивЦветовТочекHEX.Добавить("#ff8c00");
	МассивЦветовТочекHEX.Добавить("#ffc0cb");
	МассивЦветовТочекHEX.Добавить("#808080");
	МассивЦветовТочекHEX.Добавить("#a52a2a");
	МассивЦветовТочекHEX.Добавить("#ee82ee");
	МассивЦветовТочекHEX.Добавить("#000000");
	МассивЦветовТочекHEX.Добавить("#ffff00");
	МассивЦветовТочекHEX.Добавить("#006400");
	МассивЦветовТочекHEX.Добавить("#808000");
	
	// Определение точек доставки на карте  
	
	НомерТТ = 0;
	
	Для каждого ТочкаДоставкиНаКарте ИЗ ТаблицаТочкиДоставки Цикл		
		
		// Параметры точки
		
		ТекЦвет         = "red";
		
		МассивКоординат = Новый Массив;
		МассивКоординат.Добавить(ТочкаДоставкиНаКарте.ТочкаДоставкиШирота);
		МассивКоординат.Добавить(ТочкаДоставкиНаКарте.ТочкаДоставкиДолгота);		
		
		ГеометрияТочки = Новый Структура("type, coordinates", "Point", МассивКоординат);  				
		
		НомерОбхода    = "0";
		
		СтрокаПорядокОбхода = ПорядокОбходаТочек.Найти(ТочкаДоставкиНаКарте.Визит);
		
		Если СтрокаПорядокОбхода <> Неопределено Тогда
			
			НомерОбхода = Строка(СтрокаПорядокОбхода.Номер); 				
			ИдЦвета     = ?(НомерТТ >= МассивЦветовТочек.Количество(), НомерТТ % МассивЦветовТочек.Количество(), НомерТТ);
						
			ТекЦвет = МассивЦветовТочек[ИдЦвета];
			ТочкаДоставкиНаКарте.Цвет = МассивЦветовТочекHEX[ИдЦвета];
			
			НомерТТ = НомерТТ + 1; 
						
		КонецЕсли;     		
		
		ВидТочки = СтрШаблон("islands#%1CircleIcon", ТекЦвет);
		
		// Описание точки
		
		ЗадачиВизита = ТаблицаЛогГеолокации.НайтиСтроки(Новый Структура("Визит", ТочкаДоставкиНаКарте.Визит));     			
		
		ТекстОписанияМетки           = СтрШаблон("%1 - %2",ТочкаДоставкиНаКарте.ТочкаДоставкиКод, ТочкаДоставкиНаКарте.ТочкаДоставкиНаименование);     		
		ТекстОписанияМеткиПриНажатии = СтрШаблон("<p><font size=3>%1 - %2</font></p>
											     |<p><font size=3>%3 - Статус визита: %4</font></p>
												 |<p><font size=3>Задачи %5 из %6</font></p>",
													ТочкаДоставкиНаКарте.ТочкаДоставкиКод, 
													ТочкаДоставкиНаКарте.ТочкаДоставкиНаименование,
													НомерОбхода,
												    Строка(ТочкаДоставкиНаКарте.Статус),
													ЗадачиВизита.Количество(),
										            ТочкаДоставкиНаКарте.КоличествоЗадач);
		
		Для каждого ТекЗадача Из ЗадачиВизита Цикл
			
			ТекСтрокаЗадачи = ПолучитьОбщееОписаниеЗадачи(ТекЗадача);
			
			ТекстОписанияМеткиПриНажатии = ТекстОписанияМеткиПриНажатии + Символы.ПС + СтрШаблон("<p><font size=2>%1</font></p>", ТекСтрокаЗадачи);
			
		КонецЦикла;											
		
		СтруктураПараметровТочки = Новый Структура("clusterCaption, hintContent, balloonContentBody, iconContent", 
		ТекстОписанияМетки, 
		ТекстОписанияМетки, 
		ТекстОписанияМеткиПриНажатии,
		НомерОбхода);		
		
		// Объект Яндекс.Карты				
		
		СтруктураМарки = Новый Структура;
		СтруктураМарки.Вставить("type"      , "Feature");
		СтруктураМарки.Вставить("id"        , ИдентификаторТочки); 
		СтруктураМарки.Вставить("geometry"  , ГеометрияТочки);
		СтруктураМарки.Вставить("properties", СтруктураПараметровТочки);
		СтруктураМарки.Вставить("options"   , Новый Структура("preset", ВидТочки));
		
		// Формирование результата
		
		МассивОписанияТочек.Добавить(СтруктураМарки);
		
		ИдентификаторТочки = ИдентификаторТочки + 1;
		
		// Параметры расчета центра карты
		
		Если ЗначениеЗаполнено(ТочкаДоставкиНаКарте.ТочкаДоставкиШирота) И ЗначениеЗаполнено(ТочкаДоставкиНаКарте.ТочкаДоставкиДолгота) Тогда
			
			СреднееШирота  = СреднееШирота + ТочкаДоставкиНаКарте.ТочкаДоставкиШирота;
			СреднееДолгота = СреднееДолгота + ТочкаДоставкиНаКарте.ТочкаДоставкиДолгота;		
			ВсегоТочек     = ВсегоТочек + 1;
			
		КонецЕсли; 	
		
	КонецЦикла;
	
	СвернутьТочкиДоставки(МассивОписанияТочек);
	
	// Определение ответов по задачам на карте  
	
	// 1. Идентификаторы каждой точки для кластеризации
	
	Для каждого ПозицияОтветПоЗадачи Из ТаблицаКоординатыГеолокации Цикл
		
		ПозицияОтветПоЗадачи.Идентификатор = ИдентификаторТочки;
		
		ИдентификаторТочки = ИдентификаторТочки + 1;
		
	КонецЦикла;
	
	// 2. Кластеризация          	
	
	ТаблицаЦентроидов = Новый ТаблицаЗначений;
	ТаблицаЦентроидов.Колонки.Добавить("Кластер");
	ТаблицаЦентроидов.Колонки.Добавить("Широта");
	ТаблицаЦентроидов.Колонки.Добавить("Долгота");	
	ТаблицаЦентроидов.Колонки.Добавить("ШиротаБыло");
	ТаблицаЦентроидов.Колонки.Добавить("ДолготаБыло");
	
	ЗаполнитьКластераКоординатыГеолокации(ТаблицаКоординатыГеолокации, ТаблицаЦентроидов);
	
	// 3. Формирование ответов
	
	Для каждого ТекКластер Из ТаблицаЦентроидов Цикл
		
		// Ответы в кластере
		
		СтрокиОтветыПоЗадачам = ТаблицаКоординатыГеолокации.НайтиСтроки(Новый Структура("Кластер", ТекКластер.Кластер));
		
		Если СтрокиОтветыПоЗадачам.Количество() = 0 Тогда
			
			Продолжить;	
			
		КонецЕсли;  
		
		// Идентификатор и координаты кластера
		
		МассивКоординат = Новый Массив;
		МассивКоординат.Добавить(ТекКластер.Широта);
		МассивКоординат.Добавить(ТекКластер.Долгота);		
		ГеометрияТочки  = Новый Структура("type, coordinates", "Point", МассивКоординат);
		
		СтруктураМарки  = Новый Структура;
		СтруктураМарки.Вставить("type"    , "Feature");
		СтруктураМарки.Вставить("id"      , ИдентификаторТочки);
		СтруктураМарки.Вставить("geometry", ГеометрияТочки);
		
		// Описание ответов в кластере
		
		СоответствиеТочкаПорядокТочки   = Новый Соответствие;
		СоответствиеТочкаОписаниеОтвета = Новый Соответствие;
		
		Для каждого ПозицияОтветПоЗадачи Из СтрокиОтветыПоЗадачам Цикл
			
			ОтветыПоЗадачамВТочке = ТаблицаЛогГеолокации.НайтиСтроки(Новый Структура("ЗадачаДолгота, ЗадачаШирота", ПозицияОтветПоЗадачи.ЗадачаДолгота, ПозицияОтветПоЗадачи.ЗадачаШирота));
			
			Для каждого ОтветПоЗадачеВТочке Из ОтветыПоЗадачамВТочке Цикл
				
				СтрокаПорядокОбхода = ПорядокОбходаТочек.Найти(ОтветПоЗадачеВТочке.Визит);
				
				Если СтрокаПорядокОбхода <> Неопределено Тогда
					
					Если СоответствиеТочкаПорядокТочки.Получить(ОтветПоЗадачеВТочке.ТочкаДоставки) = Неопределено Тогда
					
						СоответствиеТочкаПорядокТочки.Вставить(ОтветПоЗадачеВТочке.ТочкаДоставки, СтрокаПорядокОбхода.Номер);	
					
					КонецЕсли;
										
				КонецЕсли;
				
				Если СоответствиеТочкаОписаниеОтвета.Получить(ОтветПоЗадачеВТочке.ТочкаДоставки) = Неопределено Тогда
					
					СоответствиеТочкаОписаниеОтвета.Вставить(ОтветПоЗадачеВТочке.ТочкаДоставки, Новый Массив);
							
				КонецЕсли;
				
				СоответствиеТочкаОписаниеОтвета.Получить(ОтветПоЗадачеВТочке.ТочкаДоставки).Добавить(ПолучитьОбщееОписаниеЗадачи(ОтветПоЗадачеВТочке));
				
				// Линии на карте
				
				Если ВыводитьЛинии Тогда
					
					ДанныеТочки = ТаблицаТочкиДоставки.Найти(ОтветПоЗадачеВТочке.ТочкаДоставки, "ТочкаДоставки");
					
					Если ДанныеТочки <> Неопределено И (ДанныеТочки.ТочкаДоставкиШирота <> ОтветПоЗадачеВТочке.ЗадачаШирота ИЛИ ДанныеТочки.ТочкаДоставкиДолгота <> ОтветПоЗадачеВТочке.ЗадачаДолгота) Тогда
						
						ИдентификаторТочки = ИдентификаторТочки + 1;
						
						ПерваяВершина = Новый Массив;
						ПерваяВершина.Добавить(ДанныеТочки.ТочкаДоставкиШирота);
						ПерваяВершина.Добавить(ДанныеТочки.ТочкаДоставкиДолгота);
						
						ВтораяВершина = Новый Массив;    
						ВтораяВершина.Добавить(ТекКластер.Широта);
						ВтораяВершина.Добавить(ТекКластер.Долгота);
						
						КоординатыЛинии = Новый Массив;
						КоординатыЛинии.Добавить(ПерваяВершина);
						КоординатыЛинии.Добавить(ВтораяВершина);

						ГеометрияЛиния = Новый Структура("type, coordinates", "LineString", КоординатыЛинии);
						
						СтруктураЛиния = Новый Структура;
						СтруктураЛиния.Вставить("type"    , "Feature");
						СтруктураЛиния.Вставить("id"      , ИдентификаторТочки);
						СтруктураЛиния.Вставить("geometry", ГеометрияЛиния);
						СтруктураЛиния.Вставить("options" , Новый Структура("strokeWidth, strokeColor", 2, ?(ПустаяСтрока(ДанныеТочки.Цвет), "#ff0000", ДанныеТочки.Цвет)));
						
						МассивОписанияТочек.Добавить(СтруктураЛиния);   										
						
					КонецЕсли;
					
				КонецЕсли;
					
			КонецЦикла;    	
			
		КонецЦикла;   				
		
		ТекстОписанияМеткиПриНажатии = "";  				
		НомерОбхода                  = ""; 
		
		Для каждого ТекЭлемент Из СоответствиеТочкаПорядокТочки Цикл
		
			НомерОбхода = НомерОбхода + ?(ПустаяСтрока(НомерОбхода), "", ",") + ТекЭлемент.Значение;	
			
			ТекстОписанияМеткиПриНажатии = ТекстОписанияМеткиПриНажатии + ?(ПустаяСтрока(ТекстОписанияМеткиПриНажатии), "", Символы.ПС) 
					+ СтрШаблон("<p><font size=3>%1 - %2</font></p>", ТекЭлемент.Значение, ТекЭлемент.Ключ);

			МассивОписанийЗадач = СоответствиеТочкаОписаниеОтвета.Получить(ТекЭлемент.Ключ);
			
			Если МассивОписанийЗадач <> Неопределено Тогда
			
				Для каждого ТекущийОтветВТочке Из МассивОписанийЗадач Цикл
				
					ТекстОписанияМеткиПриНажатии = ТекстОписанияМеткиПриНажатии + Символы.ПС + СтрШаблон("<p><font size=2>%1</font></p>", ТекущийОтветВТочке);	
				
				КонецЦикла;	
			
			КонецЕсли;
		
		КонецЦикла;
		
		// Итоговый результат по кластеру
		
		СтруктураПараметровТочки = Новый Структура("clusterCaption, hintContent, balloonContentBody, iconContent", 
												НомерОбхода, 
												НомерОбхода, 
												ТекстОписанияМеткиПриНажатии,
												НомерОбхода);					
		
		СтруктураМарки.Вставить("properties", СтруктураПараметровТочки);
		СтруктураМарки.Вставить("options"   , Новый Структура("preset", "islands#darkBlueStretchyIcon"));			
		
		Если ВыводитьОтветы Тогда
			
			МассивОписанияТочек.Добавить(СтруктураМарки);
			
		КонецЕсли;
		
		ИдентификаторТочки = ИдентификаторТочки + 1;
		
	КонецЦикла;
	
	// Определение центра карты
	
	Если ВсегоТочек <> 0 Тогда
	
		ЦентрШирота  = СреднееШирота / ВсегоТочек;
		ЦентрДолгота = СреднееДолгота / ВсегоТочек;
		
	Иначе
		
		ЦентрШирота  = 0;
		ЦентрДолгота = 0;
	
	КонецЕсли;
	
	// Формирование результата
	
	Если МассивОписанияТочек.Количество() = 0 Тогда
	
		Возврат "";	
	
	КонецЕсли;
	
	СтруктураJson = Новый Структура;
	СтруктураJson.Вставить("type", "FeatureCollection");
	СтруктураJson.Вставить("features", МассивОписанияТочек);
	
	Возврат СобытияСлужебный.СериализоватьВJSON(СтруктураJson);	
	
КонецФункции

Функция   ПолучитьОбщееОписаниеЗадачи(ЗадачаОтвет)
	
	ОбщееОписаниеЗадачи = "";
	
	Если ЗадачаОтвет.ЗадачаВидЗадачи = Перечисления.ВидыЗадач.ПрочиеЗадачи ИЛИ ЗадачаОтвет.ЗадачаВидЗадачи = Перечисления.ВидыЗадач.НаПродажу Тогда
		
		ОбщееОписаниеЗадачи = СтрШаблон("%5 %1 %2 - %3 (%4)", ЗадачаОтвет.ЗадачаВидЗадачи, ЗадачаОтвет.ЗадачаНаименование, ЗадачаОтвет.ЗадачаСтатус, ЗадачаОтвет.ЗадачаКомментарий, Формат(ЗадачаОтвет.Период, "ДФ=HH:mm"));			
	
	ИначеЕсли ЗадачаОтвет.ЗадачаВидЗадачи = Перечисления.ВидыЗадач.НаРазвитие ИЛИ ЗадачаОтвет.ЗадачаВидЗадачи = Перечисления.ВидыЗадач.НаПадениеМаркетинговаяГруппа Тогда
	
		ОбщееОписаниеЗадачи = СтрШаблон("%5 %1 %2 - %3 (%4)", ЗадачаОтвет.ЗадачаВидЗадачи, ЗадачаОтвет.ЗадачаМаркетинговаяГруппа, ЗадачаОтвет.ЗадачаСтатус, ЗадачаОтвет.ЗадачаКомментарий, Формат(ЗадачаОтвет.Период, "ДФ=HH:mm"));
		
	ИначеЕсли ЗадачаОтвет.ЗадачаВидЗадачи = Перечисления.ВидыЗадач.НаПадениеБренд Тогда
	
		ОбщееОписаниеЗадачи = СтрШаблон("%5 %1 %2 - %3 (%4)", ЗадачаОтвет.ЗадачаВидЗадачи, ЗадачаОтвет.ЗадачаБренд, ЗадачаОтвет.ЗадачаСтатус, ЗадачаОтвет.ЗадачаКомментарий, Формат(ЗадачаОтвет.Период, "ДФ=HH:mm"));	
		
	КонецЕсли;
	
	Возврат ОбщееОписаниеЗадачи;
	
КонецФункции // ()

Процедура ЗаполнитьКластерВСтроке(ТекСтрокаТЧ, ТаблицаЦентроидов, НомерКластера)
	
	ТочностьКластеризации = УправлениеПродажамиСерверПовтИсп.ПолучитьЗначениеНастройкиИнформационнойБазы("ТочностьКластеризации");
	
	Для каждого СтрокаЦентроид Из ТаблицаЦентроидов Цикл
		
		Расстояние = ПолучитьРасстояниеМеждуТочками(СтрокаЦентроид, Новый Структура("Широта, Долгота", ТекСтрокаТЧ.ЗадачаШирота, ТекСтрокаТЧ.ЗадачаДолгота));
		
		Если Расстояние * 1000 < ТочностьКластеризации Тогда
		
			ТекСтрокаТЧ.Кластер = СтрокаЦентроид.Кластер;
			Возврат;
		
		КонецЕсли;	
	
	КонецЦикла;	
	
	НоваяСтрокаЦентроид         = ТаблицаЦентроидов.Добавить();
	НоваяСтрокаЦентроид.Широта  = ТекСтрокаТЧ.ЗадачаШирота;
	НоваяСтрокаЦентроид.Долгота = ТекСтрокаТЧ.ЗадачаДолгота;
	НоваяСтрокаЦентроид.Кластер = НомерКластера;
	ТекСтрокаТЧ.Кластер         = НомерКластера;
	
	НомерКластера = НомерКластера + 1;
	
КонецПроцедуры

Процедура ЗаполнитьКластераКоординатыГеолокации(ТаблицаЛогГеолокации, ТаблицаЦентроидов)
	
	НомерКластера = 0;
	
	Для каждого Позиция Из ТаблицаЛогГеолокации Цикл
	
		ЗаполнитьКластерВСтроке(Позиция, ТаблицаЦентроидов, НомерКластера);	
	
	КонецЦикла;
			
КонецПроцедуры // ()

Функция   ПолучитьРасстояниеМеждуТочками(Точка1, Точка2)
	
	Если Точка1.Широта = Точка2.Широта И Точка1.Долгота = Точка2.Долгота Тогда 
		
		Возврат 0 
		
	Иначе
		
		Возврат	ACos(Окр(Sin(Точка1.Широта) * Sin(Точка2.Широта) + Cos(Точка1.Широта) * Cos(Точка2.Широта) * Cos(Точка1.Долгота - Точка2.Долгота),15));
		
	КонецЕсли;
	
КонецФункции

Процедура СвернутьТочкиДоставки(МассивТочекДоставки)

	МассивРезультат = Новый Массив;
	
	Для каждого ТекТочка Из МассивТочекДоставки Цикл
		
		ТочкаНайдена = Ложь;
		
		Для каждого ТекТочкаРезультат Из МассивРезультат Цикл
		
			Если ТекТочка.geometry.coordinates[0] = ТекТочкаРезультат.geometry.coordinates[0]
				И ТекТочка.geometry.coordinates[1] = ТекТочкаРезультат.geometry.coordinates[1] Тогда
			
				
				ТочкаНайдена = Истина;
				
				ТекТочкаРезультат.properties.clusterCaption     = СтрШаблон("%1%2%3", ТекТочкаРезультат.properties.clusterCaption, "; ", ТекТочка.properties.clusterCaption);
			    ТекТочкаРезультат.properties.hintContent        = СтрШаблон("%1%2%3", ТекТочкаРезультат.properties.hintContent, "; ", ТекТочка.properties.hintContent);
			    ТекТочкаРезультат.properties.iconContent        = СтрШаблон("%1%2%3", ТекТочкаРезультат.properties.iconContent, ",", ТекТочка.properties.iconContent);
			    ТекТочкаРезультат.properties.balloonContentBody = СтрШаблон("%1%2%3", ТекТочкаРезультат.properties.balloonContentBody, Символы.ПС, ТекТочка.properties.balloonContentBody);
			    
			КонецЕсли;	
		
		КонецЦикла;
		
		Если НЕ ТочкаНайдена Тогда
		
			МассивРезультат.Добавить(ТекТочка);	
		
		КонецЕсли;
	
	КонецЦикла;
	
	МассивТочекДоставки = МассивРезультат;
	
КонецПроцедуры

Функция ПолучитьТаблицуПустыхКоординат(МенеджерТТ, ТекущийДень) Экспорт
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	Визит.Ссылка КАК Визит,
	 |	Визит.Менеджер КАК Менеджер,
	 |	Визит.ТочкаДоставки КАК ТочкаДоставки
	 |ПОМЕСТИТЬ вт_Визиты
	 |ИЗ
	 |	Документ.Визит КАК Визит
	 |ГДЕ
	 |	Визит.Дата = &Дата
	 |	И Визит.Менеджер = &Менеджер
	 |	И Визит.ПометкаУдаления = ЛОЖЬ
	 |	И Визит.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВизитов.Согласован)
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ЛогГеолокации.Период КАК Период,
	 |	ЛогГеолокации.Визит КАК Визит,
	 |	ЛогГеолокации.Задача КАК Задача,
	 |	вт_Визиты.ТочкаДоставки КАК ТочкаДоставки
	 |ИЗ
	 |	вт_Визиты КАК вт_Визиты
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЛогГеолокации КАК ЛогГеолокации
	 |		ПО вт_Визиты.Визит = ЛогГеолокации.Визит
	 |			И вт_Визиты.Менеджер = ЛогГеолокации.Пользователь
	 |ГДЕ
	 |	ЛогГеолокации.Долгота = 0
	 |	И ЛогГеолокации.Широта = 0";
	 
	 Запрос.УстановитьПараметр("Дата", ТекущийДень);
	 Запрос.УстановитьПараметр("Менеджер", МенеджерТТ);
	 
	 Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПолучитьСоединениеVROOM()
	
	Результат = Новый Структура("Успех, Значение, ОписаниеОшибки", Ложь, "", "");
	
	АдресСервиса = УправлениеПродажамиСерверПовтИсп.ПолучитьЗначениеНастройкиИнформационнойБазы("АдресСервисаVROOM");
	
	Если АдресСервиса = "" Тогда
		Результат.ОписаниеОшибки = "Не заполнена настройка ""АдресСервисаVROOM""";
		Возврат Результат;
	КонецЕсли;
	
	АдресСервиса = АдресСервиса + "/ors/v2/matrix/";
	
	Попытка
		
		Соединение = Новый HTTPСоединение(АдресСервиса);
		
	Исключение
		
		Результат.ОписаниеОшибки = "Не заполнена настройка ""АдресСервисаVROOM""";
		Возврат Результат;
		
	КонецПопытки;
	
	Результат.Значение = Соединение; 
	Результат.Успех = Истина;
									  
	Возврат Результат;
	
КонецФункции

// Рассчитывает расстояние между двумя геоточками через сервис VROOM.
// Если вторым параметром передан массив точек, тогда будет возвращено минимальное расстояние до одной из этих точек.
//
// Параметры:
//   Точка1  - Структура - Структура с координатами первой точки.
//   Точка2  - Структура, Массив - Структура с координатами второй точки, или массив координат нескольких точек
// Возвращаемое значение:
//   Результат - содержит структуру с полями:
//   	* Успех - Булево - Показатель успеха расчета расстояния.
//   	* Значение - Число - Расстояние между точками в метрах.
//    	* ОписаниеОшибки - Строка - Описание ошибки в случае неудачного расчета.
Функция ПолучитьРасстояниеМеждуТочкамиVROOM(Точка1, Точка2) Экспорт
	
	//Если передана одна точка, то она добавится в массив
	МассивТочекДляРасчета = Новый Массив;
	
	Если ТипЗнч(Точка2) = Тип("Структура") Тогда
		МассивТочекДляРасчета.Добавить(Точка2);
	Иначе
		МассивТочекДляРасчета = Точка2;
	КонецЕсли;
	
	Замер  = МетрикиПроизводительности.НачатьЗамер("РассчетРасстоянияМеждуТочкамиVROOM");
	
	Результат = Новый Структура("Успех, Значение, ОписаниеОшибки", Ложь, "", "");
	
	СоединениеРезультат = ПолучитьСоединениеVROOM();
	
	Если НЕ СоединениеРезультат.Успех Тогда
		
		Результат.ОписаниеОшибки = СоединениеРезультат.ОписаниеОшибки;
		
		МетрикиПроизводительности.ЗакончитьЗамер(Замер); 
		
		Возврат Результат;
		
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
		
	МассивТочек = Новый Массив;
		
	МассивКоординат1 = Новый Массив;
	МассивКоординат1.Добавить(Точка1.Долгота);
	МассивКоординат1.Добавить(Точка1.Широта);
			
	МассивТочек.Добавить(МассивКоординат1);
	
	Для Каждого Точка Из МассивТочекДляРасчета Цикл
		
		МассивКоординат = Новый Массив;
		МассивКоординат.Добавить(Точка.Долгота);
		МассивКоординат.Добавить(Точка.Широта);
		
		МассивТочек.Добавить(МассивКоординат);
		
	КонецЦикла;
		
	СтруктураПараметров.Вставить("locations", МассивТочек);
		
	МассивПунктовНазначения = Новый Массив;
	МассивПунктовНазначения.Добавить(0);
		
	СтруктураПараметров.Вставить("destinations", МассивПунктовНазначения);
		
	МассивМетрик = Новый Массив;
	МассивМетрик.Добавить("distance");
		
	СтруктураПараметров.Вставить("metrics", МассивМетрик);
		
	СтруктураПараметров.Вставить("units", "m");
		
	Запись      = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, СтруктураПараметров);
	ТелоЗапроса = Запись.Закрыть();
		
	Соединение = СоединениеРезультат.Значение;
		
	Заголовки = Новый Соответствие;
	Заголовки["Content-Type"] = "application/json";

	Запрос = Новый HTTPЗапрос("driving-car", Заголовки);
	Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
		
	КоличествоПопытокЗапрос = 5;
	КодСостояния            = Неопределено;
	
	Для Итератор = 1 По КоличествоПопытокЗапрос Цикл

		Попытка
				
			ОтветСервера = Соединение.ВызватьHTTPМетод("POST", Запрос);
			КодСостояния = ОтветСервера.КодСостояния;
			Прервать;
					
		Исключение
				
			Если Итератор = КоличествоПопытокЗапрос Тогда
				
				Результат.ОписаниеОшибки = "Ошибка обращения к сервису VROOM: " + ОписаниеОшибки();
				
				МетрикиПроизводительности.ЗакончитьЗамер(Замер);
				
				Возврат Результат;
						
			КонецЕсли;
				
		КонецПопытки;
		
	КонецЦикла;
		
	Если КодСостояния = 200 Тогда
			
		Попытка
			
			ТелоЗапроса   = ОтветСервера.ПолучитьТелоКакСтроку();

			ЧтениеJSON    = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);

			СтруктураJSON = ПрочитатьJSON(ЧтениеJSON);
			
			ЧтениеJSON.Закрыть();
			
			МассивРасстояний = СтруктураJSON.distances;
			
			РасстояниеРезультат = 0;
			
			//Выберем минимальную дистанцию из предложенных сервисом
			Для Каждого РасстояниеЭлемент Из МассивРасстояний Цикл
				
				РасстояниеРасчет = РасстояниеЭлемент[0];
				
				Если РасстояниеРасчет <> Неопределено Тогда
				 	Если РасстояниеРезультат = 0 ИЛИ РасстояниеРасчет < РасстояниеРезультат Тогда
						РасстояниеРезультат = РасстояниеРасчет;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			Результат.Значение = РасстояниеРезультат; 
			Результат.Успех = Истина;
			
		Исключение
			
			Результат.ОписаниеОшибки = "Ошибка при разборе данных: " + ОписаниеОшибки();
			
		КонецПопытки;
		
	ИначеЕсли КодСостояния = 404 Тогда
		
		Попытка
			
			ТелоЗапроса   = ОтветСервера.ПолучитьТелоКакСтроку();

			ЧтениеJSON    = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);

			СтруктураJSON = ПрочитатьJSON(ЧтениеJSON);
			
			ЧтениеJSON.Закрыть();
			
			СтруктураОшибка = СтруктураJSON.error;
			
			Результат.ОписаниеОшибки = СтрШаблон("Сервис вернул код ошибки: %1. %2. %3", КодСостояния, СтруктураОшибка.code, СтруктураОшибка.message);
				
		Исключение
			
			Результат.ОписаниеОшибки = "Ошибка при разборе данных: " + ОписаниеОшибки();
			
		КонецПопытки
		
	Иначе
			
		Результат.ОписаниеОшибки = "Сервис вернул код ошибки: " + КодСостояния;
			
	КонецЕсли;
	
	МетрикиПроизводительности.ЗакончитьЗамер(Замер);
			
	Возврат Результат;
		
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыФункции

Процедура ИзменитьЗаписьАналитикаТочекДоставки(ТочкаДоставки, ЗначенияРесурсов, Удалить = Ложь) 
	
	НаборАналитикаТочекДоставки = РегистрыСведений.АналитикаТочекДоставки.СоздатьНаборЗаписей();
	НаборАналитикаТочекДоставки.Отбор.ТочкаДоставки.Установить(ТочкаДоставки);       
	
	НаборАналитикаТочекДоставки.ДополнительныеСвойства.Вставить("ЗаписьРазрешена", Истина);
	
	Если Удалить = Ложь Тогда
		
		ЗаписьНабора               = НаборАналитикаТочекДоставки.Добавить();
		ЗаписьНабора.ТочкаДоставки = ТочкаДоставки;
		
		ЗаполнитьЗначенияСвойств(ЗаписьНабора, ЗначенияРесурсов);
		
	КонецЕсли;
	
	НаборАналитикаТочекДоставки.Записать();	
	
КонецПроцедуры // ()

Процедура СтатусыЗадачВнестиЗапись(Задача, Статус, Период = Неопределено, Визит = Неопределено) 

	Если Период = Неопределено Тогда
	
		Период = ТекущаяДата();	
	
	КонецЕсли;	
	
	Если Визит = Неопределено Тогда
	
		Визит = Документы.Визит.ПустаяСсылка();	
	
	КонецЕсли; 	
	
	НаборСтатусыЗадач = РегистрыСведений.СтатусыЗадач.СоздатьНаборЗаписей();
	НаборСтатусыЗадач.Отбор.Период.Установить(Период);
	НаборСтатусыЗадач.Отбор.Задача.Установить(Задача);

	НаборСтатусыЗадач.ДополнительныеСвойства.Вставить("ЗаписьРазрешена", Истина);  	
	
	ЗаписьНабора        = НаборСтатусыЗадач.Добавить();
	ЗаписьНабора.Период = Период;
	ЗаписьНабора.Задача = Задача;
	ЗаписьНабора.Статус = Статус;
	ЗаписьНабора.Визит  = Визит;  
	
	НаборСтатусыЗадач.Записать();  	
	
КонецПроцедуры // ()

Функция   ПолучитьТекущийДефицит(Задача)

	Если ТипЗнч(Задача) = Тип("СправочникСсылка.Задачи") Тогда
	
		РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, "ВидЗадачи, ТочкаДоставки, МаркетинговаяГруппа, Бренд");
		
	Иначе
		
		РеквизитыЗадачи = Задача;
		
	КонецЕсли;
	
	ТекущийДефицит  = 0;
	
	ТочкаДоставки   = РеквизитыЗадачи.ТочкаДоставки;
	Параметр        = ?(РеквизитыЗадачи.ВидЗадачи = Перечисления.ВидыЗадач.НаПадениеБренд, РеквизитыЗадачи.Бренд, РеквизитыЗадачи.МаркетинговаяГруппа);
	
	Если РеквизитыЗадачи.ВидЗадачи = Перечисления.ВидыЗадач.НаРазвитие Тогда
				
		Запрос       = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДефицитПотенциала.Дефицит КАК Дефицит
		|ИЗ
		|	РегистрСведений.ДефицитПотенциала КАК ДефицитПотенциала
		|ГДЕ
		|	ДефицитПотенциала.ТочкаДоставки = &ТочкаДоставки
		|	И ДефицитПотенциала.МаркетинговаяГруппа = &Параметр";
		
		Запрос.УстановитьПараметр("Параметр"     , Параметр);
		Запрос.УстановитьПараметр("ТочкаДоставки", ТочкаДоставки);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
		
			ТекущийДефицит = Выборка.Дефицит;	
		
		КонецЕсли;
		
	ИначеЕсли РеквизитыЗадачи.ВидЗадачи = Перечисления.ВидыЗадач.НаПадениеМаркетинговаяГруппа Тогда	
		
		Запрос       = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсторическийДефицитМаркетинговыеГруппы.Дефицит КАК Дефицит
		|ИЗ
		|	РегистрСведений.ИсторическийДефицитМаркетинговыеГруппы КАК ИсторическийДефицитМаркетинговыеГруппы
		|ГДЕ
		|	ИсторическийДефицитМаркетинговыеГруппы.ТочкаДоставки = &ТочкаДоставки
		|	И ИсторическийДефицитМаркетинговыеГруппы.МаркетинговаяГруппа = &Параметр";
		
		Запрос.УстановитьПараметр("Параметр"     , Параметр);
		Запрос.УстановитьПараметр("ТочкаДоставки", ТочкаДоставки);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
		
			ТекущийДефицит = Выборка.Дефицит;	
		
		КонецЕсли;

	ИначеЕсли РеквизитыЗадачи.ВидЗадачи = Перечисления.ВидыЗадач.НаПадениеБренд Тогда
		
		Запрос       = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсторическийДефицитБренды.Дефицит КАК Дефицит
		|ИЗ
		|	РегистрСведений.ИсторическийДефицитБренды КАК ИсторическийДефицитБренды
		|ГДЕ
		|	ИсторическийДефицитБренды.ТочкаДоставки = &ТочкаДоставки
		|	И ИсторическийДефицитБренды.Бренд = &Параметр";
		
		Запрос.УстановитьПараметр("Параметр"     , Параметр);
		Запрос.УстановитьПараметр("ТочкаДоставки", ТочкаДоставки);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
		
			ТекущийДефицит = Выборка.Дефицит;	
		
		КонецЕсли;
	
	КонецЕсли;	  	
	
	Возврат ТекущийДефицит;

КонецФункции // ()

Функция   ПолучитьЗадачиВизита(Визит)     
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&Визит КАК Визит,
		|	ЗадачиВизита.Задача КАК Задача,
		|	ЗадачиВизита.Задача.ВидЗадачи КАК ВидЗадачи,
		|	ЗадачиВизита.Задача.КоличествоПопыток КАК КоличествоПопыток,
		|	ЗадачиВизита.Задача.ТочкаДоставки КАК ТочкаДоставки,
		|	ЗадачиВизита.Задача.Описание КАК Описание,
		|	ЗадачиВизита.Задача.Бренд КАК Бренд,
		|	ЗадачиВизита.Задача.МаркетинговаяГруппа КАК МаркетинговаяГруппа,
		|	ЗадачиВизита.Статус КАК Статус,
		|	ЗадачиВизита.Бренд КАК БрендНаРазвитие,
		|	ЗадачиВизита.Задача.Наименование КАК Наименование,
		|	ЗадачиВизита.Задача.СуммаПродажПлан КАК СуммаПродажПлан,
		|	ЗадачиВизита.Комментарий КАК Ответ
		|ПОМЕСТИТЬ втЗадачи
		|ИЗ
		|	Документ.Визит.Задачи КАК ЗадачиВизита
		|ГДЕ
		|	ЗадачиВизита.Ссылка = &Визит
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЗадачи.Задача КАК Задача,
		|	втЗадачи.ВидЗадачи КАК ВидЗадачи,
		|	втЗадачи.КоличествоПопыток КАК КоличествоПопыток,
		|	ЕСТЬNULL(ДефицитПотенциала.Дефицит, ЕСТЬNULL(ИсторическийДефицитБренды.Дефицит, ЕСТЬNULL(ИсторическийДефицитМаркетинговыеГруппы.Дефицит, 0))) КАК Дефицит,
		|	втЗадачи.Статус КАК Статус,
		|	втЗадачи.Описание КАК Описание,
		|	втЗадачи.МаркетинговаяГруппа КАК МаркетинговаяГруппа,
		|	ВЫБОР
		|		КОГДА втЗадачи.ВидЗадачи = ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаРазвитие)
		|			ТОГДА втЗадачи.БрендНаРазвитие
		|		ИНАЧЕ втЗадачи.Бренд
		|	КОНЕЦ КАК Бренд,
		|	втЗадачи.БрендНаРазвитие КАК БрендНаРазвитие,
		|	ВЫБОР
		|		КОГДА втЗадачи.ВидЗадачи = ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаРазвитие)
		|				ИЛИ втЗадачи.ВидЗадачи = ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаПадениеМаркетинговаяГруппа)
		|				ИЛИ втЗадачи.ВидЗадачи = ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаПадениеБренд)
		|				ИЛИ втЗадачи.ВидЗадачи = ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаПродажу)
		|			ТОГДА втЗадачи.СуммаПродажПлан
		|		ИНАЧЕ втЗадачи.Наименование
		|	КОНЕЦ КАК ДанныеЗадачи,
		|	ВЫБОР
		|		КОГДА втЗадачи.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Назначена)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ПеренестиВБэклог,
		|	ВЫБОР
		|		КОГДА втЗадачи.ВидЗадачи = ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.ПрочиеЗадачи)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Порядок,
		|	втЗадачи.Ответ КАК Ответ
		|ИЗ
		|	втЗадачи КАК втЗадачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДефицитПотенциала КАК ДефицитПотенциала
		|		ПО втЗадачи.ТочкаДоставки = ДефицитПотенциала.ТочкаДоставки
		|			И втЗадачи.МаркетинговаяГруппа = ДефицитПотенциала.МаркетинговаяГруппа
		|			И (втЗадачи.ВидЗадачи = ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаРазвитие))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторическийДефицитМаркетинговыеГруппы КАК ИсторическийДефицитМаркетинговыеГруппы
		|		ПО втЗадачи.ТочкаДоставки = ИсторическийДефицитМаркетинговыеГруппы.ТочкаДоставки
		|			И втЗадачи.МаркетинговаяГруппа = ИсторическийДефицитМаркетинговыеГруппы.МаркетинговаяГруппа
		|			И (втЗадачи.ВидЗадачи = ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаПадениеМаркетинговаяГруппа))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторическийДефицитБренды КАК ИсторическийДефицитБренды
		|		ПО втЗадачи.ТочкаДоставки = ИсторическийДефицитБренды.ТочкаДоставки
		|			И втЗадачи.Бренд = ИсторическийДефицитБренды.Бренд
		|			И (втЗадачи.ВидЗадачи = ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаПадениеБренд))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	Задача";
	
	Запрос.УстановитьПараметр("Визит", Визит);
	
	Возврат Запрос.Выполнить().Выгрузить();   

КонецФункции // ()

Функция   ПолучитьТаблицуЗадачи(ТочкаДоставки, ДатаРасчета)
	
	Запрос       = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Ссылка КАК Задача,
		|	Задачи.ВидЗадачи КАК ВидЗадачи,
		|	Задачи.ДатаНачала КАК ДатаНачала,
		|	Задачи.ТочкаДоставки КАК ТочкаДоставки,
		|	Задачи.ДатаОкончания КАК ДатаОкончания,
		|	Задачи.Наименование КАК Наименование,
		|	Задачи.Описание КАК Описание,
		|	Задачи.МаркетинговаяГруппа КАК МаркетинговаяГруппа,
		|	Задачи.Бренд КАК Бренд,
		|	Задачи.СуммаПродажПлан КАК СуммаПродажПлан,
		|	Задачи.КоличествоПопыток КАК КоличествоПопыток
		|ПОМЕСТИТЬ втПредв
		|ИЗ
		|	Справочник.Задачи КАК Задачи
		|ГДЕ
		|	Задачи.ТочкаДоставки = &ТочкаДоставки
		|	И Задачи.ЗадачаЗакрыта = ЛОЖЬ
		|	И Задачи.ПометкаУдаления = ЛОЖЬ
		|	И Задачи.ДатаНачала <= &ТекущаяДатаДень
		|	И ВЫБОР
		|			КОГДА Задачи.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ Задачи.ДатаОкончания >= &ТекущаяДатаДень
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПредв.Задача КАК Задача,
		|	втПредв.ВидЗадачи КАК ВидЗадачи,
		|	втПредв.ТочкаДоставки КАК ТочкаДоставки, 
		|	втПредв.КоличествоПопыток КАК КоличествоПопыток,
		|	втПредв.ДатаНачала КАК ДатаНачала,
		|	втПредв.ДатаОкончания КАК ДатаОкончания,
		|	втПредв.Наименование КАК Наименование,
		|	втПредв.Описание КАК Описание,
		|	втПредв.МаркетинговаяГруппа КАК МаркетинговаяГруппа,
		|	втПредв.Бренд КАК Бренд,
		|	втПредв.СуммаПродажПлан КАК СуммаПродажПлан,
		|	ЕСТЬNULL(СтатусыЗадачСрезПоследних.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Бэклог)) КАК Статус,
		|	ЕСТЬNULL(СтатусыЗадачСрезПоследних.Визит, ЗНАЧЕНИЕ(Документ.Визит.ПустаяСсылка)) КАК Визит
		|ИЗ
		|	втПредв КАК втПредв
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗадач.СрезПоследних(
		|				,
		|				Задача В
		|					(ВЫБРАТЬ
		|						втПредв.Задача
		|					ИЗ
		|						втПредв)) КАК СтатусыЗадачСрезПоследних
		|		ПО втПредв.Задача = СтатусыЗадачСрезПоследних.Задача";
	
	Запрос.УстановитьПараметр("ТочкаДоставки"  , ТочкаДоставки);
	Запрос.УстановитьПараметр("ТекущаяДатаДень", НачалоДня(ДатаРасчета));

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ()

Функция   ПолучитьОперативныйБэклогЗадачФактическиеДанные(Задачи, тзЗадачиИсключить = Неопределено)
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Задача КАК Задача,
		|	Задачи.ТочкаДоставки КАК ТочкаДоставки,
		|	Задачи.ВидЗадачи КАК ВидЗадачи,
		|	Задачи.КоличествоПопыток КАК КоличествоПопыток,
		|	Задачи.Наименование КАК Наименование,
		|	Задачи.Описание КАК Описание,
		|	Задачи.Бренд КАК Бренд,
		|	Задачи.МаркетинговаяГруппа КАК МаркетинговаяГруппа,
		|	Задачи.СуммаПродажПлан КАК СуммаПродажПлан,
		|	Задачи.ДатаНачала КАК ДатаНачала,
		|	Задачи.ДатаОкончания КАК ДатаОкончания,
		|	Задачи.Статус КАК Статус
		|ПОМЕСТИТЬ втЗадачи
		|ИЗ
		|	&Задачи КАК Задачи
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Задача
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	тзЗадачиИсключить.Задача КАК Задача
		|ПОМЕСТИТЬ ЗадачиИсключить
		|ИЗ
		|	&тзЗадачиИсключить КАК тзЗадачиИсключить
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЗадачи.Задача КАК Задача,
		|	втЗадачи.ВидЗадачи КАК ВидЗадачи,
		|	втЗадачи.КоличествоПопыток КАК КоличествоПопыток,
		|	ВЫБОР
		|		КОГДА втЗадачи.ВидЗадачи = ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаПродажу)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Порядок,
		|	ВЫБОР
		|		КОГДА ЗаблокированныеЗадачи.Аналитика ЕСТЬ NULL
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ КАК ЗадачаЗаблокирована,
		|	ВЫБОР
		|			КОГДА КонтрольИсполненияЗадач.Задача ЕСТЬ NULL
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ КАК ЗадачаНаКонтроле
		|ИЗ
		|	втЗадачи КАК втЗадачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗадачиИсключить КАК ЗадачиИсключить
		|		ПО втЗадачи.Задача = ЗадачиИсключить.Задача
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаблокированныеЗадачи КАК ЗаблокированныеЗадачи
		|		ПО втЗадачи.ТочкаДоставки = ЗаблокированныеЗадачи.ТочкаДоставки
		|			И втЗадачи.ВидЗадачи = ЗаблокированныеЗадачи.ВидЗадачи
		|			И втЗадачи.Задача = ЗаблокированныеЗадачи.Аналитика
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтрольИсполненияЗадач КАК КонтрольИсполненияЗадач
		|		ПО втЗадачи.Задача = КонтрольИсполненияЗадач.Задача
		|			И (КонтрольИсполненияЗадач.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Контроль))
		|ГДЕ
		|	втЗадачи.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Бэклог)
		|	И втЗадачи.ВидЗадачи <> ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаРазвитие)
		|	И втЗадачи.ВидЗадачи <> ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаПадениеБренд)
		|	И втЗадачи.ВидЗадачи <> ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаПадениеМаркетинговаяГруппа)
		|	И ЗадачиИсключить.Задача ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	втЗадачи.Задача КАК Задача,
		|	втЗадачи.ВидЗадачи КАК ВидЗадачи,
		|	втЗадачи.КоличествоПопыток КАК КоличествоПопыток,
		|	ВЫБОР
		|		КОГДА втЗадачи.ВидЗадачи = ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаПродажу)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Порядок,
		|	ВЫБОР
		|		КОГДА ЗаблокированныеЗадачи.Аналитика ЕСТЬ NULL
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ КАК ЗадачаЗаблокирована,
		|	ВЫБОР
		|			КОГДА КонтрольИсполненияЗадач.Задача ЕСТЬ NULL
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ КАК ЗадачаНаКонтроле
		|ИЗ
		|	втЗадачи КАК втЗадачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗадачиИсключить КАК ЗадачиИсключить
		|		ПО втЗадачи.Задача = ЗадачиИсключить.Задача
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаблокированныеЗадачи КАК ЗаблокированныеЗадачи
		|		ПО втЗадачи.ТочкаДоставки = ЗаблокированныеЗадачи.ТочкаДоставки
		|			И втЗадачи.ВидЗадачи = ЗаблокированныеЗадачи.ВидЗадачи
		|			И втЗадачи.Задача = ЗаблокированныеЗадачи.Аналитика
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтрольИсполненияЗадач КАК КонтрольИсполненияЗадач
		|		ПО втЗадачи.Задача = КонтрольИсполненияЗадач.Задача
		|			И (КонтрольИсполненияЗадач.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Контроль))
		|ГДЕ
		|	втЗадачи.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Контроль)
		|	И втЗадачи.ВидЗадачи <> ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаРазвитие)
		|	И втЗадачи.ВидЗадачи <> ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаПадениеБренд)
		|	И втЗадачи.ВидЗадачи <> ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаПадениеМаркетинговаяГруппа)
		|	И ЗадачиИсключить.Задача ЕСТЬ NULL 
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	втЗадачи.Задача";
	
	Если тзЗадачиИсключить = Неопределено Тогда
	
		тзЗадачиИсключить = Новый ТаблицаЗначений;
		тзЗадачиИсключить.Колонки.Добавить("Задача", Новый ОписаниеТипов("СправочникСсылка.Задачи"));
	
	КонецЕсли;
	            
	Запрос.УстановитьПараметр("тзЗадачиИсключить", тзЗадачиИсключить);
	Запрос.УстановитьПараметр("Задачи"           , Задачи);

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ()

Функция   ПолучитьОперативныйБэклогЗадачДинамическиеДанныеНаРазвитие(ТочкаДоставки, Задачи, тзЗадачиИсключить = Неопределено)
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Задача КАК Задача,
		|	Задачи.ТочкаДоставки КАК ТочкаДоставки,
		|	Задачи.ВидЗадачи КАК ВидЗадачи,
		|	Задачи.КоличествоПопыток КАК КоличествоПопыток,
		|	Задачи.Наименование КАК Наименование,
		|	Задачи.Описание КАК Описание,
		|	Задачи.Бренд КАК Бренд,
		|	Задачи.МаркетинговаяГруппа КАК МаркетинговаяГруппа,
		|	Задачи.СуммаПродажПлан КАК СуммаПродажПлан,
		|	Задачи.ДатаНачала КАК ДатаНачала,
		|	Задачи.ДатаОкончания КАК ДатаОкончания,
		|	Задачи.Статус КАК Статус
		|ПОМЕСТИТЬ втЗадачи
		|ИЗ
		|	&Задачи КАК Задачи
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Задача
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	тзЗадачиИсключить.Задача КАК Задача
		|ПОМЕСТИТЬ ЗадачиИсключить
		|ИЗ
		|	&тзЗадачиИсключить КАК тзЗадачиИсключить
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЗадачи.Задача КАК Задача,
		|	втЗадачи.МаркетинговаяГруппа КАК МаркетинговаяГруппа,
		|	втЗадачи.ВидЗадачи КАК ВидЗадачи,
		|	втЗадачи.Статус КАК Статус,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА КонтрольИсполненияЗадач.Задача ЕСТЬ NULL
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) КАК ЗадачаНаКонтроле
		|ПОМЕСТИТЬ втЗадачиПредв
		|ИЗ
		|	втЗадачи КАК втЗадачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтрольИсполненияЗадач КАК КонтрольИсполненияЗадач
		|		ПО втЗадачи.Задача = КонтрольИсполненияЗадач.Задача
		|			И (КонтрольИсполненияЗадач.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Контроль))
		|ГДЕ
		|	втЗадачи.ВидЗадачи = ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаРазвитие)
		|
		|СГРУППИРОВАТЬ ПО
		|	втЗадачи.Задача,
		|	втЗадачи.Статус,
		|	втЗадачи.МаркетинговаяГруппа,
		|	втЗадачи.ВидЗадачи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДефицитПотенциала.МаркетинговаяГруппа КАК МаркетинговаяГруппа,
		|	ДефицитПотенциала.Дефицит КАК Дефицит
		|ПОМЕСТИТЬ втДефицитПотенциала
		|ИЗ
		|	РегистрСведений.ДефицитПотенциала КАК ДефицитПотенциала
		|ГДЕ
		|	ДефицитПотенциала.ТочкаДоставки = &ТочкаДоставки
		|	И ДефицитПотенциала.Дефицит < 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДефицитПотенциала.МаркетинговаяГруппа КАК МаркетинговаяГруппа,
		|	втДефицитПотенциала.Дефицит КАК Дефицит,
		|	МАКСИМУМ(ЕСТЬNULL(втЗадачиПредв.Задача, ЗНАЧЕНИЕ(Справочник.Задачи.ПустаяСсылка))) КАК Задача,
		|	МАКСИМУМ(ЕСТЬNULL(втЗадачиПредв.ЗадачаНаКонтроле, ЛОЖЬ)) КАК ЗадачаНаКонтроле
		|ПОМЕСТИТЬ Результат
		|ИЗ
		|	втДефицитПотенциала КАК втДефицитПотенциала
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЗадачиПредв КАК втЗадачиПредв
		|		ПО втДефицитПотенциала.МаркетинговаяГруппа = втЗадачиПредв.МаркетинговаяГруппа
		|
		|СГРУППИРОВАТЬ ПО
		|	втДефицитПотенциала.МаркетинговаяГруппа,
		|	втДефицитПотенциала.Дефицит
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ЕСТЬNULL(втЗадачиПредв.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Бэклог)) = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Бэклог)
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	втДефицитПотенциала.МаркетинговаяГруппа КАК МаркетинговаяГруппа,
		|	втДефицитПотенциала.Дефицит КАК Дефицит,
		|	МАКСИМУМ(ЕСТЬNULL(втЗадачиПредв.Задача, ЗНАЧЕНИЕ(Справочник.Задачи.ПустаяСсылка))),
		|	МАКСИМУМ(ЕСТЬNULL(втЗадачиПредв.ЗадачаНаКонтроле, ЛОЖЬ))
		|ИЗ
		|	втДефицитПотенциала КАК втДефицитПотенциала
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЗадачиПредв КАК втЗадачиПредв
		|		ПО втДефицитПотенциала.МаркетинговаяГруппа = втЗадачиПредв.МаркетинговаяГруппа
		|
		|СГРУППИРОВАТЬ ПО
		|	втДефицитПотенциала.МаркетинговаяГруппа,
		|	втДефицитПотенциала.Дефицит
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ЕСТЬNULL(втЗадачиПредв.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Контроль)) = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Контроль)
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Результат.МаркетинговаяГруппа КАК МаркетинговаяГруппа,
		|	Результат.Дефицит КАК Дефицит,
		|	ЕСТЬNULL(Результат.Задача.КоличествоПопыток, 0) КАК КоличествоПопыток,
		|	Результат.Задача КАК Задача,
		|	Результат.ЗадачаНаКонтроле КАК ЗадачаНаКонтроле,
		|	ВЫБОР
		|		КОГДА ЗаблокированныеЗадачи.Аналитика ЕСТЬ NULL
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ КАК ЗадачаЗаблокирована
		|ИЗ
		|	Результат КАК Результат
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗадачиИсключить КАК ЗадачиИсключить
		|		ПО Результат.Задача = ЗадачиИсключить.Задача
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаблокированныеЗадачи КАК ЗаблокированныеЗадачи
		|		ПО  ЗаблокированныеЗадачи.ТочкаДоставки  = &ТочкаДоставки
		|			И ЗаблокированныеЗадачи.ВидЗадачи = ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаРазвитие)
		|			И Результат.МаркетинговаяГруппа = ЗаблокированныеЗадачи.Аналитика  
		|ГДЕ
		|	ЗадачиИсключить.Задача ЕСТЬ NULL 
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дефицит";
	
	Если тзЗадачиИсключить = Неопределено Тогда
	
		тзЗадачиИсключить = Новый ТаблицаЗначений;
		тзЗадачиИсключить.Колонки.Добавить("Задача", Новый ОписаниеТипов("СправочникСсылка.Задачи"));
	
	КонецЕсли;
	            
	Запрос.УстановитьПараметр("тзЗадачиИсключить", тзЗадачиИсключить);
	Запрос.УстановитьПараметр("Задачи"           , Задачи);
	Запрос.УстановитьПараметр("ТочкаДоставки"    , ТочкаДоставки);

	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции // ()

Функция   ПолучитьОперативныйБэклогЗадачДинамическиеДанныеНаПадениеБренд(ТочкаДоставки, Задачи, тзЗадачиИсключить = Неопределено) 
	   
	Запрос 		 = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Задача КАК Задача,
		|	Задачи.ВидЗадачи КАК ВидЗадачи,
		|	Задачи.Наименование КАК Наименование,
		|	Задачи.Описание КАК Описание,
		|	Задачи.Бренд КАК Бренд,
		|	Задачи.МаркетинговаяГруппа КАК МаркетинговаяГруппа,
		|	Задачи.СуммаПродажПлан КАК СуммаПродажПлан,
		|	Задачи.ДатаНачала КАК ДатаНачала,
		|	Задачи.ДатаОкончания КАК ДатаОкончания,
		|	Задачи.Статус КАК Статус
		|ПОМЕСТИТЬ втЗадачи
		|ИЗ
		|	&Задачи КАК Задачи
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Задача
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	тзЗадачиИсключить.Задача КАК Задача
		|ПОМЕСТИТЬ ЗадачиИсключить
		|ИЗ
		|	&тзЗадачиИсключить КАК тзЗадачиИсключить
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЗадачи.Задача КАК Задача,
		|	втЗадачи.Бренд КАК Бренд,
		|	втЗадачи.ВидЗадачи КАК ВидЗадачи,
		|	втЗадачи.Статус КАК Статус,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА КонтрольИсполненияЗадач.Задача ЕСТЬ NULL
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) КАК ЗадачаНаКонтроле
		|ПОМЕСТИТЬ втЗадачиПредв
		|ИЗ
		|	втЗадачи КАК втЗадачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтрольИсполненияЗадач КАК КонтрольИсполненияЗадач
		|		ПО втЗадачи.Задача = КонтрольИсполненияЗадач.Задача
		|			И (КонтрольИсполненияЗадач.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Контроль))
		|ГДЕ
		|	втЗадачи.ВидЗадачи = ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаПадениеБренд)
		|
		|СГРУППИРОВАТЬ ПО
		|	втЗадачи.Задача,
		|	втЗадачи.Статус,
		|	втЗадачи.Бренд,
		|	втЗадачи.ВидЗадачи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсторическийДефицитБренды.Бренд КАК Бренд,
		|	ИсторическийДефицитБренды.Дефицит КАК Дефицит
		|ПОМЕСТИТЬ втИсторическийДефицитБренды
		|ИЗ
		|	РегистрСведений.ИсторическийДефицитБренды КАК ИсторическийДефицитБренды
		|ГДЕ
		|	ИсторическийДефицитБренды.ТочкаДоставки = &ТочкаДоставки
		|	И ИсторическийДефицитБренды.Дефицит < 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втИсторическийДефицитБренды.Бренд КАК Бренд,
		|	втИсторическийДефицитБренды.Дефицит КАК Дефицит,
		|	МАКСИМУМ(ЕСТЬNULL(втЗадачиПредв.Задача, ЗНАЧЕНИЕ(Справочник.Задачи.ПустаяСсылка))) КАК Задача,
		|	МАКСИМУМ(ЕСТЬNULL(втЗадачиПредв.ЗадачаНаКонтроле, ЛОЖЬ)) КАК ЗадачаНаКонтроле
		|ПОМЕСТИТЬ Результат
		|ИЗ
		|	втИсторическийДефицитБренды КАК втИсторическийДефицитБренды
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЗадачиПредв КАК втЗадачиПредв
		|		ПО втИсторическийДефицитБренды.Бренд = втЗадачиПредв.Бренд
		|
		|СГРУППИРОВАТЬ ПО
		|	втИсторическийДефицитБренды.Бренд,
		|	втИсторическийДефицитБренды.Дефицит
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ЕСТЬNULL(втЗадачиПредв.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Бэклог)) = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Бэклог)
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ
		|		
		|ВЫБРАТЬ
		|	втИсторическийДефицитБренды.Бренд КАК Бренд,
		|	втИсторическийДефицитБренды.Дефицит КАК Дефицит,
		|	МАКСИМУМ(ЕСТЬNULL(втЗадачиПредв.Задача, ЗНАЧЕНИЕ(Справочник.Задачи.ПустаяСсылка))),
		|	МАКСИМУМ(ЕСТЬNULL(втЗадачиПредв.ЗадачаНаКонтроле, ЛОЖЬ))
		|ИЗ
		|	втИсторическийДефицитБренды КАК втИсторическийДефицитБренды
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЗадачиПредв КАК втЗадачиПредв
		|		ПО втИсторическийДефицитБренды.Бренд = втЗадачиПредв.Бренд
		|
		|СГРУППИРОВАТЬ ПО
		|	втИсторическийДефицитБренды.Бренд,
		|	втИсторическийДефицитБренды.Дефицит
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ЕСТЬNULL(втЗадачиПредв.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Контроль)) = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Контроль)
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Результат.Бренд КАК Бренд,
		|	Результат.Дефицит КАК Дефицит,
		|	ЕСТЬNULL(Результат.Задача.КоличествоПопыток, 0) КАК КоличествоПопыток,
		|	Результат.Задача КАК Задача,
		|	Результат.ЗадачаНаКонтроле КАК ЗадачаНаКонтроле,
		|	ВЫБОР
		|		КОГДА ЗаблокированныеЗадачи.Аналитика ЕСТЬ NULL
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ КАК ЗадачаЗаблокирована
		|ИЗ
		|	Результат КАК Результат
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗадачиИсключить КАК ЗадачиИсключить
		|		ПО Результат.Задача = ЗадачиИсключить.Задача
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаблокированныеЗадачи КАК ЗаблокированныеЗадачи
		|		ПО  ЗаблокированныеЗадачи.ТочкаДоставки  = &ТочкаДоставки
		|			И ЗаблокированныеЗадачи.ВидЗадачи = ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаПадениеБренд)
		|			И Результат.Бренд = ЗаблокированныеЗадачи.Аналитика  
		|ГДЕ
		|	ЗадачиИсключить.Задача ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дефицит";
	
	Если тзЗадачиИсключить = Неопределено Тогда
	
		тзЗадачиИсключить = Новый ТаблицаЗначений;
		тзЗадачиИсключить.Колонки.Добавить("Задача", Новый ОписаниеТипов("СправочникСсылка.Задачи"));
	
	КонецЕсли;
	            
	Запрос.УстановитьПараметр("тзЗадачиИсключить", тзЗадачиИсключить);
	Запрос.УстановитьПараметр("Задачи"           , Задачи);
	Запрос.УстановитьПараметр("ТочкаДоставки"    , ТочкаДоставки);

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ()

Функция   ПолучитьОперативныйБэклогЗадачДинамическиеДанныеНаПадениеМаркетинговаяГруппа(ТочкаДоставки, Задачи, тзЗадачиИсключить = Неопределено) 
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Задача КАК Задача,
		|	Задачи.ВидЗадачи КАК ВидЗадачи,
		|	Задачи.Наименование КАК Наименование,
		|	Задачи.Описание КАК Описание,
		|	Задачи.Бренд КАК Бренд,
		|	Задачи.МаркетинговаяГруппа КАК МаркетинговаяГруппа,
		|	Задачи.СуммаПродажПлан КАК СуммаПродажПлан,
		|	Задачи.ДатаНачала КАК ДатаНачала,
		|	Задачи.ДатаОкончания КАК ДатаОкончания,
		|	Задачи.Статус КАК Статус
		|ПОМЕСТИТЬ втЗадачи
		|ИЗ
		|	&Задачи КАК Задачи
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Задача
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	тзЗадачиИсключить.Задача КАК Задача
		|ПОМЕСТИТЬ ЗадачиИсключить
		|ИЗ
		|	&тзЗадачиИсключить КАК тзЗадачиИсключить
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЗадачи.Задача КАК Задача,
		|	втЗадачи.МаркетинговаяГруппа КАК МаркетинговаяГруппа,
		|	втЗадачи.ВидЗадачи КАК ВидЗадачи,
		|	втЗадачи.Статус КАК Статус,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА КонтрольИсполненияЗадач.Задача ЕСТЬ NULL
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) КАК ЗадачаНаКонтроле
		|ПОМЕСТИТЬ втЗадачиПредв
		|ИЗ
		|	втЗадачи КАК втЗадачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтрольИсполненияЗадач КАК КонтрольИсполненияЗадач
		|		ПО втЗадачи.Задача = КонтрольИсполненияЗадач.Задача
		|			И (КонтрольИсполненияЗадач.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Контроль))
		|ГДЕ
		|	втЗадачи.ВидЗадачи = ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаПадениеМаркетинговаяГруппа)
		|
		|СГРУППИРОВАТЬ ПО
		|	втЗадачи.Задача,
		|	втЗадачи.Статус,
		|	втЗадачи.МаркетинговаяГруппа,
		|	втЗадачи.ВидЗадачи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсторическийДефицитМаркетинговыеГруппы.МаркетинговаяГруппа КАК МаркетинговаяГруппа,
		|	ИсторическийДефицитМаркетинговыеГруппы.Дефицит КАК Дефицит
		|ПОМЕСТИТЬ втИсторическийДефицитМаркетинговыеГруппы
		|ИЗ
		|	РегистрСведений.ИсторическийДефицитМаркетинговыеГруппы КАК ИсторическийДефицитМаркетинговыеГруппы
		|ГДЕ
		|	ИсторическийДефицитМаркетинговыеГруппы.ТочкаДоставки = &ТочкаДоставки
		|	И ИсторическийДефицитМаркетинговыеГруппы.Дефицит < 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втИсторическийДефицитМаркетинговыеГруппы.МаркетинговаяГруппа КАК МаркетинговаяГруппа,
		|	втИсторическийДефицитМаркетинговыеГруппы.Дефицит КАК Дефицит,
		|	МАКСИМУМ(ЕСТЬNULL(втЗадачиПредв.Задача, ЗНАЧЕНИЕ(Справочник.Задачи.ПустаяСсылка))) КАК Задача,
		|	МАКСИМУМ(ЕСТЬNULL(втЗадачиПредв.ЗадачаНаКонтроле, ЛОЖЬ)) КАК ЗадачаНаКонтроле
		|ПОМЕСТИТЬ Результат
		|ИЗ
		|	втИсторическийДефицитМаркетинговыеГруппы КАК втИсторическийДефицитМаркетинговыеГруппы
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЗадачиПредв КАК втЗадачиПредв
		|		ПО втИсторическийДефицитМаркетинговыеГруппы.МаркетинговаяГруппа = втЗадачиПредв.МаркетинговаяГруппа
		|
		|СГРУППИРОВАТЬ ПО
		|	втИсторическийДефицитМаркетинговыеГруппы.МаркетинговаяГруппа,
		|	втИсторическийДефицитМаркетинговыеГруппы.Дефицит
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ЕСТЬNULL(втЗадачиПредв.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Бэклог)) = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Бэклог)
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	втИсторическийДефицитМаркетинговыеГруппы.МаркетинговаяГруппа КАК МаркетинговаяГруппа,
		|	втИсторическийДефицитМаркетинговыеГруппы.Дефицит КАК Дефицит,
		|	МАКСИМУМ(ЕСТЬNULL(втЗадачиПредв.Задача, ЗНАЧЕНИЕ(Справочник.Задачи.ПустаяСсылка))),
		|	МАКСИМУМ(ЕСТЬNULL(втЗадачиПредв.ЗадачаНаКонтроле, ЛОЖЬ))
		|ИЗ
		|	втИсторическийДефицитМаркетинговыеГруппы КАК втИсторическийДефицитМаркетинговыеГруппы
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЗадачиПредв КАК втЗадачиПредв
		|		ПО втИсторическийДефицитМаркетинговыеГруппы.МаркетинговаяГруппа = втЗадачиПредв.МаркетинговаяГруппа
		|
		|СГРУППИРОВАТЬ ПО
		|	втИсторическийДефицитМаркетинговыеГруппы.МаркетинговаяГруппа,
		|	втИсторическийДефицитМаркетинговыеГруппы.Дефицит
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ЕСТЬNULL(втЗадачиПредв.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Контроль)) = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачЗначения.Контроль)
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Результат.МаркетинговаяГруппа КАК МаркетинговаяГруппа,
		|	Результат.Дефицит КАК Дефицит,
		|	ЕСТЬNULL(Результат.Задача.КоличествоПопыток, 0) КАК КоличествоПопыток,
		|	Результат.Задача КАК Задача,
		|	Результат.ЗадачаНаКонтроле КАК ЗадачаНаКонтроле,
		|	ВЫБОР
		|		КОГДА ЗаблокированныеЗадачи.Аналитика ЕСТЬ NULL
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ КАК ЗадачаЗаблокирована
		|ИЗ
		|	Результат КАК Результат
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗадачиИсключить КАК ЗадачиИсключить
		|		ПО Результат.Задача = ЗадачиИсключить.Задача
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаблокированныеЗадачи КАК ЗаблокированныеЗадачи
		|		ПО  ЗаблокированныеЗадачи.ТочкаДоставки  = &ТочкаДоставки
		|			И ЗаблокированныеЗадачи.ВидЗадачи = ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаПадениеМаркетинговаяГруппа)
		|			И Результат.МаркетинговаяГруппа = ЗаблокированныеЗадачи.Аналитика  
		|ГДЕ
		|	ЗадачиИсключить.Задача ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дефицит";
	
	Если тзЗадачиИсключить = Неопределено Тогда
	
		тзЗадачиИсключить = Новый ТаблицаЗначений;
		тзЗадачиИсключить.Колонки.Добавить("Задача", Новый ОписаниеТипов("СправочникСсылка.Задачи"));
	
	КонецЕсли;
	            
	Запрос.УстановитьПараметр("тзЗадачиИсключить", тзЗадачиИсключить);
	Запрос.УстановитьПараметр("Задачи"           , Задачи);
	Запрос.УстановитьПараметр("ТочкаДоставки"    , ТочкаДоставки);

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ()

Функция   ОтправитьОтветПоЗаданию(Визит, Задача, Пользователь = Неопределено, ДатаСобытия = Неопределено, Координаты = Неопределено) Экспорт
	
	Результат = Новый Структура("Успешно, ТекстОшибки", Ложь, "");
	
	Если НЕ ПереключателиФункциональности.ОтправлятьОтветыПоЗаданиям() Тогда
		
		Результат.Успешно = Истина;
		Возврат Результат;
		
	КонецЕсли;
	
	Попытка
	
		Если Пользователь = Неопределено Тогда
			Пользователь = ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли;
		
		Если ДатаСобытия = Неопределено Тогда
			ДатаСобытия = ТекущаяДата();
		КонецЕсли;
		
		Если Координаты = Неопределено Тогда	
			Координаты = Новый Структура("Долгота, Широта", 0, 0);
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст=
		"ВЫБРАТЬ
		|	ВизитЗадачи.Ссылка.Дата КАК Дата,
		|	ВизитЗадачи.Ссылка.Номер КАК Номер,
		|	ВизитЗадачи.Ссылка.Клиент КАК Клиент,
		|	ВизитЗадачи.Ссылка.ТочкаДоставки КАК ТочкаДоставки,
		|	ВизитЗадачи.Ссылка.ТочкаДоставки.Широта КАК ТочкаДоставкиШирота,
		|	ВизитЗадачи.Ссылка.ТочкаДоставки.Долгота КАК ТочкаДоставкиДолгота,
		|	ВизитЗадачи.Задача КАК Задача,
		|	ВизитЗадачи.Статус КАК Статус,
		|	ВизитЗадачи.Комментарий КАК Ответ
		|ИЗ
		|	Документ.Визит.Задачи КАК ВизитЗадачи
		|ГДЕ
		|	ВизитЗадачи.Ссылка = &Визит
		|	И ВизитЗадачи.Задача = &Задача";
		
		Запрос.УстановитьПараметр("Визит", Визит);
		Запрос.УстановитьПараметр("Задача", Задача);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ДанныеСообщения = Новый Структура;
			
			ДанныеСообщения.Вставить("VisitDate", XMLСтрока(Выборка.Дата));
			ДанныеСообщения.Вставить("NumberDoc", XMLСтрока(Выборка.Номер));
			ДанныеСообщения.Вставить("UIDClient", XMLСтрока(Выборка.Клиент));
			ДанныеСообщения.Вставить("UIDTradePoint", XMLСтрока(Выборка.ТочкаДоставки));
			ДанныеСообщения.Вставить("LatitudeTradePoint", XMLСтрока(Выборка.ТочкаДоставкиШирота));
			ДанныеСообщения.Вставить("LongitudeTradePoint", XMLСтрока(Выборка.ТочкаДоставкиДолгота));
			ДанныеСообщения.Вставить("DistanceToTradePoint", 0);
			ДанныеСообщения.Вставить("LatitudeAnswer", Координаты.Широта);
			ДанныеСообщения.Вставить("LongitudeAnswer", Координаты.Долгота);
			ДанныеСообщения.Вставить("Task", XMLСтрока(Выборка.Задача));
			ДанныеСообщения.Вставить("TaskStatus", XMLСтрока(Выборка.Статус));
			ДанныеСообщения.Вставить("Manager", Пользователь.Наименование);
			ДанныеСообщения.Вставить("ManagerUID", XMLСтрока(Пользователь));
			ДанныеСообщения.Вставить("Answer", Выборка.Ответ);
			ДанныеСообщения.Вставить("DateDoc", XMLСтрока(Выборка.Дата));
			ДанныеСообщения.Вставить("UIDAnswer", XMLСтрока(Выборка.Задача));
			
			ДанныеСообщения = ИнтеграцияМобильноеПриложениеСервер.СериализоватьВJSON(ДанныеСообщения);
			
			Справочники.ИсходящиеСообщения.Опубликовать("report.on.task.manager.active.sales", ДанныеСообщения);
			
		КонецЦикла;
		
	Исключение
		
		Результат.ТекстОшибки = ОписаниеОшибки();
		Возврат Результат;
		
	КонецПопытки;
	
	Результат.Успешно = Истина;
	Возврат Результат;
		
КонецФункции

Функция   ДополнительныйРасчетАналитикиПараметровПоТочке(ТочкаДоставки, ДатаРасчета = Неопределено) Экспорт
	
	Результат = Новый Структура("Успешно, ТекстОшибки", Ложь, "");
	
	Если ДатаРасчета = Неопределено Тогда
	
		ДатаРасчета = НачалоДня(ТекущаяДата());
		
	КонецЕсли;
	
	Запрос       = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Визит.ТочкаДоставки КАК ТочкаДоставки,
	|	Визит.Ссылка КАК Визит,
	|	Визит.Клиент.Наименование КАК КлиентНаименование
	|ПОМЕСТИТЬ втВизитыТочкиДоставки
	|ИЗ
	|	Документ.Визит КАК Визит
	|ГДЕ
	|	Визит.Дата >= &ДатаРасчета
	|	И Визит.ПометкаУдаления = ЛОЖЬ
	|	И Визит.ТочкаДоставки = &ТочкаДоставки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВизитыТочкиДоставки.ТочкаДоставки КАК ТочкаДоставки,
	|	втВизитыТочкиДоставки.КлиентНаименование КАК КлиентНаименование
	|ИЗ
	|	втВизитыТочкиДоставки КАК втВизитыТочкиДоставки
	|
	|СГРУППИРОВАТЬ ПО
	|	втВизитыТочкиДоставки.ТочкаДоставки,
	|	втВизитыТочкиДоставки.КлиентНаименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВизитыТочкиДоставки.Визит КАК Визит
	|ИЗ
	|	втВизитыТочкиДоставки КАК втВизитыТочкиДоставки
	|
	|СГРУППИРОВАТЬ ПО
	|	втВизитыТочкиДоставки.Визит";
	
	Запрос.УстановитьПараметр("ДатаРасчета", ДатаРасчета);
	Запрос.УстановитьПараметр("ТочкаДоставки", ТочкаДоставки);
	
	РезультатЗапроса           = Запрос.ВыполнитьПакет();
	
	ТаблицаТочкиДоставки       = РезультатЗапроса[1].Выгрузить();
	ТаблицаВизиты              = РезультатЗапроса[2].Выгрузить();
	
	РасчетАналитикиТочек = УправлениеПродажамиСервер.РассчитатьАналитикуТочекДоставки(ТаблицаТочкиДоставки);
	
	Если НЕ РасчетАналитикиТочек.Успешно Тогда
		
		Результат.ТекстОшибки = РасчетАналитикиТочек.ТекстОшибки;
		Возврат Результат;
		
	КонецЕсли;
	
	РасчетДопПараметрыВизита = УправлениеПродажамиСервер.РассчитатьДополнительныеПараметрыВизита(ТаблицаВизиты);
	
	Если НЕ РасчетДопПараметрыВизита.Успешно Тогда
		
		Результат.ТекстОшибки = РасчетДопПараметрыВизита.ТекстОшибки;
		Возврат Результат;
		
	КонецЕсли;
	
	Результат.Успешно = Истина;
	
	Возврат Результат;

КонецФункции  

#КонецОбласти

#Область Скоринг
	
Функция РассчитатьСкорингТорговыхТочек(СписокМенеджеров) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТочкиДоставки.Ссылка КАК ТочкаДоставки,
		|	ТочкиДоставки.КоличествоПостов КАК КоличествоПостов,
		|	ТочкиДоставки.Владелец КАК Клиент,
		|	ТочкиДоставки.Владелец.ОсновнойМенеджерПокупателя КАК Менеджер,
		|	ТочкиДоставки.РасстояниеДоСклада КАК РасстояниеДоСклада,
		|	МАКСИМУМ(ВЫБОР
		|		КОГДА ТочкиДоставкиРасписаниеВизитов.Ссылка ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ) КАК ЕстьВРасписании,
		|	ТочкиДоставки.Владелец.Филиал КАК Филиал,
		|	ТочкиДоставки.Владелец.ДатаСозданияЮрЛицо КАК ДатаСозданияЮрЛицо,
		|	ТочкиДоставки.РасстояниеДоДопСклада КАК РасстояниеДоДопСклада
		|ПОМЕСТИТЬ вт_ТочкиДоставки
		|ИЗ
		|	Справочник.ТочкиДоставки КАК ТочкиДоставки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТочкиДоставки.РасписаниеВизитов КАК ТочкиДоставкиРасписаниеВизитов
		|		ПО ТочкиДоставки.Ссылка = ТочкиДоставкиРасписаниеВизитов.Ссылка
		|ГДЕ
		|	НЕ ТочкиДоставки.ПометкаУдаления
		|	И ТочкиДоставки.Владелец.ОсновнойМенеджерПокупателя В (&СписокМенеджеров)
		|	И ТочкиДоставки.КоличествоПостов > 0
		|	И ТочкиДоставки.КаналСбыта.Код В ИЕРАРХИИ (&МассивКодыСТО)
		|СГРУППИРОВАТЬ ПО
		|	ТочкиДоставки.Ссылка,
		|	ТочкиДоставки.КоличествоПостов,
		|	ТочкиДоставки.Владелец,
		|	ТочкиДоставки.Владелец.ОсновнойМенеджерПокупателя,
		|	ТочкиДоставки.РасстояниеДоСклада,
		|	ТочкиДоставки.Владелец.Филиал,
		|	ТочкиДоставки.Владелец.ДатаСозданияЮрЛицо,
		|	ТочкиДоставки.РасстояниеДоДопСклада
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_ТочкиДоставки.ТочкаДоставки КАК ТочкаДоставки,
		|	СУММА(ЕСТЬNULL(ВЫБОР
		|		КОГДА ПоказателиТочекДоставки.Период = &ПериодМесяц1
		|			ТОГДА ПоказателиТочекДоставки.Показатель
		|		ИНАЧЕ 0
		|	КОНЕЦ, 0)) КАК ГрейдМесяц1,
		|	СУММА(ЕСТЬNULL(ВЫБОР
		|		КОГДА ПоказателиТочекДоставки.Период = &ПериодМесяц2
		|			ТОГДА ПоказателиТочекДоставки.Показатель
		|		ИНАЧЕ 0
		|	КОНЕЦ, 0)) КАК ГрейдМесяц2,
		|	СУММА(ЕСТЬNULL(ВЫБОР
		|		КОГДА ПоказателиТочекДоставки.Период = &ПериодМесяц3
		|			ТОГДА ПоказателиТочекДоставки.Показатель
		|		ИНАЧЕ 0
		|	КОНЕЦ, 0)) КАК ГрейдМесяц3
		|ПОМЕСТИТЬ вт_ГрейдыПоМесяцам
		|ИЗ
		|	вт_ТочкиДоставки КАК вт_ТочкиДоставки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоказателиТочекДоставки КАК ПоказателиТочекДоставки
		|		ПО вт_ТочкиДоставки.ТочкаДоставки = ПоказателиТочекДоставки.ТочкаДоставки
		|		И ПоказателиТочекДоставки.ВидПоказателя = ЗНАЧЕНИЕ(Перечисление.ВидыПоказателей.Грейд)
		|		И ПоказателиТочекДоставки.Период МЕЖДУ &ПериодМесяц1 И &ПериодМесяц3
		|СГРУППИРОВАТЬ ПО
		|	вт_ТочкиДоставки.ТочкаДоставки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_ГрейдыПоМесяцам.ТочкаДоставки КАК ТочкаДоставки,
		|	ВЫБОР
		|		КОГДА вт_ГрейдыПоМесяцам.ГрейдМесяц1 МЕЖДУ вт_ГрейдыПоМесяцам.ГрейдМесяц2 И вт_ГрейдыПоМесяцам.ГрейдМесяц3
		|		ИЛИ вт_ГрейдыПоМесяцам.ГрейдМесяц1 МЕЖДУ вт_ГрейдыПоМесяцам.ГрейдМесяц3 И вт_ГрейдыПоМесяцам.ГрейдМесяц2
		|			ТОГДА вт_ГрейдыПоМесяцам.ГрейдМесяц1
		|		ИНАЧЕ ВЫБОР
		|			КОГДА вт_ГрейдыПоМесяцам.ГрейдМесяц2 МЕЖДУ вт_ГрейдыПоМесяцам.ГрейдМесяц1 И вт_ГрейдыПоМесяцам.ГрейдМесяц3
		|			ИЛИ вт_ГрейдыПоМесяцам.ГрейдМесяц2 МЕЖДУ вт_ГрейдыПоМесяцам.ГрейдМесяц3 И вт_ГрейдыПоМесяцам.ГрейдМесяц1
		|				ТОГДА вт_ГрейдыПоМесяцам.ГрейдМесяц2
		|			ИНАЧЕ вт_ГрейдыПоМесяцам.ГрейдМесяц3
		|		КОНЕЦ
		|	КОНЕЦ КАК МедианныйГрейд
		|ПОМЕСТИТЬ вт_МедианныеГрейды
		|ИЗ
		|	вт_ГрейдыПоМесяцам КАК вт_ГрейдыПоМесяцам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_ТочкиДоставки.ТочкаДоставки КАК ТочкаДоставки,
		|	вт_ТочкиДоставки.КоличествоПостов КАК КоличествоПостов,
		|	СУММА(ВЫБОР
		|		КОГДА ПродажиПоМесяцам.ПериодМесяц = &ПериодМесяц1
		|			ТОГДА ПродажиПоМесяцам.СуммаПродажи
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК СуммаПродажиМесяц1,
		|	СУММА(ВЫБОР
		|		КОГДА ПродажиПоМесяцам.ПериодМесяц = &ПериодМесяц2
		|			ТОГДА ПродажиПоМесяцам.СуммаПродажи
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК СуммаПродажиМесяц2,
		|	СУММА(ВЫБОР
		|		КОГДА ПродажиПоМесяцам.ПериодМесяц = &ПериодМесяц3
		|			ТОГДА ПродажиПоМесяцам.СуммаПродажи
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК СуммаПродажиМесяц3
		|ПОМЕСТИТЬ вт_ТочкиПродажи
		|ИЗ
		|	вт_ТочкиДоставки КАК вт_ТочкиДоставки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПродажиПоМесяцам КАК ПродажиПоМесяцам
		|		ПО вт_ТочкиДоставки.ТочкаДоставки = ПродажиПоМесяцам.ТочкаДоставки
		|		И ПродажиПоМесяцам.ПериодМесяц МЕЖДУ &ПериодМесяц1 И &ПериодМесяц3
		|СГРУППИРОВАТЬ ПО
		|	вт_ТочкиДоставки.ТочкаДоставки,
		|	вт_ТочкиДоставки.КоличествоПостов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_ТочкиПродажи.ТочкаДоставки КАК ТочкаДоставки,
		|	вт_ТочкиПродажи.КоличествоПостов КАК КоличествоПостов,
		|	ВЫБОР
		|		КОГДА вт_ТочкиПродажи.СуммаПродажиМесяц1
		|			МЕЖДУ вт_ТочкиПродажи.СуммаПродажиМесяц2 И вт_ТочкиПродажи.СуммаПродажиМесяц3
		|		ИЛИ вт_ТочкиПродажи.СуммаПродажиМесяц1 МЕЖДУ вт_ТочкиПродажи.СуммаПродажиМесяц3 И вт_ТочкиПродажи.СуммаПродажиМесяц2
		|			ТОГДА вт_ТочкиПродажи.СуммаПродажиМесяц1
		|		ИНАЧЕ ВЫБОР
		|			КОГДА вт_ТочкиПродажи.СуммаПродажиМесяц2
		|				МЕЖДУ вт_ТочкиПродажи.СуммаПродажиМесяц1 И вт_ТочкиПродажи.СуммаПродажиМесяц3
		|			ИЛИ вт_ТочкиПродажи.СуммаПродажиМесяц2
		|				МЕЖДУ вт_ТочкиПродажи.СуммаПродажиМесяц3 И вт_ТочкиПродажи.СуммаПродажиМесяц1
		|				ТОГДА вт_ТочкиПродажи.СуммаПродажиМесяц2
		|			ИНАЧЕ вт_ТочкиПродажи.СуммаПродажиМесяц3
		|		КОНЕЦ
		|	КОНЕЦ КАК МедианаПродажи,
		|	вт_МедианныеГрейды.МедианныйГрейд КАК МедианныйГрейд
		|ПОМЕСТИТЬ вт_МедианныеПродажи
		|ИЗ
		|	вт_ТочкиПродажи КАК вт_ТочкиПродажи
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_МедианныеГрейды КАК вт_МедианныеГрейды
		|		ПО вт_ТочкиПродажи.ТочкаДоставки = вт_МедианныеГрейды.ТочкаДоставки
		|СГРУППИРОВАТЬ ПО
		|	вт_ТочкиПродажи.ТочкаДоставки,
		|	вт_ТочкиПродажи.КоличествоПостов,
		|	ВЫБОР
		|		КОГДА вт_ТочкиПродажи.СуммаПродажиМесяц1
		|			МЕЖДУ вт_ТочкиПродажи.СуммаПродажиМесяц2 И вт_ТочкиПродажи.СуммаПродажиМесяц3
		|		ИЛИ вт_ТочкиПродажи.СуммаПродажиМесяц1 МЕЖДУ вт_ТочкиПродажи.СуммаПродажиМесяц3 И вт_ТочкиПродажи.СуммаПродажиМесяц2
		|			ТОГДА вт_ТочкиПродажи.СуммаПродажиМесяц1
		|		ИНАЧЕ ВЫБОР
		|			КОГДА вт_ТочкиПродажи.СуммаПродажиМесяц2
		|				МЕЖДУ вт_ТочкиПродажи.СуммаПродажиМесяц1 И вт_ТочкиПродажи.СуммаПродажиМесяц3
		|			ИЛИ вт_ТочкиПродажи.СуммаПродажиМесяц2
		|				МЕЖДУ вт_ТочкиПродажи.СуммаПродажиМесяц3 И вт_ТочкиПродажи.СуммаПродажиМесяц1
		|				ТОГДА вт_ТочкиПродажи.СуммаПродажиМесяц2
		|			ИНАЧЕ вт_ТочкиПродажи.СуммаПродажиМесяц3
		|		КОНЕЦ
		|	КОНЕЦ,
		|	вт_МедианныеГрейды.МедианныйГрейд
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_МедианныеПродажи.ТочкаДоставки КАК ТочкаДоставки,
		|	ВЫРАЗИТЬ((60000 * вт_МедианныеПродажи.КоличествоПостов - вт_МедианныеПродажи.МедианаПродажи) / 60000 *
		|		ЕСТЬNULL(НастройкиСкорингаНастройкаБаллов.КоличествоБаллов, 0) КАК ЧИСЛО(15, 2)) КАК Потенциал
		|ПОМЕСТИТЬ вт_Потенциал
		|ИЗ
		|	вт_МедианныеПродажи КАК вт_МедианныеПродажи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиСкоринга.НастройкаБаллов КАК НастройкиСкорингаНастройкаБаллов
		|		ПО НастройкиСкорингаНастройкаБаллов.Ссылка = ЗНАЧЕНИЕ(Справочник.НастройкиСкоринга.Потенциал)
		|		И вт_МедианныеПродажи.МедианныйГрейд = НастройкиСкорингаНастройкаБаллов.МинимальныйПоказатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_МедианныеГрейды.ТочкаДоставки КАК ТочкаДоставки,
		|	НастройкиСкорингаНастройкаБаллов.КоличествоБаллов КАК СкорингГрейд
		|ПОМЕСТИТЬ вт_СкорингГрейд
		|ИЗ
		|	вт_МедианныеГрейды КАК вт_МедианныеГрейды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиСкоринга.НастройкаБаллов КАК НастройкиСкорингаНастройкаБаллов
		|		ПО НастройкиСкорингаНастройкаБаллов.Ссылка = Значение(Справочник.НастройкиСкоринга.Грейд)
		|		И вт_МедианныеГрейды.МедианныйГрейд = НастройкиСкорингаНастройкаБаллов.МинимальныйПоказатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_ТочкиПродажи.ТочкаДоставки КАК ТочкаДоставки,
		|	вт_ТочкиПродажи.СуммаПродажиМесяц1 КАК СуммаПродажиМесяц1,
		|	вт_ТочкиПродажи.СуммаПродажиМесяц2 КАК СуммаПродажиМесяц2,
		|	вт_ТочкиПродажи.СуммаПродажиМесяц3 КАК СуммаПродажиМесяц3,
		|	вт_ТочкиПродажи.СуммаПродажиМесяц1 + вт_ТочкиПродажи.СуммаПродажиМесяц2 + вт_ТочкиПродажи.СуммаПродажиМесяц3 КАК
		|		СуммаПродажи,
		|	ВЫБОР
		|		КОГДА вт_ТочкиПродажи.СуммаПродажиМесяц1 - вт_ТочкиПродажи.СуммаПродажиМесяц2 > 0
		|			ТОГДА вт_ТочкиПродажи.СуммаПродажиМесяц1 - вт_ТочкиПродажи.СуммаПродажиМесяц2
		|		ИНАЧЕ -(вт_ТочкиПродажи.СуммаПродажиМесяц1 - вт_ТочкиПродажи.СуммаПродажиМесяц2)
		|	КОНЕЦ КАК РазницаПродажМесяц1Месяц2,
		|	ВЫБОР
		|		КОГДА вт_ТочкиПродажи.СуммаПродажиМесяц2 - вт_ТочкиПродажи.СуммаПродажиМесяц3 > 0
		|			ТОГДА вт_ТочкиПродажи.СуммаПродажиМесяц2 - вт_ТочкиПродажи.СуммаПродажиМесяц3
		|		ИНАЧЕ -(вт_ТочкиПродажи.СуммаПродажиМесяц2 - вт_ТочкиПродажи.СуммаПродажиМесяц3)
		|	КОНЕЦ КАК РазницаПродажМесяц2Месяц3,
		|	ВЫБОР
		|		КОГДА вт_ТочкиПродажи.СуммаПродажиМесяц1 - вт_ТочкиПродажи.СуммаПродажиМесяц3 > 0
		|			ТОГДА вт_ТочкиПродажи.СуммаПродажиМесяц1 - вт_ТочкиПродажи.СуммаПродажиМесяц3
		|		ИНАЧЕ -(вт_ТочкиПродажи.СуммаПродажиМесяц1 - вт_ТочкиПродажи.СуммаПродажиМесяц3)
		|	КОНЕЦ КАК РазницаПродажМесяц1Месяц3
		|ПОМЕСТИТЬ вт_РазницыПродаж
		|ИЗ
		|	вт_ТочкиПродажи КАК вт_ТочкиПродажи
		|ГДЕ
		|	вт_ТочкиПродажи.СуммаПродажиМесяц1 + вт_ТочкиПродажи.СуммаПродажиМесяц2 + вт_ТочкиПродажи.СуммаПродажиМесяц3 > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_РазницыПродаж.ТочкаДоставки КАК ТочкаДоставки,
		|	ВЫРАЗИТЬ((вт_РазницыПродаж.РазницаПродажМесяц1Месяц2 + вт_РазницыПродаж.РазницаПродажМесяц2Месяц3 +
		|		вт_РазницыПродаж.РазницаПродажМесяц1Месяц3) / (3 * вт_РазницыПродаж.СуммаПродажи) КАК ЧИСЛО(15, 2)) КАК
		|		КоэффициентПостоянства
		|ПОМЕСТИТЬ вт_КоэффициентПостоянства
		|ИЗ
		|	вт_РазницыПродаж КАК вт_РазницыПродаж
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_КоэффициентПостоянства.ТочкаДоставки КАК ТочкаДоставки,
		|	ЕСТЬNULL(НастройкиСкорингаНастройкаБаллов.КоличествоБаллов, 0) КАК КоличествоБаллов,
		|	вт_КоэффициентПостоянства.КоэффициентПостоянства КАК КоэффициентПостоянства
		|ПОМЕСТИТЬ вт_СкорингКоэфПостоянства
		|ИЗ
		|	вт_КоэффициентПостоянства КАК вт_КоэффициентПостоянства
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиСкоринга.НастройкаБаллов КАК НастройкиСкорингаНастройкаБаллов
		|		ПО НастройкиСкорингаНастройкаБаллов.Ссылка = ЗНАЧЕНИЕ(Справочник.НастройкиСкоринга.КоэффициентПостоянства)
		|		И вт_КоэффициентПостоянства.КоэффициентПостоянства
		|			МЕЖДУ НастройкиСкорингаНастройкаБаллов.МинимальныйПоказатель И НастройкиСкорингаНастройкаБаллов.МаксимальныйПоказатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_ТочкиДоставки.ТочкаДоставки КАК ТочкаДоставки,
		|	ЕСТЬNULL(НастройкиСкорингаНастройкаБаллов.КоличествоБаллов, 0) КАК КоличествоБаллов,
		|	ЕСТЬNULL(НастройкиСкорингаНастройкаБаллов1.КоличествоБаллов, 0) КАК КоличествоБалловДопСклад
		|ПОМЕСТИТЬ вт_СкорингУдаленностьОтСклада
		|ИЗ
		|	вт_ТочкиДоставки КАК вт_ТочкиДоставки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиСкоринга.НастройкаБаллов КАК НастройкиСкорингаНастройкаБаллов
		|		ПО НастройкиСкорингаНастройкаБаллов.Ссылка = ЗНАЧЕНИЕ(Справочник.НастройкиСкоринга.УдаленностьОтСклада)
		|		И вт_ТочкиДоставки.РасстояниеДоСклада
		|			МЕЖДУ НастройкиСкорингаНастройкаБаллов.МинимальныйПоказатель И НастройкиСкорингаНастройкаБаллов.МаксимальныйПоказатель
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиСкоринга.НастройкаБаллов КАК НастройкиСкорингаНастройкаБаллов1
		|		ПО НастройкиСкорингаНастройкаБаллов1.Ссылка = ЗНАЧЕНИЕ(Справочник.НастройкиСкоринга.УдаленностьОтСклада)
		|		И вт_ТочкиДоставки.РасстояниеДоДопСклада
		|			МЕЖДУ НастройкиСкорингаНастройкаБаллов1.МинимальныйПоказатель И НастройкиСкорингаНастройкаБаллов1.МаксимальныйПоказатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_ТочкиДоставки.ТочкаДоставки КАК ТочкаДоставки,
		|	НАЧАЛОПЕРИОДА(вт_ТочкиДоставки.ДатаСозданияЮрЛицо, ДЕНЬ) КАК ДатаСозданияЮрЛицо
		|ПОМЕСТИТЬ вт_ТочкиНовые
		|ИЗ
		|	вт_ТочкиДоставки КАК вт_ТочкиДоставки
		|ГДЕ
		|	вт_ТочкиДоставки.ДатаСозданияЮрЛицо >= &ПериодМесяц2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_ТочкиНовые.ТочкаДоставки КАК ТочкаДоставки,
		|	РАЗНОСТЬДАТ(вт_ТочкиНовые.ДатаСозданияЮрЛицо, &ТекущаяДата, ДЕНЬ) КАК КоличествоДнейОнбординг,
		|	КОЛИЧЕСТВО(ПродажиПоДнямОбщие.ДатаПродажи) КАК КоличествоПродаж,
		|	СУММА(ПродажиПоДнямОбщие.СуммаПродажи) КАК СуммаПродажи
		|ПОМЕСТИТЬ вт_ТочкиОнбординг
		|ИЗ
		|	вт_ТочкиНовые КАК вт_ТочкиНовые
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПродажиПоДнямОбщие КАК ПродажиПоДнямОбщие
		|		ПО вт_ТочкиНовые.ДатаСозданияЮрЛицо <= ПродажиПоДнямОбщие.ДатаПродажи
		|		И вт_ТочкиНовые.ТочкаДоставки = ПродажиПоДнямОбщие.ТочкаДоставки
		|ГДЕ
		|	вт_ТочкиНовые.ДатаСозданияЮрЛицо >= &ТекущаяДатаМинусNДней
		|СГРУППИРОВАТЬ ПО
		|	вт_ТочкиНовые.ТочкаДоставки,
		|	РАЗНОСТЬДАТ(вт_ТочкиНовые.ДатаСозданияЮрЛицо, &ТекущаяДата, ДЕНЬ)
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(ПродажиПоДнямОбщие.ДатаПродажи) < 5
		|	И СУММА(ПродажиПоДнямОбщие.СуммаПродажи) < 20000
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_ТочкиОнбординг.ТочкаДоставки КАК ТочкаДоставки,
		|	вт_ТочкиОнбординг.КоличествоДнейОнбординг КАК КоличествоДнейОнбординг,
		|	вт_ТочкиОнбординг.КоличествоПродаж КАК КоличествоПродаж,
		|	вт_ТочкиОнбординг.СуммаПродажи КАК СуммаПродажи,
		|	ЕСТЬNULL(НастройкиСкорингаНастройкаБаллов.КоличествоБаллов, 0) КАК КоличествоБаллов
		|ПОМЕСТИТЬ вт_ОнбордингСкоринг
		|ИЗ
		|	вт_ТочкиОнбординг КАК вт_ТочкиОнбординг
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиСкоринга.НастройкаБаллов КАК НастройкиСкорингаНастройкаБаллов
		|		ПО НастройкиСкорингаНастройкаБаллов.Ссылка = ЗНАЧЕНИЕ(Справочник.НастройкиСкоринга.Онбоардинг)
		|		И вт_ТочкиОнбординг.КоличествоДнейОнбординг
		|			МЕЖДУ НастройкиСкорингаНастройкаБаллов.МинимальныйПоказатель И НастройкиСкорингаНастройкаБаллов.МаксимальныйПоказатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_ТочкиДоставки.Филиал КАК Филиал,
		|	вт_ТочкиДоставки.ТочкаДоставки КАК ТочкаДоставки,
		|	вт_ТочкиДоставки.Менеджер КАК Менеджер,
		|	вт_ТочкиДоставки.ЕстьВРасписании КАК ЕстьВРасписании,
		|	ЕСТЬNULL(вт_МедианныеПродажи.МедианныйГрейд, 0) КАК МедианныйГрейд,
		|	ЕСТЬNULL(вт_СкорингГрейд.СкорингГрейд, 0) КАК СкорингГрейд,
		|	ЕСТЬNULL(вт_СкорингКоэфПостоянства.КоэффициентПостоянства, 0) КАК КоэффициентПостоянства,
		|	ЕСТЬNULL(вт_СкорингКоэфПостоянства.КоличествоБаллов, 0) КАК СкорингКоэфПостоянства,
		|	вт_ТочкиДоставки.РасстояниеДоСклада КАК РасстояниеДоСклада,
		|	вт_ТочкиДоставки.РасстояниеДоДопСклада КАК РасстояниеДоДопСклада,
		|	ЕСТЬNULL(вт_СкорингУдаленностьОтСклада.КоличествоБаллов, 0) КАК СкорингУдаленность,
		|	ЕСТЬNULL(вт_СкорингУдаленностьОтСклада.КоличествоБалловДопСклад, 0) КАК СкорингУдаленностьДопСклад,
		|	ЕСТЬNULL(вт_Потенциал.Потенциал, 0) КАК СкорингПотенциал,
		|	ЕСТЬNULL(вт_ОнбордингСкоринг.КоличествоДнейОнбординг, 0) КАК КоличествоДнейОнбординг,
		|	ЕСТЬNULL(вт_ОнбордингСкоринг.КоличествоБаллов, 0) КАК СкорингОнбординг,
		|	ЕСТЬNULL(вт_СкорингГрейд.СкорингГрейд, 0) + ЕСТЬNULL(вт_СкорингКоэфПостоянства.КоличествоБаллов, 0) +
		|		ЕСТЬNULL(вт_СкорингУдаленностьОтСклада.КоличествоБаллов, 0) + ЕСТЬNULL(вт_Потенциал.Потенциал, 0) +
		|		ЕСТЬNULL(вт_ОнбордингСкоринг.КоличествоБаллов, 0) + ЕСТЬNULL(вт_СкорингУдаленностьОтСклада.КоличествоБалловДопСклад,
		|		0) КАК ОбщийБалл,
		|	ЕСТЬNULL(вт_МедианныеПродажи.МедианаПродажи, 0) КАК МедианаПродажи
		|ИЗ
		|	вт_ТочкиДоставки КАК вт_ТочкиДоставки
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_Потенциал КАК вт_Потенциал
		|		ПО вт_ТочкиДоставки.ТочкаДоставки = вт_Потенциал.ТочкаДоставки
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_СкорингГрейд КАК вт_СкорингГрейд
		|		ПО вт_ТочкиДоставки.ТочкаДоставки = вт_СкорингГрейд.ТочкаДоставки
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_СкорингКоэфПостоянства КАК вт_СкорингКоэфПостоянства
		|		ПО вт_ТочкиДоставки.ТочкаДоставки = вт_СкорингКоэфПостоянства.ТочкаДоставки
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_СкорингУдаленностьОтСклада КАК вт_СкорингУдаленностьОтСклада
		|		ПО вт_ТочкиДоставки.ТочкаДоставки = вт_СкорингУдаленностьОтСклада.ТочкаДоставки
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_МедианныеПродажи КАК вт_МедианныеПродажи
		|		ПО вт_ТочкиДоставки.ТочкаДоставки = вт_МедианныеПродажи.ТочкаДоставки
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_ОнбордингСкоринг КАК вт_ОнбордингСкоринг
		|		ПО вт_ТочкиДоставки.ТочкаДоставки = вт_ОнбордингСкоринг.ТочкаДоставки
		|УПОРЯДОЧИТЬ ПО
		|	ОбщийБалл УБЫВ";
	
	КаналыСбытаКодыСТО = УправлениеПродажамиСерверПовтИсп.ПолучитьЗначениеНастройкиИнформационнойБазы("КаналыСбытаКодыСТО");
	МассивКодыСТО      = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КаналыСбытаКодыСТО, ";");
	
	ТекущаяДата = НачалоДня(ТекущаяДата());
	
	ТекущийМесяц = НачалоМесяца(ТекущаяДата);
	
	ПериодМесяц1 = ДобавитьМесяц(ТекущийМесяц, -3);
	ПериодМесяц2 = ДобавитьМесяц(ТекущийМесяц, -2);
	ПериодМесяц3 = ДобавитьМесяц(ТекущийМесяц, -1);
	
	Запрос.УстановитьПараметр("СписокМенеджеров", СписокМенеджеров);
	Запрос.УстановитьПараметр("МассивКодыСТО", МассивКодыСТО);
	Запрос.УстановитьПараметр("ПериодМесяц1", ПериодМесяц1);
	Запрос.УстановитьПараметр("ПериодМесяц2", ПериодМесяц2);
	Запрос.УстановитьПараметр("ПериодМесяц3", ПериодМесяц3);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("ТекущаяДатаМинусNДней", ТекущаяДата - 60*60*24*90);
	
	ТаблицаСкоринг = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаСкоринг;
	
КонецФункции
	
	
#КонецОбласти



