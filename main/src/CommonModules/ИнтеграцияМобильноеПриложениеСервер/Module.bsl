
#Область ПрограммныйИнтерфейс

Функция   ВыполнитьОбменМобильноеПриложение(СтруктураТелоЗапроса) Экспорт

	// Проверка Запроса
	
	Если ТипЗнч(СтруктураТелоЗапроса) <> Тип("Структура") Тогда
		
		ЗаписьЖурналаРегистрации("ExecuteExchange.ПроверкаЗапроса", УровеньЖурналаРегистрации.Ошибка, , , Строка(СтруктураТелоЗапроса));
		ВызватьИсключение "Запрос не обработан";
		
	КонецЕсли;

	// Определение результата
	
	Результат    = Новый Структура;
	Результат.Вставить("DeviceVerified", Ложь);	
	Результат.Вставить("LatestVersion" , Ложь);
		
	МассивОшибок = Новый Массив;
	
	// Проверка версии МП
	
	ВерсияМобильногоПриложения = УправлениеПродажамиСерверПовтИсп.ПолучитьЗначениеНастройкиИнформационнойБазы("АктуальнаяВерсияМобильногоПриложения");
	
	Если СтруктураТелоЗапроса.Свойство("Version") И НЕ ПустаяСтрока(ВерсияМобильногоПриложения) И СтруктураТелоЗапроса.Version = ВерсияМобильногоПриложения Тогда
		
		Результат.LatestVersion = Истина;
		
	Иначе
		
		Возврат Результат;
		
	КонецЕсли;
	
	// Верификация устройства                                   	
	
	Узел       = ПланыОбмена.МобильноеПриложение.ПустаяСсылка();
	Устройство = ДанныеМобильногоУстройства(СтруктураТелоЗапроса);
	
	Если Устройство.УстройствоВерифицировано Тогда
		
		Результат.DeviceVerified = Истина; 		
		Узел                     = Устройство.Узел;   		
	
	Иначе
	
		Возврат Результат;	
	
	КонецЕсли;
	
	ВремяПользователя = ТекущаяДата() + ((Узел.ЧасовойПояс - 7)*60*60);
	
	Результат.Вставить("CurrentTime", ВремяПользователя);
	
	// Прием данных

	Если СтруктураТелоЗапроса.Свойство("MobileData") Тогда
	
		ВыполнитьПриемДанныхМобильноеПриложение(Результат, Узел, СтруктураТелоЗапроса.MobileData, МассивОшибок);
		
	Иначе
		
		ДобавитьОшибкуОбменаСервераВМассив(МассивОшибок, "Не определена структура ""MobileData""");
			
	КонецЕсли;
	
	// Очистка данных к отправке
	
	Если СтруктураТелоЗапроса.Свойство("ServerData") Тогда
		
		Попытка
		
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, СтруктураТелоЗапроса.ServerData.ReceivedMessageNumber);	
		
		Исключение
			
			ДобавитьОшибкуОбменаСервераВМассив(МассивОшибок, ОписаниеОшибки());
					
		КонецПопытки;
		
	Иначе
		
		ДобавитьОшибкуОбменаСервераВМассив(МассивОшибок, "Не определена структура ""ServerData""");	
	
	КонецЕсли;
	
	// Отправка данных

	ВыполнитьОтправкуДанныхМобильноеПриложение(Результат, Узел, МассивОшибок);
	
	// Фиксация ошибок
	
	Попытка
		
		Ит         = 1;
		ДатаОшибки = ТекущаяДата();
		
		Набор = РегистрыСведений.ОшибкиОбменаСервер.СоздатьНаборЗаписей();
		Набор.Отбор.Узел.Установить(Узел);
		Набор.Отбор.ДатаОшибки.Установить(ДатаОшибки);
		
		Для каждого ТекОшибка Из МассивОшибок Цикл
		
			Запись                = Набор.Добавить();
			Запись.Узел           = Узел;
			Запись.ДатаОшибки     = ДатаОшибки;
			Запись.НомерОшибки    = Ит;
			Запись.ОписаниеОшибки = ТекОшибка.ОписаниеОшибки; 			
			Запись.ТекстСообщения = ТекОшибка.ТекстСообщения; 
			
			Ит = Ит + 1;
			
		КонецЦикла;
		
		Набор.Записать();	
		
	Исключение
		
		ЗаписьЖурналаРегистрации("ExecuteExchange.ОшибкиОбменаСервер", УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());
		
	КонецПопытки;  	
	
	// Результат
	
	Возврат Результат;
	
КонецФункции // ()

Функция   ПолучитьДанныеМП(ЗапросСтрока) Экспорт

	// Проверка Запроса
	
	Попытка
	
		СтруктураТелоЗапроса = ПолучитьСтруктуруЗапроса(ЗапросСтрока);	
	
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		ЗаписьЖурналаРегистрации("SendMobileData.РазборЗапроса", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
		Возврат Ложь;
		
	КонецПопытки;   	
	
	Если ТипЗнч(СтруктураТелоЗапроса) <> Тип("Структура") Тогда
		
		ЗаписьЖурналаРегистрации("SendMobileData.ПроверкаЗапроса", УровеньЖурналаРегистрации.Ошибка, , , "Данные обработаны некорректно");
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// Проверка версии МП
	
	ВерсияМобильногоПриложения = УправлениеПродажамиСерверПовтИсп.ПолучитьЗначениеНастройкиИнформационнойБазы("АктуальнаяВерсияМобильногоПриложения");
	
	Если НЕ СтруктураТелоЗапроса.Свойство("Version") ИЛИ ПустаяСтрока(ВерсияМобильногоПриложения) ИЛИ СтруктураТелоЗапроса.Version <> ВерсияМобильногоПриложения Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// Верификация устройства                                   	
	
	Узел       = ПланыОбмена.МобильноеПриложение.ПустаяСсылка();
	Устройство = ДанныеМобильногоУстройства(СтруктураТелоЗапроса);
	
	Если НЕ Устройство.УстройствоВерифицировано Тогда
		
		Возврат Ложь;	
		
	Иначе
			
		Узел = Устройство.Узел;	
	
	КонецЕсли;
	
	// Прием данных

	Если СтруктураТелоЗапроса.Свойство("MobileData") Тогда
		
		Попытка
			
			ДанныеМП   = СериализоватьВJSON(СтруктураТелоЗапроса.MobileData);	
			
			МЗ = РегистрыСведений.ДанныеМобильногоПриложения.СоздатьМенеджерЗаписи();
			
			МЗ.Узел = Узел;
			МЗ.Данные = ДанныеМП;
			МЗ.ДатаОтправки = ТекущаяДата();
			
			МЗ.Записать();
			
		Исключение
			
			ЗаписьЖурналаРегистрации("SendMobileData.ОшибкиОбменаСервер", УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());
			
			Возврат Ложь;	
			
		КонецПопытки;  	
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// Результат
	
	Возврат Истина;
	
КонецФункции // ()

Функция   ВерифицироватьУстройство(IMEI, Пользователь, ЧасовойПояс) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Успешно"    , Ложь);
	Результат.Вставить("ТекстОшибки", "");
	
	Запрос       = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НеверифицированныеУстройства.IMEI КАК IMEI,
		|	НеверифицированныеУстройства.Пользователь КАК Пользователь,
		|	НеверифицированныеУстройства.НаименованиеУстройства КАК НаименованиеУстройства,
		|	НеверифицированныеУстройства.ДатаПоявления КАК ДатаПоявления
		|ПОМЕСТИТЬ втПредв
		|ИЗ
		|	РегистрСведений.НеверифицированныеУстройства КАК НеверифицированныеУстройства
		|ГДЕ
		|	НеверифицированныеУстройства.IMEI = &IMEI
		|	И НеверифицированныеУстройства.Пользователь = &Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПредв.IMEI КАК IMEI,
		|	втПредв.Пользователь КАК Пользователь,
		|	втПредв.НаименованиеУстройства КАК НаименованиеУстройства,
		|	втПредв.ДатаПоявления КАК ДатаПоявления,
		|	ВЫБОР
		|		КОГДА МобильноеПриложение.Ссылка ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ДанныеВерифицированы
		|ИЗ
		|	втПредв КАК втПредв
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
		|		ПО втПредв.IMEI = МобильноеПриложение.IMEI
		|			И (втПредв.Пользователь = МобильноеПриложение.Пользователь
		|				И МобильноеПриложение.ПометкаУдаления = ЛОЖЬ)";
	
	Запрос.УстановитьПараметр("IMEI"        , IMEI);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		Если Выборка.ДанныеВерифицированы Тогда
		
			Результат.ТекстОшибки = "Устройство уже верифицировано";	
		    ИзменитьНеверифицированныеУстройства(IMEI, Пользователь, Истина);
			
		Иначе
		
			Попытка
			
				НачатьТранзакцию();
				
				НовыйУзел                        = ПланыОбмена.МобильноеПриложение.СоздатьУзел();
				НовыйУзел.IMEI                   = Выборка.IMEI;
				НовыйУзел.Пользователь           = Выборка.Пользователь;
				НовыйУзел.НаименованиеУстройства = Выборка.НаименованиеУстройства;
				НовыйУзел.Наименование           = Строка(Выборка.Пользователь) + " - " + Выборка.IMEI;
				НовыйУзел.ЧасовойПояс            = ЧасовойПояс;

				НовыйУзел.УстановитьНовыйКод();
				
				НовыйУзел.Записать();
				
				ИзменитьНеверифицированныеУстройства(IMEI, Пользователь, Истина);
				
				ЗарегистрироватьВсеДанныеНаУзле(НовыйУзел.Ссылка);
				
				Результат.Успешно = Истина;
				
				ЗафиксироватьТранзакцию();
			
			Исключение
				
				ОтменитьТранзакцию();
				
				Результат.ТекстОшибки = ОписаниеОшибки();
			
			КонецПопытки;
		
		КонецЕсли;	
	
	Иначе
	
		Результат.ТекстОшибки = "Данные не найдены";	
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ()

Функция   УзлыОбменаПользователя(Пользователь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
	
		Возврат Новый Массив;	
	
	КонецЕсли;
	
	Запрос       = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МобильноеПриложение.Ссылка КАК Ссылка
		|ИЗ
		|	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
		|ГДЕ
		|	МобильноеПриложение.Пользователь = &Пользователь
		|	И МобильноеПриложение.ПометкаУдаления = ЛОЖЬ
		|	И МобильноеПриложение.Заблокирован = ЛОЖЬ
		|	И МобильноеПриложение.ЭтотУзел = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции // УзлыОбменаПользователя()

Процедура ИзменитьНеверифицированныеУстройства(IMEI, Пользователь, Удалить = Ложь, НаименованиеУстройства = "", Заблокирован = Ложь) Экспорт 

	Набор = РегистрыСведений.НеверифицированныеУстройства.СоздатьНаборЗаписей();
	Набор.Отбор.IMEI.Установить(IMEI);
	Набор.Отбор.Пользователь.Установить(Пользователь);

	Набор.ДополнительныеСвойства.Вставить("ЗаписьРазрешена", Истина);
	
	Если Удалить = Ложь Тогда
	
		Запись = Набор.Добавить();
		
		Запись.IMEI = IMEI;
		Запись.Пользователь = Пользователь;
		Запись.НаименованиеУстройства = НаименованиеУстройства;
		Запись.ДатаПоявления = ТекущаяДата();
	    Запись.Заблокирован = Заблокирован;

	КонецЕсли;
	
	Набор.Записать();

КонецПроцедуры // ()

Функция   ПринятьПовторноОшибкиОбменаСервер(ДанныеКОбработке) Экспорт

	БазаТестирование = УправлениеПродажамиСерверПовтИсп.ПолучитьЗначениеНастройкиИнформационнойБазы("Тестирование");
	СрокиКИЗ         = УправлениеПродажамиСерверПовтИсп.ПолучитьЗначениеНастройкиИнформационнойБазы("СрокиКИЗ");
	
	МинСрокКИЗ       = 0;
	Для Каждого ТекСрокКИЗ Из СрокиКИЗ Цикл
	
		Если МинСрокКИЗ = 0 ИЛИ ТекСрокКИЗ < МинСрокКИЗ Тогда
		
			МинСрокКИЗ = ТекСрокКИЗ;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Результат = Новый Массив;
	
	Для каждого ТекущаяОшибка Из ДанныеКОбработке Цикл
		
		ОбработкаОшибки = Новый Структура;
		ОбработкаОшибки.Вставить("Узел"       , ТекущаяОшибка.Узел);
		ОбработкаОшибки.Вставить("ДатаОшибки" , ТекущаяОшибка.ДатаОшибки);
		ОбработкаОшибки.Вставить("НомерОшибки", ТекущаяОшибка.НомерОшибки);
		ОбработкаОшибки.Вставить("Успешно"    , Ложь);
		ОбработкаОшибки.Вставить("Описание"   , "");
		
		Попытка
		
			СтруктураСообщения = ПолучитьСтруктуруЗапроса(ТекущаяОшибка.ТекстСообщения);
			
			Если СтруктураСообщения.Type = "TaskStatus" Тогда
				
				Визит  = Документы.Визит.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураСообщения.Data.VisitGUID));
				Задача = Справочники.Задачи.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураСообщения.Data.TaskGUID));
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	КонтрольИсполненияЗадач.Задача КАК Задача
				|ИЗ
				|	РегистрСведений.КонтрольИсполненияЗадач КАК КонтрольИсполненияЗадач
				|ГДЕ
				|	КонтрольИсполненияЗадач.Задача = &Задача
				|	И КонтрольИсполненияЗадач.Визит = &Визит";
				
				Запрос.УстановитьПараметр("Визит" , Визит);
				Запрос.УстановитьПараметр("Задача", Задача);
				
				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ РезультатЗапроса.Пустой() Тогда
				
					ОбработкаОшибки.Описание = "Задача в КИЗ";	
					Результат.Добавить(ОбработкаОшибки);
					
					УдалитьЗаписьОшибокСервера(ТекущаяОшибка.Узел, ТекущаяОшибка.ДатаОшибки, ТекущаяОшибка.НомерОшибки);
						
					ОбработкаОшибки.Успешно = Истина;
					
					Продолжить;  	
				
				КонецЕсли;  				
								
				Если НачалоДня(XMLЗначение(Тип("Дата"), СтруктураСообщения.Data.Date)) <> НачалоДня(Визит.Дата) Тогда
					
					ОбработкаОшибки.Описание = "Дата события не совпадает с датой визита";	
					Результат.Добавить(ОбработкаОшибки);
					Продолжить; 					
					
				КонецЕсли;	
				
				Если БазаТестирование = Ложь И Цел((НачалоДня(ТекущаяДата()) - НачалоДня(Визит.Дата))/86400) > МинСрокКИЗ Тогда
				
					ОбработкаОшибки.Описание = "Истек срок приема ошибки";	
					Результат.Добавить(ОбработкаОшибки);
					
					УдалитьЗаписьОшибокСервера(ТекущаяОшибка.Узел, ТекущаяОшибка.ДатаОшибки, ТекущаяОшибка.НомерОшибки);
						
					ОбработкаОшибки.Успешно = Истина;
					
					Продолжить; 
						
				КонецЕсли;
				
				Запрос       = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 3
				|	СтатусыЗадач.Период КАК Период,
				|	СтатусыЗадач.Задача КАК Задача,
				|	СтатусыЗадач.Статус КАК Статус,
				|	СтатусыЗадач.Визит КАК Визит
				|ИЗ
				|	РегистрСведений.СтатусыЗадач КАК СтатусыЗадач
				|ГДЕ
				|	СтатусыЗадач.Задача = &Задача
				|
				|УПОРЯДОЧИТЬ ПО
				|	Период УБЫВ";
				
				Запрос.УстановитьПараметр("Задача", Задача);
				
				ПоследниеСтатусыЗадачи = Запрос.Выполнить().Выгрузить();
				КоличествоЗаписей      = ПоследниеСтатусыЗадачи.Количество();
				
				Если КоличествоЗаписей <> 0 Тогда
					
					Если ПоследниеСтатусыЗадачи[0].Статус = Перечисления.СтатусыЗадачЗначения.Назначена И ПоследниеСтатусыЗадачи[0].Визит = Визит Тогда // По задаче нет ответов
						
						НачатьТранзакцию();
						
						ПринятьОбъектИзменениеСтатуса(СтруктураСообщения.Data, ТекущаяОшибка.Узел);	
						
						УдалитьЗаписьОшибокСервера(ТекущаяОшибка.Узел, ТекущаяОшибка.ДатаОшибки, ТекущаяОшибка.НомерОшибки);
						
						ЗафиксироватьТранзакцию();
							
						ОбработкаОшибки.Успешно = Истина;
					
					ИначеЕсли КоличествоЗаписей >= 2 Тогда // У закрытой по регламенту задачи в регистре обязательно не менее 2 статусов должно быть
						
						УбратьПоследнийСтатус = (ПоследниеСтатусыЗадачи[0].Статус = Перечисления.СтатусыЗадачЗначения.НеВыполнена И ПоследниеСтатусыЗадачи[0].Визит = Визит
							И ПоследниеСтатусыЗадачи[1].Статус = Перечисления.СтатусыЗадачЗначения.Назначена И ПоследниеСтатусыЗадачи[1].Визит = Визит); 
						
						УбратьДваПоследнихСтатуса = (ПоследниеСтатусыЗадачи.Количество() = 3 И ПоследниеСтатусыЗадачи[0].Статус = Перечисления.СтатусыЗадачЗначения.Бэклог 
							И ПоследниеСтатусыЗадачи[1].Статус = Перечисления.СтатусыЗадачЗначения.НеВыполнена И ПоследниеСтатусыЗадачи[1].Визит = Визит
							И ПоследниеСтатусыЗадачи[2].Статус = Перечисления.СтатусыЗадачЗначения.Назначена И ПоследниеСтатусыЗадачи[2].Визит = Визит); 
						
						СтатусУжеУстановлен = (ПоследниеСтатусыЗадачи[0].Статус = Перечисления.СтатусыЗадачЗначения.Выполнена И ПоследниеСтатусыЗадачи[0].Визит = Визит
							И ПоследниеСтатусыЗадачи[1].Статус = Перечисления.СтатусыЗадачЗначения.Назначена И ПоследниеСтатусыЗадачи[1].Визит = Визит); 
						
						Если СтатусУжеУстановлен Тогда
							
							УдалитьЗаписьОшибокСервера(ТекущаяОшибка.Узел, ТекущаяОшибка.ДатаОшибки, ТекущаяОшибка.НомерОшибки);
							
							ОбработкаОшибки.Успешно = Истина;
							
							Продолжить;
							
						КонецЕсли;
						
						Если УбратьПоследнийСтатус ИЛИ УбратьДваПоследнихСтатуса Тогда 
							
							НачатьТранзакцию();						
							
							Если Задача.ЗадачаЗакрыта Тогда
								
								РезультатИзменениеЗадачи = УправлениеПродажамиСервер.ИзменитьЗадачу(Задача, Новый Структура("ЗадачаЗакрыта", Ложь));
								
								Если НЕ РезультатИзменениеЗадачи.Успешно Тогда
									
									ВызватьИсключение РезультатИзменениеЗадачи.ТекстОшибки;
									
								КонецЕсли;
								
							КонецЕсли;
							
							НаборСтатусыЗадач0 = РегистрыСведений.СтатусыЗадач.СоздатьНаборЗаписей();
							НаборСтатусыЗадач0.Отбор.Период.Установить(ПоследниеСтатусыЗадачи[0].Период);
							НаборСтатусыЗадач0.Отбор.Задача.Установить(Задача);           						
							НаборСтатусыЗадач0.ДополнительныеСвойства.Вставить("ЗаписьРазрешена", Истина);  						
							НаборСтатусыЗадач0.Записать(); 
							
							Если УбратьДваПоследнихСтатуса Тогда
								
								НаборСтатусыЗадач1 = РегистрыСведений.СтатусыЗадач.СоздатьНаборЗаписей();
								НаборСтатусыЗадач1.Отбор.Период.Установить(ПоследниеСтатусыЗадачи[1].Период);
								НаборСтатусыЗадач1.Отбор.Задача.Установить(Задача);          						
								НаборСтатусыЗадач1.ДополнительныеСвойства.Вставить("ЗаписьРазрешена", Истина);  							
								НаборСтатусыЗадач1.Записать(); 
								
							КонецЕсли;
							
							ПринятьОбъектИзменениеСтатуса(СтруктураСообщения.Data, ТекущаяОшибка.Узел);
							
							УдалитьЗаписьОшибокСервера(ТекущаяОшибка.Узел, ТекущаяОшибка.ДатаОшибки, ТекущаяОшибка.НомерОшибки);
							
							ЗафиксироватьТранзакцию();
							
							ОбработкаОшибки.Успешно = Истина;
							
						Иначе
							
							ОбработкаОшибки.Описание = "Некорректные значения статусов";	
							
						КонецЕсли;	
						
					Иначе
						
						ОбработкаОшибки.Описание = "Некорректная структура статусов";	
						
					КонецЕсли;
					
				Иначе
					
					ОбработкаОшибки.Описание = "Нет данных по статусам";
					
				КонецЕсли;
				
			ИначеЕсли СтруктураСообщения.Type = "UnscheduledVisit" Тогда
				
				Если НачалоДня(XMLЗначение(Тип("Дата"), СтруктураСообщения.Data.Date)) = НачалоДня(ТекущаяДата()) Тогда 
					
					НачатьТранзакцию();
					
					ПринятьОбъектВнеплановыйВизит(СтруктураСообщения.Data, ТекущаяОшибка.Узел);
					УдалитьЗаписьОшибокСервера(ТекущаяОшибка.Узел, ТекущаяОшибка.ДатаОшибки, ТекущаяОшибка.НомерОшибки);
					
					ЗафиксироватьТранзакцию();
					
				Иначе
					
					УдалитьЗаписьОшибокСервера(ТекущаяОшибка.Узел, ТекущаяОшибка.ДатаОшибки, ТекущаяОшибка.НомерОшибки);
					
				КонецЕсли;
				
				ОбработкаОшибки.Успешно = Истина;
				
			Иначе
				
				ОбработкаОшибки.Описание = "Тип объекта не поддерживается";
											
			КонецЕсли;
		
		Исключение
			
			Если ТранзакцияАктивна() Тогда
			
				ОтменитьТранзакцию();	
			
			КонецЕсли;
			
			ОбработкаОшибки.Описание = ОписаниеОшибки();
		
		КонецПопытки;	
		
		Результат.Добавить(ОбработкаОшибки);
	
	КонецЦикла;	
	
	Возврат Результат;

КонецФункции // ()

Процедура УдалитьЗаписьОшибокСервера(Узел, ДатаОшибки, НомерОшибки) Экспорт
	
	НаборОшибкиОбменаСервер = РегистрыСведений.ОшибкиОбменаСервер.СоздатьНаборЗаписей();
	НаборОшибкиОбменаСервер.Отбор.Узел.Установить(Узел);
	НаборОшибкиОбменаСервер.Отбор.ДатаОшибки.Установить(ДатаОшибки);
	НаборОшибкиОбменаСервер.Отбор.НомерОшибки.Установить(НомерОшибки);     
	НаборОшибкиОбменаСервер.ДополнительныеСвойства.Вставить("ЗаписьРазрешена", Истина);  						
	НаборОшибкиОбменаСервер.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыФункции

#Область ОтправкаДанныхМП

Процедура ВыполнитьОтправкуДанныхМобильноеПриложение(Результат, Узел, МассивОшибок)

	ДанныеКВыгрузке = ПолучитьДанныеКВыгрузке(Узел);
	ВыборкаКВыгрузкеРегистры = ПолучитьДанныеКВыгрузкеРегистры(Узел); 
	
	Если ДанныеКВыгрузке.Количество() <> 0 Тогда
		
		Попытка
			
			НачатьТранзакцию();
			
			НомерОтправленного = Узел.НомерОтправленного + 1;  		
			МассивОбъектов     = Новый Массив;
			
			ВыборкаДанные = ПланыОбмена.ВыбратьИзменения(Узел, НомерОтправленного);
			ВыборкаДанные = Null;
			
			Для каждого СсылкаНаОбъект Из ДанныеКВыгрузке Цикл
				
				МассивОбъектов.Добавить(ПолучитьОбъектМобильноеПриложение(СсылкаНаОбъект, Узел));	
				
			КонецЦикла;
			
			Пока ВыборкаКВыгрузкеРегистры.Следующий() Цикл
				
				МассивОбъектов.Добавить(ПолучитьОбъектМобильноеПриложениеРегистры(ВыборкаКВыгрузкеРегистры));
				
			КонецЦикла;
			
			ИзменитьРеквизитПланаОбмена(Узел, "НомерОтправленного", НомерОтправленного);
			
			ВремяПользователя = ТекущаяДата() + ((Узел.ЧасовойПояс - 7)*60*60);
			
			Результат.Вставить("ServerData", Новый Структура("MessageNumber, Objects", НомерОтправленного, МассивОбъектов));
			
			ЗафиксироватьТранзакцию();			
			
		Исключение
			
			ОтменитьТранзакцию();

			ДобавитьОшибкуОбменаСервераВМассив(МассивОшибок, "Отправка данных - " + ОписаниеОшибки());
			
		КонецПопытки;
		
	КонецЕсли; 

КонецПроцедуры   

Функция   ПолучитьОбъектМобильноеПриложение(СсылкаНаОбъект, Узел)

	ТипОбъекта = ТипЗнч(СсылкаНаОбъект);
	
	Результат  = Новый Структура;
	
	Если      ТипОбъекта = Тип("ДокументСсылка.Визит") Тогда
		
		Результат.Вставить("Data", ПолучитьОбъектМобильноеПриложениеВизит(СсылкаНаОбъект, Узел));				
		Результат.Вставить("Type", "Visit");
	
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Клиенты") Тогда
		
		Результат.Вставить("Data", ПолучитьОбъектМобильноеПриложениеКлиент(СсылкаНаОбъект, Узел));	
		Результат.Вставить("Type", "Client");
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ТочкиДоставки") Тогда
	
		Результат.Вставить("Data", ПолучитьОбъектМобильноеПриложениеТочкаДоставки(СсылкаНаОбъект, Узел));	
		Результат.Вставить("Type", "DeliveryPoint");
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.КаналыСбыта") Тогда
	
		Результат.Вставить("Data", ПолучитьОбъектМобильноеПриложениеКаналСбыта(СсылкаНаОбъект, Узел));	
		Результат.Вставить("Type", "DistribChannel");
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.СпециализацииТочекДоставки") Тогда
	
		Результат.Вставить("Data", ПолучитьОбъектМобильноеПриложениеСпециализацияТочкиДоставки(СсылкаНаОбъект, Узел));	
		Результат.Вставить("Type", "SpecializationDeliveryPoint");
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ДебиторскаяЗадолженность") Тогда
	
		Результат.Вставить("Data", ПолучитьОбъектМобильноеПриложениеДебиторскаяЗадолженность(СсылкаНаОбъект, Узел));	
		Результат.Вставить("Type", "Receivables");
	
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ()

Функция   ПолучитьОбъектМобильноеПриложениеРегистры(Выборка)

	Результат  = Новый Структура;
	
	Если Выборка.ИмяРегистра = "Опросы" Тогда
		
		Результат.Вставить("Data", ПолучитьОбъектМобильноеПриложениеОпрос(Выборка));	
		Результат.Вставить("Type", "Poll");
	
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ()

Функция   ПолучитьОбъектМобильноеПриложениеДебиторскаяЗадолженность(СсылкаНаОбъект, Узел) 
	
	Реквизиты          = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъект, "Код, Владелец, ПометкаУдаления"); 		
	СтруктураРезультат = Новый Структура;
	
	СтруктураРезультат.Вставить("GUID"        , XMLСтрока(СсылкаНаОбъект));
	СтруктураРезультат.Вставить("Client"      , XMLСтрока(Реквизиты.Владелец));
	СтруктураРезультат.Вставить("Code"        , Реквизиты.Код);
	СтруктураРезультат.Вставить("DeletionMark", Реквизиты.ПометкаУдаления);

	ПредстоящиеПлатежи = Новый Массив;
	Задолженность      = Новый Массив;
	
	Запрос       = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДебиторскаяЗадолженностьПредстоящиеПлатежи.КонтрагентГУИД КАК КонтрагентГУИД,
		|	ДебиторскаяЗадолженностьПредстоящиеПлатежи.ПлатежСумма КАК ПлатежСумма,
		|	ДебиторскаяЗадолженностьПредстоящиеПлатежи.ПлатежДата КАК ПлатежДата
		|ПОМЕСТИТЬ втПредстоящиеПлатежи
		|ИЗ
		|	Справочник.ДебиторскаяЗадолженность.ПредстоящиеПлатежи КАК ДебиторскаяЗадолженностьПредстоящиеПлатежи
		|ГДЕ
		|	ДебиторскаяЗадолженностьПредстоящиеПлатежи.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДебиторскаяЗадолженностьЗадолженность.КонтрагентГУИД КАК КонтрагентГУИД,
		|	ДебиторскаяЗадолженностьЗадолженность.ЗадолженностьПросроченная КАК ЗадолженностьПросроченная,
		|	ДебиторскаяЗадолженностьЗадолженность.ЗадолженностьПросроченнаяДатаПросрочки КАК ЗадолженностьПросроченнаяДатаПросрочки,
		|	ДебиторскаяЗадолженностьЗадолженность.Задолженность КАК Задолженность
		|ПОМЕСТИТЬ втЗадолженность
		|ИЗ
		|	Справочник.ДебиторскаяЗадолженность.Задолженность КАК ДебиторскаяЗадолженностьЗадолженность
		|ГДЕ
		|	ДебиторскаяЗадолженностьЗадолженность.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлиентыСписокКонтрагентов.ГУИД КАК ГУИД,
		|	КлиентыСписокКонтрагентов.Код КАК Код,
		|	КлиентыСписокКонтрагентов.Наименование КАК Наименование
		|ПОМЕСТИТЬ втКлиенты
		|ИЗ
		|	Справочник.Клиенты.СписокКонтрагентов КАК КлиентыСписокКонтрагентов
		|ГДЕ
		|	КлиентыСписокКонтрагентов.Ссылка = &Владелец
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПредстоящиеПлатежи.КонтрагентГУИД КАК КонтрагентГУИД,
		|	втПредстоящиеПлатежи.ПлатежСумма КАК ПлатежСумма,
		|	втПредстоящиеПлатежи.ПлатежДата КАК ПлатежДата,
		|	ЕСТЬNULL(втКлиенты.Код, """") КАК Код,
		|	ЕСТЬNULL(втКлиенты.Наименование, """") КАК Наименование
		|ИЗ
		|	втПредстоящиеПлатежи КАК втПредстоящиеПлатежи
		|		ЛЕВОЕ СОЕДИНЕНИЕ втКлиенты КАК втКлиенты
		|		ПО втПредстоящиеПлатежи.КонтрагентГУИД = втКлиенты.ГУИД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЗадолженность.КонтрагентГУИД КАК КонтрагентГУИД,
		|	втЗадолженность.ЗадолженностьПросроченная КАК ЗадолженностьПросроченная,
		|	втЗадолженность.ЗадолженностьПросроченнаяДатаПросрочки КАК ЗадолженностьПросроченнаяДатаПросрочки,
		|	втЗадолженность.Задолженность КАК Задолженность,
		|	ЕСТЬNULL(втКлиенты.Код, """") КАК Код,
		|	ЕСТЬNULL(втКлиенты.Наименование, """") КАК Наименование
		|ИЗ
		|	втЗадолженность КАК втЗадолженность
		|		ЛЕВОЕ СОЕДИНЕНИЕ втКлиенты КАК втКлиенты
		|		ПО втЗадолженность.КонтрагентГУИД = втКлиенты.ГУИД";
	
	Запрос.УстановитьПараметр("Владелец", Реквизиты.Владелец);
	Запрос.УстановитьПараметр("Ссылка"  , СсылкаНаОбъект);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаПредстоящиеПлатежи = РезультатЗапроса[3].Выбрать();
	
	Пока ВыборкаПредстоящиеПлатежи.Следующий() Цикл
		
		Платеж = Новый Структура;
		Платеж.Вставить("ClientGUID", XMLСтрока(ВыборкаПредстоящиеПлатежи.КонтрагентГУИД));
	    Платеж.Вставить("ClientCode", ВыборкаПредстоящиеПлатежи.Код);
		Платеж.Вставить("ClientName", ВыборкаПредстоящиеПлатежи.Наименование);
		Платеж.Вставить("Debt"      , ВыборкаПредстоящиеПлатежи.ПлатежСумма);
		Платеж.Вставить("Date"      , XMLСтрока(ВыборкаПредстоящиеПлатежи.ПлатежДата));
			
		ПредстоящиеПлатежи.Добавить(Платеж);
		
	КонецЦикла;
	
	ВыборкаЗадолженность = РезультатЗапроса[4].Выбрать();
	
	Пока ВыборкаЗадолженность.Следующий() Цикл
		
		ТекЗадолженность = Новый Структура;
		ТекЗадолженность.Вставить("ClientGUID" , XMLСтрока(ВыборкаЗадолженность.КонтрагентГУИД));
	    ТекЗадолженность.Вставить("ClientCode" , ВыборкаЗадолженность.Код);
		ТекЗадолженность.Вставить("ClientName" , ВыборкаЗадолженность.Наименование);
		ТекЗадолженность.Вставить("Balance"    , ВыборкаЗадолженность.Задолженность);
		ТекЗадолженность.Вставить("OverdueDate", XMLСтрока(ВыборкаЗадолженность.ЗадолженностьПросроченнаяДатаПросрочки));
		ТекЗадолженность.Вставить("OverdueDebt", ВыборкаЗадолженность.ЗадолженностьПросроченная);
		
		Задолженность.Добавить(ТекЗадолженность);
		
	КонецЦикла;
	
	СтруктураРезультат.Вставить("Payments"   , ПредстоящиеПлатежи);
	СтруктураРезультат.Вставить("CurrentDebt", Задолженность);
	
	Возврат СтруктураРезультат;

КонецФункции // ()

Функция   ПолучитьОбъектМобильноеПриложениеТочкаДоставки(СсылкаНаОбъект, Узел) 
	
	СтруктураРезультат = Новый Структура;
	
	Запрос       = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТочкиДоставки.Ссылка КАК DeliveryPointGUID,
		|	ТочкиДоставки.Код КАК DeliveryPointCode,
		|	ТочкиДоставки.Наименование КАК DeliveryPointName,
		|	ТочкиДоставки.ПометкаУдаления КАК DeliveryPointDeletionMark,
		|	ТочкиДоставки.АдресДоставки КАК DeliveryPointAdress,
		|	ТочкиДоставки.ГеоАдрес КАК DeliveryPointGeoAdress,
		|	ТочкиДоставки.Долгота КАК DeliveryPointLongitude,
		|	ТочкиДоставки.Широта КАК DeliveryPointLatitude,
		|	ТочкиДоставки.Описание КАК DeliveryPointDescription,
		|	ТочкиДоставки.КаналСбыта КАК DeliveryPointSalesChannel,
		|	ТочкиДоставки.Специализация КАК DeliveryPointSpecialization,
		|	ТочкиДоставки.КоличествоПостов КАК DeliveryPointCapacity,
		|	ТочкиДоставки.Владелец КАК DeliveryPointClientGUID,
		|	ВЫБОР
		|		КОГДА ТочкиДоставки.Владелец.ОсновнойМенеджерПокупателя = &Пользователь
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК IsOwner,
		|	ТочкиДоставки.ПлощадьТорговойЗоны КАК DeliveryPointTradeAreaSize,
		|	ВЫБОР
		|		КОГДА ТочкиДоставки.Владелец.МенеджерПоМасляномуПроекту = &Пользователь
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК IsOilManager
		|ИЗ
		|	Справочник.ТочкиДоставки КАК ТочкиДоставки
		|ГДЕ
		|	ТочкиДоставки.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка"      , СсылкаНаОбъект);
	Запрос.УстановитьПараметр("Пользователь", Узел.Пользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		СтруктураРезультат.Вставить("DeliveryPointGUID"           , XMLСтрока(Выборка.DeliveryPointGUID));	
	    СтруктураРезультат.Вставить("DeliveryPointCode"           , XMLСтрока(Выборка.DeliveryPointCode));
		СтруктураРезультат.Вставить("DeliveryPointName"           , XMLСтрока(Выборка.DeliveryPointName));
		СтруктураРезультат.Вставить("DeliveryPointDeletionMark"   , XMLСтрока(Выборка.DeliveryPointDeletionMark));
		СтруктураРезультат.Вставить("DeliveryPointAdress"         , XMLСтрока(Выборка.DeliveryPointAdress));
		//СтруктураРезультат.Вставить("DeliveryPointGeoAdress"      , XMLСтрока(Выборка.DeliveryPointGeoAdress));
		//СтруктураРезультат.Вставить("DeliveryPointLongitude"      , XMLСтрока(Выборка.DeliveryPointLongitude));
		//СтруктураРезультат.Вставить("DeliveryPointLatitude"       , XMLСтрока(Выборка.DeliveryPointLatitude));
		//СтруктураРезультат.Вставить("DeliveryPointDescription"    , XMLСтрока(Выборка.DeliveryPointDescription));
		СтруктураРезультат.Вставить("DeliveryPointDistribChannelGUID" , XMLСтрока(Выборка.DeliveryPointSalesChannel));
		СтруктураРезультат.Вставить("DeliveryPointSpecialization" , Выборка.DeliveryPointSpecialization);
		СтруктураРезультат.Вставить("DeliveryPointCapacity"      , Выборка.DeliveryPointCapacity);
		СтруктураРезультат.Вставить("DeliveryPointClientGUID"     , XMLСтрока(Выборка.DeliveryPointClientGUID));
		СтруктураРезультат.Вставить("IsOwner"                     , XMLСтрока(Выборка.IsOwner));
		СтруктураРезультат.Вставить("DeliveryPointTradeAreaSize"  , Выборка.DeliveryPointTradeAreaSize);
		СтруктураРезультат.Вставить("IsOilManager"                , XMLСтрока(Выборка.IsOilManager));

	КонецЕсли;
	
	Возврат СтруктураРезультат;

КонецФункции // ()

Функция   ПолучитьОбъектМобильноеПриложениеКлиент(СсылкаНаОбъект, Узел) 
	
	СтруктураРезультат = Новый Структура;
	
	Запрос       = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Клиенты.Ссылка КАК ClientGUID,
		|	Клиенты.Наименование КАК ClientName,
		|	Клиенты.Код КАК ClientCode,
		|	Клиенты.ПометкаУдаления КАК ClientDeletionMark,
		|	Клиенты.ОсновнойМенеджерПокупателя КАК ClientManagerGUID,
		|	Клиенты.ОсновнойМенеджерПокупателя.Наименование КАК ClientManagerName,
		|	Клиенты.Филиал КАК BranchGUID,
		|	ПРЕДСТАВЛЕНИЕ(Клиенты.Филиал) КАК BranchName,
		|	ВЫБОР
		|		КОГДА Клиенты.ОсновнойМенеджерПокупателя = &Пользователь
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК IsOwner,
		|	ВЫБОР
		|		КОГДА Клиенты.МенеджерПоМасляномуПроекту = &Пользователь
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК IsOilManager
		|ИЗ
		|	Справочник.Клиенты КАК Клиенты
		|ГДЕ
		|	Клиенты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка"      , СсылкаНаОбъект);
	Запрос.УстановитьПараметр("Пользователь", Узел.Пользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		СтруктураРезультат.Вставить("ClientGUID"        , XMLСтрока(Выборка.ClientGUID));	
	    СтруктураРезультат.Вставить("ClientName"        , XMLСтрока(Выборка.ClientName));
		СтруктураРезультат.Вставить("ClientCode"        , XMLСтрока(Выборка.ClientCode));
		СтруктураРезультат.Вставить("ClientDeletionMark", XMLСтрока(Выборка.ClientDeletionMark));
		//СтруктураРезультат.Вставить("ClientManagerGUID" , XMLСтрока(Выборка.ClientManagerGUID));
		//СтруктураРезультат.Вставить("ClientManagerName" , XMLСтрока(Выборка.ClientManagerName));
		//СтруктураРезультат.Вставить("BranchGUID"        , XMLСтрока(Выборка.BranchGUID));
		//СтруктураРезультат.Вставить("BranchName"        , XMLСтрока(Выборка.BranchName));
		СтруктураРезультат.Вставить("IsOwner"           , XMLСтрока(Выборка.IsOwner));
		СтруктураРезультат.Вставить("IsOilManager"      , XMLСтрока(Выборка.IsOilManager));
		
	КонецЕсли;
	
	Возврат СтруктураРезультат;

КонецФункции // ()

Функция   ПолучитьОбъектМобильноеПриложениеВизит(СсылкаНаОбъект, Узел) 

	МВТ = Новый МенеджерВременныхТаблиц();
	
	Запрос       = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Визит.Ссылка КАК VisitGUID,
		|	Визит.Номер КАК Number,
		|	Визит.Дата КАК Date,
		|	Визит.Клиент КАК ClientGUID,
		|	Визит.Клиент.Наименование КАК ClientName,
		|	Визит.ТочкаДоставки КАК DeliveryPointGUID,
		|	Визит.ТочкаДоставки.Наименование КАК DeliveryPointName,
		|	Визит.Статус КАК DocumentStatus,
		|	Визит.ДатаИсходная КАК FirstDate,
		|	ВЫБОР
		|		КОГДА Визит.Менеджер = &Пользователь
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК IsOwner,
		|	Визит.Клиент.Филиал КАК КлиентФилиал,
		|	Визит.ПометкаУдаления КАК DeletionMark
		|ИЗ
		|	Документ.Визит КАК Визит
		|ГДЕ
		|	Визит.Ссылка = &Ссылка
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВизитЗадачи.Задача КАК Задача,
		|	ВизитЗадачи.Статус КАК Статус,
		|	ВизитЗадачи.Комментарий КАК Комментарий,
		|	ВизитЗадачи.Бренд КАК БрендНаРазвитие,
		|	ВизитЗадачи.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ втЗадачи
		|ИЗ
		|	Документ.Визит.Задачи КАК ВизитЗадачи
		|ГДЕ
		|	ВизитЗадачи.Ссылка = &Ссылка
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЗадачи.Задача КАК TaskGUID,
		|	втЗадачи.Задача.Наименование КАК TaskName,
		|	втЗадачи.Задача.Описание КАК TaskDescription,
		|	втЗадачи.Задача.Аналитика КАК TaskAnalytics,
		|	втЗадачи.Задача.ВидЗадачи КАК TypeOfTask,
		|	втЗадачи.Задача.МаркетинговаяГруппа КАК MarketingGroupGUID,
		|	ПРЕДСТАВЛЕНИЕ(втЗадачи.Задача.МаркетинговаяГруппа) КАК MarketingGroupName,
		|	ВЫБОР
		|		КОГДА втЗадачи.Задача.ВидЗадачи = ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаРазвитие)
		|			ТОГДА втЗадачи.БрендНаРазвитие
		|		ИНАЧЕ втЗадачи.Задача.Бренд
		|	КОНЕЦ КАК BrandGUID,
		|	ПРЕДСТАВЛЕНИЕ(ВЫБОР
		|		КОГДА втЗадачи.Задача.ВидЗадачи = ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаРазвитие)
		|			ТОГДА втЗадачи.БрендНаРазвитие
		|		ИНАЧЕ втЗадачи.Задача.Бренд
		|	КОНЕЦ) КАК BrandName,
		|	втЗадачи.Задача.СуммаПродажПлан КАК SalesPlan,
		|	втЗадачи.Статус КАК TaskStatus,
		|	втЗадачи.Комментарий КАК TaskStatusDescription
		|ИЗ
		|	втЗадачи КАК втЗадачи
		|УПОРЯДОЧИТЬ ПО
		|	втЗадачи.НомерСтроки";
		
	Запрос.УстановитьПараметр("Ссылка"      , СсылкаНаОбъект); 
	Запрос.УстановитьПараметр("Пользователь", Узел.Пользователь);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураРезультат = Новый Структура;
	
	ВыборкаШапка = РезультатЗапроса[0].Выбрать();
	
	Если ВыборкаШапка.Следующий() Тогда
		
		КлиентФилиал = ВыборкаШапка.КлиентФилиал;
		ТочкаДоставки = ВыборкаШапка.DeliveryPointGUID;
		
		СтруктураРезультат.Вставить("VisitGUID"        , XMLСтрока(ВыборкаШапка.VisitGUID));
		СтруктураРезультат.Вставить("Number"           , XMLСтрока(ВыборкаШапка.Number));
		СтруктураРезультат.Вставить("Date"             , XMLСтрока(ВыборкаШапка.Date));
		СтруктураРезультат.Вставить("ClientGUID"       , XMLСтрока(ВыборкаШапка.ClientGUID));
		СтруктураРезультат.Вставить("ClientName"       , XMLСтрока(ВыборкаШапка.ClientName));
		СтруктураРезультат.Вставить("DeliveryPointGUID", XMLСтрока(ВыборкаШапка.DeliveryPointGUID));
		СтруктураРезультат.Вставить("DeliveryPointName", XMLСтрока(ВыборкаШапка.DeliveryPointName));
		СтруктураРезультат.Вставить("DocumentStatus"   , XMLСтрока(ВыборкаШапка.DocumentStatus));
		СтруктураРезультат.Вставить("FirstDate"        , XMLСтрока(ВыборкаШапка.FirstDate));
		СтруктураРезультат.Вставить("IsOwner"          , XMLСтрока(ВыборкаШапка.IsOwner));
		СтруктураРезультат.Вставить("DeletionMark"     , ВыборкаШапка.DeletionMark);
		
		МассивЗадачВизита = Новый Массив;
		
		ВыборкаЗадачиВизита = РезультатЗапроса[2].Выбрать();
		
		Пока ВыборкаЗадачиВизита.Следующий() Цикл
		
			СтруктураЗадачаВизита = Новый Структура;
			
			СтруктураЗадачаВизита.Вставить("TaskGUID"             , XMLСтрока(ВыборкаЗадачиВизита.TaskGUID));
			СтруктураЗадачаВизита.Вставить("TaskName"             , XMLСтрока(ВыборкаЗадачиВизита.TaskName));
			СтруктураЗадачаВизита.Вставить("TaskAnalytics"        , XMLСтрока(ВыборкаЗадачиВизита.TaskAnalytics));
			СтруктураЗадачаВизита.Вставить("TaskDescription"      , XMLСтрока(ВыборкаЗадачиВизита.TaskDescription));
			СтруктураЗадачаВизита.Вставить("TypeOfTask"           , XMLСтрока(ВыборкаЗадачиВизита.TypeOfTask));
			СтруктураЗадачаВизита.Вставить("MarketingGroupGUID"   , XMLСтрока(ВыборкаЗадачиВизита.MarketingGroupGUID));
			СтруктураЗадачаВизита.Вставить("MarketingGroupName"   , XMLСтрока(ВыборкаЗадачиВизита.MarketingGroupName));
			СтруктураЗадачаВизита.Вставить("BrandGUID"            , XMLСтрока(ВыборкаЗадачиВизита.BrandGUID));
			СтруктураЗадачаВизита.Вставить("BrandName"            , XMLСтрока(ВыборкаЗадачиВизита.BrandName));
			СтруктураЗадачаВизита.Вставить("SalesPlan"            , XMLСтрока(ВыборкаЗадачиВизита.SalesPlan));
			СтруктураЗадачаВизита.Вставить("TaskStatus"           , XMLСтрока(ВыборкаЗадачиВизита.TaskStatus));
			СтруктураЗадачаВизита.Вставить("TaskStatusDescription", XMLСтрока(ВыборкаЗадачиВизита.TaskStatusDescription));
			
			МассивЗадачВизита.Добавить(СтруктураЗадачаВизита);
		
		КонецЦикла;
		
		СтруктураРезультат.Вставить("Tasks", МассивЗадачВизита);
		
		МассивПродажи = Новый Массив;
		МассивОстатки = Новый Массив;
		
		Если СсылкаНаОбъект.Дата = НачалоДня(ТекущаяДата()) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ПродажиПоМесяцам.ПериодМесяц КАК ПериодМесяц,
			|	ПродажиПоМесяцам.МаркетинговаяГруппа.Родитель.Наименование КАК МаркетинговаяГруппаРодительНаименование,
			|	ПродажиПоМесяцам.МаркетинговаяГруппа.Наименование КАК МаркетинговаяГруппаНаименование,
			|	ПродажиПоМесяцам.Бренд.Наименование КАК БрендНаименование,
			|	ПродажиПоМесяцам.СуммаПродажи КАК СуммаПродажи
			|ИЗ
			|	РегистрСведений.ПродажиПоМесяцам КАК ПродажиПоМесяцам
			|ГДЕ
			|	ПродажиПоМесяцам.ТочкаДоставки = &ТочкаДоставки
			|	И ПродажиПоМесяцам.ПериодМесяц >= &ПериодМесяц";
			
			Запрос.УстановитьПараметр("ПериодМесяц", ДобавитьМесяц(ТекущаяДата(), -3));
			Запрос.УстановитьПараметр("ТочкаДоставки", ТочкаДоставки);
			
			ВыборкаПродажи = Запрос.Выполнить().Выбрать();
			
			Пока ВыборкаПродажи.Следующий() Цикл
				
				СтруктураПродажа = Новый Структура;
				
				СтруктураПродажа.Вставить("MonthDate", 		 ВыборкаПродажи.ПериодМесяц);
				СтруктураПродажа.Вставить("MarketingGroup",  ВыборкаПродажи.МаркетинговаяГруппаНаименование);
				СтруктураПродажа.Вставить("MarketingParent", XMLСтрока(ВыборкаПродажи.МаркетинговаяГруппаРодительНаименование));
				СтруктураПродажа.Вставить("Brand", 			 ВыборкаПродажи.БрендНаименование);
				СтруктураПродажа.Вставить("SaleSum", 	     ВыборкаПродажи.СуммаПродажи);
				
				МассивПродажи.Добавить(СтруктураПродажа);
				
			КонецЦикла;
			
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МВТ;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	втЗадачи.Задача КАК TaskGUID,
			|	ОстаткиПоФилиалам.Бренд КАК BrandGUID,
			|	ОстаткиПоФилиалам.Бренд.Наименование КАК BrandName,
			|	ОстаткиПоФилиалам.КоличествоОстаток КАК Balance
			|ИЗ
			|	РегистрСведений.ОстаткиПоФилиалам КАК ОстаткиПоФилиалам
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЗадачи КАК втЗадачи
			|		ПО (втЗадачи.Задача.МаркетинговаяГруппа = ОстаткиПоФилиалам.МаркетинговаяГруппа)
			|			И (ОстаткиПоФилиалам.Бренд.Используется)
			|			И (ОстаткиПоФилиалам.Бренд.ПриоритетБренда > 0)
			|			И (ОстаткиПоФилиалам.Филиал = &Филиал)
			|			И (втЗадачи.Задача.ВидЗадачи = ЗНАЧЕНИЕ(Перечисление.ВидыЗадач.НаРазвитие))
			|
			|УПОРЯДОЧИТЬ ПО
			|	BrandName";

			Запрос.УстановитьПараметр("Филиал", КлиентФилиал);
			
			ВыборкаОстатки = Запрос.Выполнить().Выбрать();
			
			Пока ВыборкаОстатки.Следующий() Цикл
				
				СтруктураОстатки = Новый Структура;
				
				СтруктураОстатки.Вставить("TaskGUID", 	XMLСтрока(ВыборкаОстатки.TaskGUID));
				СтруктураОстатки.Вставить("BrandGUID", 	XMLСтрока(ВыборкаОстатки.BrandGUID));
				СтруктураОстатки.Вставить("BrandName", 	ВыборкаОстатки.BrandName);
				СтруктураОстатки.Вставить("Balance",	ВыборкаОстатки.Balance);
				
				МассивОстатки.Добавить(СтруктураОстатки);
				
			КонецЦикла;
					
		КонецЕсли;
		
		СтруктураРезультат.Вставить("Sales", МассивПродажи);
		СтруктураРезультат.Вставить("GoodsBalance", МассивОстатки);
			
	КонецЕсли;
	
	Возврат СтруктураРезультат;

КонецФункции // ()

Функция   ПолучитьОбъектМобильноеПриложениеКаналСбыта(СсылкаНаОбъект, Узел) 
	
	СтруктураРезультат = Новый Структура;
	
	Запрос       = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КаналыСбыта.Ссылка,
		|	КаналыСбыта.ЭтоГруппа,
		|	КаналыСбыта.Код,
		|	КаналыСбыта.Наименование,
		|	КаналыСбыта.ПометкаУдаления,
		|	КаналыСбыта.Родитель
		|ИЗ
		|	Справочник.КаналыСбыта КАК КаналыСбыта
		|ГДЕ
		|	КаналыСбыта.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка" , СсылкаНаОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		СтруктураРезультат.Вставить("DistribChannelGUID"        , XMLСтрока(Выборка.Ссылка));	
	    СтруктураРезультат.Вставить("IsFolder"           		, Выборка.ЭтоГруппа);
		СтруктураРезультат.Вставить("DistribChannelName"        , Выборка.Наименование);
		СтруктураРезультат.Вставить("DistribChannelDeletionMark", Выборка.ПометкаУдаления);
		СтруктураРезультат.Вставить("DistribChannelCode"        , Выборка.Код);
		СтруктураРезультат.Вставить("DistribChannelParentGUID"  , XMLСтрока(Выборка.Родитель));

	КонецЕсли;
	
	Возврат СтруктураРезультат;

КонецФункции // ()

Функция   ПолучитьОбъектМобильноеПриложениеСпециализацияТочкиДоставки(СсылкаНаОбъект, Узел) 
	
	СтруктураРезультат = Новый Структура;
	
	Запрос       = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СпециализацииТочекДоставки.Ссылка КАК Ссылка,
		|	СпециализацииТочекДоставки.Наименование КАК Наименование,
		|	СпециализацииТочекДоставки.Код КАК Код,
		|	СпециализацииТочекДоставки.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Справочник.СпециализацииТочекДоставки КАК СпециализацииТочекДоставки
		|ГДЕ
		|	СпециализацииТочекДоставки.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка" , СсылкаНаОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		СтруктураРезультат.Вставить("SpecializationDeliveryPointGUID"        , XMLСтрока(Выборка.Ссылка));	
		СтруктураРезультат.Вставить("SpecializationDeliveryPointName"        , Выборка.Наименование);
		СтруктураРезультат.Вставить("SpecializationDeliveryPointDeletionMark", Выборка.ПометкаУдаления);
		СтруктураРезультат.Вставить("SpecializationDeliveryPointCode"        , Выборка.Код);

	КонецЕсли;
	
	Возврат СтруктураРезультат;

КонецФункции // ()

Функция   ПолучитьОбъектМобильноеПриложениеОпрос(Выборка) 
	
	СтруктураРезультат = Новый Структура;
	
	Запрос       = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Опросы.ТочкаДоставки,
		|	Опросы.ОпросКод,
		|	Опросы.СтатусОпроса,
		|	Опросы.ДатаНачалаОпроса,
		|	Опросы.ДатаОкончанияОпроса,
		|	Опросы.СсылкаНаОпрос,
		|	Опросы.НаименованиеОпроса
		|ИЗ
		|	РегистрСведений.Опросы КАК Опросы
		|ГДЕ
		|	Опросы.ТочкаДоставки = &ТочкаДоставки
		|	И Опросы.ОпросКод = &ОпросКод";
	
	Запрос.УстановитьПараметр("ТочкаДоставки", Выборка.ТочкаДоставки);
	Запрос.УстановитьПараметр("ОпросКод", Выборка.ОпросКод);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		СтруктураРезультат.Вставить("PollDeliveryPointGUID", XMLСтрока(Выборка.ТочкаДоставки));
		СтруктураРезультат.Вставить("PollCode",              Выборка.ОпросКод);	
		СтруктураРезультат.Вставить("PollName",              Выборка.НаименованиеОпроса);
		СтруктураРезультат.Вставить("PollStartDate",         Выборка.ДатаНачалаОпроса);
		СтруктураРезультат.Вставить("PollEndDate",           Выборка.ДатаОкончанияОпроса);
		СтруктураРезультат.Вставить("PollStatus",            XMLСтрока(Выборка.СтатусОпроса));
		СтруктураРезультат.Вставить("PollLink",              Выборка.СсылкаНаОпрос);
		
	КонецЕсли;
	
	Возврат СтруктураРезультат;

КонецФункции // ()

Функция   ПолучитьДанныеКВыгрузке(Узел)
	
	Запрос       = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлиентыИзменения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Клиенты.Изменения КАК КлиентыИзменения
		|ГДЕ
		|	КлиентыИзменения.Узел = &Узел
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СпециализацииТочекДоставкиИзменения.Ссылка
		|ИЗ
		|	Справочник.СпециализацииТочекДоставки.Изменения КАК СпециализацииТочекДоставкиИзменения
		|ГДЕ
		|	СпециализацииТочекДоставкиИзменения.Узел = &Узел
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТочкиДоставкиИзменения.Ссылка
		|ИЗ
		|	Справочник.ТочкиДоставки.Изменения КАК ТочкиДоставкиИзменения
		|ГДЕ
		|	ТочкиДоставкиИзменения.Узел = &Узел
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВизитИзменения.Ссылка
		|ИЗ
		|	Документ.Визит.Изменения КАК ВизитИзменения
		|ГДЕ
		|	ВизитИзменения.Узел = &Узел
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КаналыСбытаИзменения.Ссылка
		|ИЗ
		|	Справочник.КаналыСбыта.Изменения КАК КаналыСбытаИзменения
		|ГДЕ
		|	КаналыСбытаИзменения.Узел = &Узел
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДебиторскаяЗадолженностьИзменения.Ссылка
		|ИЗ
		|	Справочник.ДебиторскаяЗадолженность.Изменения КАК ДебиторскаяЗадолженностьИзменения
		|ГДЕ
		|	ДебиторскаяЗадолженностьИзменения.Узел = &Узел";
	
	Запрос.УстановитьПараметр("Узел", Узел);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции // ()

Функция ПолучитьДанныеКВыгрузкеРегистры(Узел) 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОпросыИзменения.ТочкаДоставки,
	|	ОпросыИзменения.ОпросКод,
	|	""Опросы"" КАК ИмяРегистра
	|ИЗ
	|	РегистрСведений.Опросы.Изменения КАК ОпросыИзменения
	|ГДЕ
	|	ОпросыИзменения.Узел = &Узел";
	
	Запрос.УстановитьПараметр("Узел", Узел);
	
	ВыборкаИзменения = Запрос.Выполнить().Выбрать();
	
	Возврат ВыборкаИзменения;
	
КонецФункции


#КонецОбласти

#Область ПриемДанныхМП

Процедура ВыполнитьПриемДанныхМобильноеПриложение(Результат, Узел, MobileData, МассивОшибок)
	
	Попытка
				
		MessageNumberMobileData = MobileData.MessageNumber;
		
		Для каждого ТекОбъект Из MobileData.Objects Цикл
			
			РезультатОбработкиОбъектаМП = ОбработатьОбъектМобильноеПриложение(ТекОбъект, Узел);
			
			Если НЕ РезультатОбработкиОбъектаМП.Успешно Тогда
			
				ДобавитьОшибкуОбменаСервераВМассив(МассивОшибок, РезультатОбработкиОбъектаМП.ТекстОшибки, СериализоватьВJSON(ТекОбъект));
			
			КонецЕсли;		
		
		КонецЦикла;
		
		РезультатОбработкаОшибок = ОбновитьОшибкиОбменаМобильноеПриложениеПоУзлу(Узел, MobileData.Errors);
		
		Если НЕ РезультатОбработкаОшибок.Успешно Тогда
		
			ДобавитьОшибкуОбменаСервераВМассив(МассивОшибок, РезультатОбработкаОшибок.ТекстОшибки);	
		
		КонецЕсли;
		
		ИзменитьРеквизитПланаОбмена(Узел, "НомерПринятого", MessageNumberMobileData);
			
		Результат.Вставить("MobileData", Новый Структура("ReceivedMessageNumber", MessageNumberMobileData));
			
	Исключение
		
		ДобавитьОшибкуОбменаСервераВМассив(МассивОшибок, "Прием данных - " + ОписаниеОшибки());
		
	КонецПопытки;      	

КонецПроцедуры // ()

Функция   ОбработатьОбъектМобильноеПриложение(ОбъектМобильноеПриложение, Узел)
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно"    , Истина);
	Результат.Вставить("ТекстОшибки", "");
	
	Попытка
	
		ТипОбъекта    = ОбъектМобильноеПриложение.Type;
	    ДанныеОбъекта = ОбъектМобильноеПриложение.Data;
		
		Если ТипОбъекта = "TaskStatus" Тогда
			
			ПринятьОбъектИзменениеСтатуса(ДанныеОбъекта, Узел);
			
		ИначеЕсли ТипОбъекта = "UnscheduledVisit" Тогда
			
			ПринятьОбъектВнеплановыйВизит(ДанныеОбъекта, Узел);	
			
		ИначеЕсли ТипОбъекта = "DeliveryPoint" Тогда
			
			ПринятьОбъектИзменениеТочкиДоставки(ДанныеОбъекта, Узел);
			
		Иначе
			
			ВызватьИсключение "Неизвестный тип объекта";   			
		
		КонецЕсли;		

	Исключение
		
		Результат.Успешно     = Ложь;
		Результат.ТекстОшибки = ОписаниеОшибки();
		
	КонецПопытки;
	
	Возврат Результат;

КонецФункции // ()

Процедура ПринятьОбъектВнеплановыйВизит(ДанныеОбъекта, Узел)
		
	Точка        = Справочники.ТочкиДоставки.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеОбъекта.DeliveryPointGUID));	
	ДатаСобытия  = XMLЗначение(Тип("Дата"), ДанныеОбъекта.Date);
	ЗадачиВизита = ДанныеОбъекта.Tasks;
	
	Если НЕ ЗначениеЗаполнено(Точка.ВерсияДанных) Тогда
	
		ВызватьИсключение "Точка не найдена";	
	
	КонецЕсли;
	
	Если ДатаСобытия < НачалоДня(ТекущаяДата()) Тогда
	
		ВызватьИсключение "Запрещенный период";	
	
	КонецЕсли;
	
	Запрос		 = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Визит.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Визит КАК Визит
		|ГДЕ
		|	Визит.ТочкаДоставки = &ТочкаДоставки
		|	И Визит.Дата = &Дата
		|	И Визит.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Дата"         , ДатаСобытия);
	Запрос.УстановитьПараметр("ТочкаДоставки", Точка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
	
		ВызватьИсключение "На дату уже определен визит";	
	
	КонецЕсли;
	
	Попытка
	
		НачатьТранзакцию();
		
		Результат = УправлениеПродажамиСервер.СоздатьВизит(ДатаСобытия, Точка, Узел.Пользователь, Истина, Истина);
		
		Если Результат.Успешно Тогда
		
			Для каждого ТекЗадача Из ЗадачиВизита Цикл
			
				НоваяЗадача = УправлениеПродажамиСервер.СоздатьЗадачу(Новый Структура("ТочкаДоставки, ВидЗадачи, ДатаНачала, ДатаОкончания, Клиент, Наименование", Точка, Перечисления.ВидыЗадач.ПрочиеЗадачи, ДатаСобытия, ДатаСобытия, Точка.Владелец, ТекЗадача.TaskName), Результат.Ссылка);	
				
				Если НЕ НоваяЗадача.Успешно Тогда
				
					ВызватьИсключение НоваяЗадача.ТекстОшибки;	
				
				КонецЕсли;
				
			КонецЦикла;	
			
			РезультатСогласование = УправлениеПродажамиСервер.ИзменитьВизит(Результат.Ссылка, Новый Структура("Статус", Перечисления.СтатусыВизитов.Согласован));
	
			Если НЕ РезультатСогласование.Успешно Тогда
				
				ВызватьИсключение РезультатСогласование.ТекстОшибки;					
			КонецЕсли;
		
		Иначе
			
			ВызватьИсключение Результат.ТекстОшибки;	
		
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		
		ВызватьИсключение ОписаниеОшибки();
	
	КонецПопытки;
	
КонецПроцедуры

Процедура ПринятьОбъектИзменениеСтатуса(ДанныеОбъекта, Узел)

	Бренд = Справочники.Бренды.ПустаяСсылка();
	
	Если ДанныеОбъекта.BrandGUID <> "00000000-0000-0000-0000-000000000000" И СтрДлина(ДанныеОбъекта.BrandGUID) = 36 Тогда
		
		Бренд = Справочники.Бренды.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеОбъекта.BrandGUID));	
		
	КонецЕсли;
	
	Визит       = Документы.Визит.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеОбъекта.VisitGUID));	
	Задача      = Справочники.Задачи.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеОбъекта.TaskGUID));	
	Статус      = Перечисления.СтатусыЗадачЗначения[ДанныеОбъекта.Status];
	Комментарий = ДанныеОбъекта.Comment;
	ДатаСобытия = ПолучитьДатуСобытия(XMLЗначение(Тип("Дата"), ДанныеОбъекта.Date), Узел.ЧасовойПояс, ДанныеОбъекта.TimeZone);
	Срок        = ДанныеОбъекта.Term;
	
	Попытка
	
		НачатьТранзакцию();
		
		РезультатСтатус = УправлениеПродажамиСервер.УстановитьСтатусЗадачиВВизите(Визит, Задача, Статус, Датасобытия, Комментарий, Бренд, Срок, , Истина);
	
		Если РезультатСтатус.Успешно Тогда
			
			Координаты = ПолучитьСамыеТочныеКоординаты(Визит.ТочкаДоставки, ДанныеОбъекта.ProvidersCoordinates);
			
			Если Координаты.Успех Тогда
				
				Долгота = Координаты.Долгота;
				Широта = Координаты.Широта;
				ГоризонтальнаяТочность = Координаты.ГоризонтальнаяТочность;
				
			Иначе
				
				Долгота = ДанныеОбъекта.Longitude;
				Широта = ДанныеОбъекта.Latitude;
				ГоризонтальнаяТочность = ДанныеОбъекта.HorizontalAccuracy;
				
			КонецЕсли;
			
			МЗ                        = РегистрыСведений.ЛогГеолокации.СоздатьМенеджерЗаписи();
			
			МЗ.Пользователь           = Узел.Пользователь;
			МЗ.Визит                  = Визит;
			МЗ.Задача                 = Задача;
			МЗ.Период                 = ДатаСобытия;  					
			МЗ.Долгота                = Долгота;
			МЗ.Широта                 = Широта;
			МЗ.ВертикальнаяТочность   = ДанныеОбъекта.VerticalAccuracy;
			МЗ.ГоризонтальнаяТочность = ГоризонтальнаяТочность;
			МЗ.ПровайдерыКоординаты   = ДанныеОбъекта.ProvidersCoordinates;
			
			МЗ.Записать();
			
			Координаты = Новый Структура("Долгота, Широта", Долгота, Широта);
			
			РезультатОтвет = УправлениеПродажамиСервер.ОтправитьОтветПоЗаданию(Визит, Задача, Узел.Пользователь, ДатаСобытия, Координаты);
			
			Если НЕ РезультатОтвет.Успешно Тогда
				ВызватьИсключение РезультатОтвет.ТекстОшибки;
			КонецЕсли;
			
		Иначе
			
			ВызватьИсключение РезультатСтатус.ТекстОшибки;			
		
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		
		ВызватьИсключение ОписаниеОшибки();
	
	КонецПопытки;
	
КонецПроцедуры

Процедура ПринятьОбъектИзменениеТочкиДоставки(ДанныеОбъекта, Узел)
	
	ДанныеСообщения = Новый Структура;
	
	ДанныеСообщения.Вставить("GUID", ДанныеОбъекта.DeliveryPointGUID);
	ДанныеСообщения.Вставить("Capacity", ДанныеОбъекта.Capacity);
	ДанныеСообщения.Вставить("DistribChannelGUID", ДанныеОбъекта.DistribChannelGUID);
	ДанныеСообщения.Вставить("SpecializationDeliveryPointGUID", ДанныеОбъекта.SpecializationDeliveryPointGUID);
	ДанныеСообщения.Вставить("TradeAreaSize", ДанныеОбъекта.TradeAreaSize);
	
	ДанныеСообщения = СериализоватьВJSON(ДанныеСообщения);
	
	Справочники.ИсходящиеСообщения.Опубликовать("delivery.point", ДанныеСообщения);
	
КонецПроцедуры

#КонецОбласти

#Область ВерификацияУстройствМП

Функция   ДанныеМобильногоУстройства(СтруктураЗапрос)

	Результат = Новый Структура;
	Результат.Вставить("УстройствоВерифицировано", Ложь);
	Результат.Вставить("Узел"                    , ПланыОбмена.МобильноеПриложение.ПустаяСсылка());
	
	Если НЕ СтруктураЗапрос.Свойство("IMEI") ИЛИ НЕ СтруктураЗапрос.Свойство("DeviceInfo") Тогда
	
		Возврат Результат;	
	
	КонецЕсли;	
	
	IMEI                   = СтруктураЗапрос.IMEI;
	НаименованиеУстройства = СтруктураЗапрос.DeviceInfo;   
	Пользователь           = ПараметрыСеанса.ТекущийПользователь;
	
	Запрос       = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МобильноеПриложение.Ссылка КАК Узел,
		|	МобильноеПриложение.ПометкаУдаления КАК ПометкаУдаления,
		|	МобильноеПриложение.Заблокирован КАК Заблокирован
		|ИЗ
		|	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
		|ГДЕ
		|	МобильноеПриложение.IMEI = &IMEI
		|	И МобильноеПриложение.Пользователь = &Пользователь
		|	И МобильноеПриложение.ЭтотУзел = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("IMEI"        , IMEI);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если Выборка.ПометкаУдаления = Ложь И Выборка.Заблокирован = Ложь Тогда
		
			Результат.УстройствоВерифицировано = Истина;	
		    Результат.Узел                     = Выборка.Узел;	
			
		КонецЕсли;
		
	Иначе
			
		Запрос		 = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НеверифицированныеУстройства.НаименованиеУстройства КАК НаименованиеУстройства,
		|	НеверифицированныеУстройства.ДатаПоявления КАК ДатаПоявления,
		|	НеверифицированныеУстройства.Заблокирован КАК Заблокирован
		|ИЗ
		|	РегистрСведений.НеверифицированныеУстройства КАК НеверифицированныеУстройства
		|ГДЕ
		|	НеверифицированныеУстройства.IMEI = &IMEI
		|	И НеверифицированныеУстройства.Пользователь = &Пользователь";
		
		Запрос.УстановитьПараметр("IMEI"        , IMEI);
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 0 Тогда         
			
			Попытка
				
				ИзменитьНеверифицированныеУстройства(IMEI, Пользователь, , НаименованиеУстройства);	
				
			Исключение
				
				ЗаписьЖурналаРегистрации("ExecuteExchange.ИзменитьНеверифицированныеУстройства", УровеньЖурналаРегистрации.Ошибка, , , СтрШаблон("%1 - %2: %3", IMEI, Пользователь, ОписаниеОшибки()));
				
			КонецПопытки;	
			
		КонецЕсли;
			
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции // ()

#КонецОбласти

Процедура ИзменитьРеквизитПланаОбмена(Узел, ИмяРеквизита, Значение)

	УзелОбъект               = Узел.ПолучитьОбъект();
	УзелОбъект.Заблокировать();
	УзелОбъект[ИмяРеквизита] = Значение;
	УзелОбъект.Записать();	

КонецПроцедуры  

Функция   ОбновитьОшибкиОбменаМобильноеПриложениеПоУзлу(Узел, МассивОшибокНаУзлеМП)

	Результат = Новый Структура;
	Результат.Вставить("Успешно"    , Ложь);
	Результат.Вставить("ТекстОшибки", "");
	
	Попытка
		
		Набор = РегистрыСведений.ОшибкиОбменаМобильноеПриложение.СоздатьНаборЗаписей();
		Набор.Отбор.Узел.Установить(Узел);
		
		Для каждого ТекОшибка Из МассивОшибокНаУзлеМП Цикл
			
			Запись      = Набор.Добавить();
			Запись.Узел = Узел;
			
			Если ТекОшибка.ObjectType = "Client" Тогда
				
				Запись.Объект = Справочники.Клиенты.ПолучитьСсылку(Новый УникальныйИдентификатор(ТекОшибка.ObjectGUID));	
				
			ИначеЕсли ТекОшибка.ObjectType = "DeliveryPoint" Тогда
				
				Запись.Объект = Справочники.ТочкиДоставки.ПолучитьСсылку(Новый УникальныйИдентификатор(ТекОшибка.ObjectGUID));
				
			ИначеЕсли ТекОшибка.ObjectType = "Visit" Тогда	
				
				Запись.Объект = Документы.Визит.ПолучитьСсылку(Новый УникальныйИдентификатор(ТекОшибка.ObjectGUID));
			
			ИначеЕсли ТекОшибка.ObjectType = "DistribChannel" Тогда
				
				Запись.Объект = Справочники.КаналыСбыта.ПолучитьСсылку(Новый УникальныйИдентификатор(ТекОшибка.ObjectGUID));
				
			ИначеЕсли ТекОшибка.ObjectType = "SpecializationDeliveryPoint" Тогда
				
				Запись.Объект = Справочники.СпециализацииТочекДоставки.ПолучитьСсылку(Новый УникальныйИдентификатор(ТекОшибка.ObjectGUID));
			
			ИначеЕсли ТекОшибка.ObjectType = "Receivables" Тогда
				
				Запись.Объект = Справочники.ДебиторскаяЗадолженность.ПолучитьСсылку(Новый УникальныйИдентификатор(ТекОшибка.ObjectGUID));
			
			ИначеЕсли ТекОшибка.ObjectType = "Poll" Тогда
				
				//Запись.Объект = Справочники.Опросы.ПолучитьСсылку(Новый УникальныйИдентификатор(ТекОшибка.ObjectGUID));
			
			КонецЕсли;
			
			Запись.ОписаниеОшибки = ТекОшибка.ErrorDescription;
			
		КонецЦикла;
		
		Набор.Записать();
		
		Результат.Успешно = Истина;
		
	Исключение
		
		Результат.Успешно     = Ложь;
		Результат.ТекстОшибки = ОписаниеОшибки();
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьОшибкуОбменаСервераВМассив(МассивОшибок, ОписаниеОшибки, ТекстСообщения = "")
	
	МассивОшибок.Добавить(Новый Структура("ОписаниеОшибки, ТекстСообщения", ОписаниеОшибки, ТекстСообщения));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеФункции

Функция   СериализоватьВJSON(СтруктураДанных) Экспорт
	
	Запись              = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, СтруктураДанных);
	СтрокаДанных        = Запись.Закрыть();
	
	Возврат СтрокаДанных;
	
КонецФункции

Функция   ПолучитьСтруктуруЗапроса(ТелоЗапроса) Экспорт
	
	ЧтениеJSON    = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);
	СтруктураJSON = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Возврат СтруктураJSON;

КонецФункции

Процедура ПроверитьВерсиюМобильногоПриложения(СтруктураЗапроса) Экспорт
	
	СтруктураЗапроса.Вставить("LatestVersion", Истина);
	
	Если ЗначениеЗаполнено(СтруктураЗапроса.Пользователь) Тогда
		
		Если СтруктураЗапроса.Свойство("Version") Тогда
		
			ВерсияМобильногоПриложения = УправлениеПродажамиСерверПовтИсп.ПолучитьЗначениеНастройкиИнформационнойБазы("АктуальнаяВерсияМобильногоПриложения");
			
			Если НЕ ПустаяСтрока(ВерсияМобильногоПриложения) И НЕ СтруктураЗапроса.Version = ВерсияМобильногоПриложения Тогда
				СтруктураЗапроса.LatestVersion = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСамыеТочныеКоординаты(ТочкаДоставки, КоординатыСтруктураJSON)
	
	Результат = Новый Структура("Долгота,Широта,ГоризонтальнаяТочность,Успех", 0,0,0,Ложь);
	
	Попытка
	
		Если ТочкаДоставки.ТочностьАдреса = Справочники.ТочностьАдреса.exact Тогда
		
			ТочкаДоставкиДолгота = ТочкаДоставки.Долгота;
			ТочкаДоставкиШирота = ТочкаДоставки.Широта;
		
			ЛучшаяДолгота = 0;
			ЛучшаяШирота = 0;
			ЛучшаяГоризонтальнаяТочность = 0;
			
			МинимальноеРасстояние = 0;
		
			СтруктураКоординаты = ПолучитьСтруктуруЗапроса(КоординатыСтруктураJSON);
			
			Для Каждого Элемент Из СтруктураКоординаты.Data Цикл
				
				ТочкаДолгота = Элемент.Longitude;
				ТочкаШирота = Элемент.Latitude;
				ТочкаГоризонтальнаяТочность = Элемент.HorizontalAccuracy;
				
				Если НЕ ТочкаШирота = 0 И НЕ ТочкаДолгота = 0 Тогда
				
					Расстояние = МодульПодписокНаСобытия.ПолучитьРасстояниеМеждуКоординатами(ТочкаДоставкиШирота,
					 																		 ТочкаДоставкиДолгота,
					  																		 ТочкаШирота,
					   																		 ТочкаДолгота);
					   																		 
					Если Расстояние >= 0 Тогда
						
						Если МинимальноеРасстояние = 0 Тогда
							
							МинимальноеРасстояние = Расстояние;
							ЛучшаяДолгота = ТочкаДолгота;
							ЛучшаяШирота = ТочкаШирота;
							ЛучшаяГоризонтальнаяТочность = ТочкаГоризонтальнаяТочность;
							
						ИначеЕсли Расстояние < МинимальноеРасстояние Тогда
							
							МинимальноеРасстояние = Расстояние;
							ЛучшаяДолгота = ТочкаДолгота;
							ЛучшаяШирота = ТочкаШирота;
							ЛучшаяГоризонтальнаяТочность = ТочкаГоризонтальнаяТочность;
							
						КонецЕсли;
						
					КонецЕсли;
					   															
				КонецЕсли;	   														
				
			КонецЦикла;	
			
			Результат.Долгота = ЛучшаяДолгота;
			Результат.Широта = ЛучшаяШирота;
			Результат.ГоризонтальнаяТочность = ЛучшаяГоризонтальнаяТочность;
			Результат.Успех = Истина;
			
		КонецЕсли;
		
	Исключение
		ЗаписьЖурналаРегистрации("ПолучитьСамыеТочныеКоординаты", УровеньЖурналаРегистрации.Ошибка, , ,ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДатуСобытия(ДатаСобытия, ЧасовойПояс, ЧасовойПоясМП = "")
	
	//Вычисляем дату статуса с поправкой на часовой пояс устройства
	
	ТекущаяДата = ТекущаяДата();
	
	МассивДопустимыхПоясов = ПолучитьДопустимыеЧасовыеПояса();
	
	Если НЕ МассивДопустимыхПоясов.Найти(ЧасовойПоясМП) = Неопределено Тогда
	
		Попытка

			ДатаАктуальностиУниверсальная = УниверсальноеВремя(ТекущаяДата);

			ДатаАктуальностиМП = МестноеВремя(ДатаАктуальностиУниверсальная, ЧасовойПоясМП);

    		РазницаВоВремени = ТекущаяДата - ДатаАктуальностиМП;
    		
    		ДатаСобытияРезультат = ДатаСобытия + РазницаВоВремени; 
    	
   		Исключение
    		
    		ДатаСобытияРезультат = ДатаСобытия + ((7 - ЧасовойПояс) * 60 * 60);
				
		КонецПопытки;
			    	
	Иначе
		
	  ДатаСобытияРезультат = ДатаСобытия + ((7 - ЧасовойПояс) * 60 * 60);
		
  	КонецЕсли;
      
  	Возврат ДатаСобытияРезультат;
	
КонецФункции

#КонецОбласти

#Область РегистрацияИзменений

Процедура ЗарегистрироватьВсеДанныеНаУзле(Узел) Экспорт
			
	Если ЗначениеЗаполнено(Узел) Тогда		
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Визит.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.Визит КАК Визит
		               |ГДЕ
		               |	Визит.Менеджер = &Менеджер
		               |	И Визит.Дата >= &Дата
		               |	И НЕ Визит.ПометкаУдаления
		               |	И НЕ Визит.Клиент.ПометкаУдаления
		               |	И НЕ Визит.ТочкаДоставки.ПометкаУдаления
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	Клиенты.Ссылка
		               |ИЗ
		               |	Справочник.Клиенты КАК Клиенты
		               |ГДЕ
		               |	Клиенты.ОсновнойМенеджерПокупателя = &Менеджер
		               |	И НЕ Клиенты.ПометкаУдаления
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ТочкиДоставки.Ссылка
		               |ИЗ
		               |	Справочник.ТочкиДоставки КАК ТочкиДоставки
		               |ГДЕ
		               |	ТочкиДоставки.Владелец.ОсновнойМенеджерПокупателя = &Менеджер
		               |	И НЕ ТочкиДоставки.ПометкаУдаления
		               |	И НЕ ТочкиДоставки.Владелец.ПометкаУдаления
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	КаналыСбыта.Ссылка
		               |ИЗ
		               |	Справочник.КаналыСбыта КАК КаналыСбыта
		               |ГДЕ
		               |	НЕ КаналыСбыта.ПометкаУдаления
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	СпециализацииТочекДоставки.Ссылка
		               |ИЗ
		               |	Справочник.СпециализацииТочекДоставки КАК СпециализацииТочекДоставки
		               |ГДЕ
		               |	НЕ СпециализацииТочекДоставки.ПометкаУдаления
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ДебиторскаяЗадолженность.Ссылка
		               |ИЗ
		               |	Справочник.ДебиторскаяЗадолженность КАК ДебиторскаяЗадолженность
		               |ГДЕ
		               |	ДебиторскаяЗадолженность.Владелец.ОсновнойМенеджерПокупателя = &Менеджер
		               |	И ДебиторскаяЗадолженность.Владелец.ПометкаУдаления = ЛОЖЬ
		               |	И ДебиторскаяЗадолженность.ПометкаУдаления = ЛОЖЬ
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	Клиенты.Ссылка
		               |ИЗ
		               |	Справочник.Клиенты КАК Клиенты
		               |ГДЕ
		               |	Клиенты.МенеджерПоМасляномуПроекту = &Менеджер
		               |	И НЕ Клиенты.ПометкаУдаления
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ТочкиДоставки.Ссылка
		               |ИЗ
		               |	Справочник.ТочкиДоставки КАК ТочкиДоставки
		               |ГДЕ
		               |	ТочкиДоставки.Владелец.МенеджерПоМасляномуПроекту = &Менеджер
		               |	И НЕ ТочкиДоставки.ПометкаУдаления
		               |	И НЕ ТочкиДоставки.Владелец.ПометкаУдаления
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ДебиторскаяЗадолженность.Ссылка
		               |ИЗ
		               |	Справочник.ДебиторскаяЗадолженность КАК ДебиторскаяЗадолженность
		               |ГДЕ
		               |	ДебиторскаяЗадолженность.Владелец.МенеджерПоМасляномуПроекту = &Менеджер
		               |	И ДебиторскаяЗадолженность.Владелец.ПометкаУдаления = ЛОЖЬ
		               |	И ДебиторскаяЗадолженность.ПометкаУдаления = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("Менеджер", Узел.Пользователь);
		Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДата()));
		
		ВыборкаСсылок = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаСсылок.Следующий() Цикл
			ПланыОбмена.ЗарегистрироватьИзменения(Узел, ВыборкаСсылок.Ссылка);			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Опросы.ТочкаДоставки КАК ТочкаДоставки,
		|	Опросы.ОпросКод КАК ОпросКод
		|ИЗ
		|	РегистрСведений.Опросы КАК Опросы
		|ГДЕ
		|	Опросы.ТочкаДоставки.Владелец.ОсновнойМенеджерПокупателя = &Менеджер";
		
		Запрос.УстановитьПараметр("Менеджер", Узел.Пользователь);
		
		ВыборкаИзмерения = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаИзмерения.Следующий() Цикл
			
			НЗ = РегистрыСведений.Опросы.СоздатьНаборЗаписей();
			НЗ.Отбор.ТочкаДоставки.Установить(ВыборкаИзмерения.ТочкаДоставки);
			НЗ.Отбор.ОпросКод.Установить(ВыборкаИзмерения.ОпросКод);
			
			НЗ.Прочитать();
			
			ПланыОбмена.ЗарегистрироватьИзменения(Узел, НЗ);
			
		КонецЦикла;
			
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти


